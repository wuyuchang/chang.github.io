{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/logo.jpg","path":"img/logo.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/indigo/package.json","hash":"81879540fc3eb8012411b6355a5ec9659ce17a38","modified":1480415403268},{"_id":"themes/indigo/_config.yml","hash":"446df68d05b78775bd8bf561be052e4180b187ab","modified":1480415402961},{"_id":"source/_posts/Principle-of-Promise-Deferred.md","hash":"dc3c3569315b6c734174e3208f8c5c9899c4f326","modified":1481278259675},{"_id":"source/_posts/node-js.md","hash":"1e44e538edc6651b45ce16a42b6c9982b30c39e9","modified":1481279994656},{"_id":"themes/indigo/README.md","hash":"a91710ebddfcbeee28ebdccbdd2688ddff8f1560","modified":1480415402955},{"_id":"themes/indigo/layout/page.ejs","hash":"26c42241ae442942fa78e22c99b7ee7debe512e4","modified":1480415403252},{"_id":"themes/indigo/layout/category.ejs","hash":"183ec4632c44243db391b1722aec485073417690","modified":1480415403231},{"_id":"themes/indigo/layout/index.ejs","hash":"08b1dd8e53de4516ae8dcb61a8bc9155ec0cbe46","modified":1480415403240},{"_id":"themes/indigo/layout/post.ejs","hash":"26c42241ae442942fa78e22c99b7ee7debe512e4","modified":1480415403254},{"_id":"themes/indigo/layout/layout.ejs","hash":"415e249dc7c9da8fe496987b024b956dbcc419cf","modified":1480415403248},{"_id":"themes/indigo/layout/tag.ejs","hash":"183ec4632c44243db391b1722aec485073417690","modified":1480415403255},{"_id":"themes/indigo/layout/tags.ejs","hash":"f8e019f8183fc1771f18e344029bc8ecb86272e0","modified":1480415403264},{"_id":"source/_posts/web-server.md","hash":"1d0da6e52383c9c6319181244fb60ade9b0e3aa6","modified":1481113599159},{"_id":"themes/indigo/layout/archive.ejs","hash":"29dd0adde8415dc56032878d3286690e4b8cee66","modified":1480415403227},{"_id":"themes/indigo/screenshots/hexo-theme-pad.png","hash":"08e41f140682fbd9a78999de79823ed59b1d2232","modified":1480415403274},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"ca6944189b24444f1b7d976c68631977cb21ff4e","modified":1480415402982},{"_id":"themes/indigo/screenshots/hexo-theme-search.png","hash":"ffa0b5e1ed0f4eea7a1e57f6779c78052df03b5c","modified":1480415403281},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"5f96bd5cfe26fe7ad476d9b58e6c2f7f5fb8e9af","modified":1480415402977},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"337e3004b99aed3dd98a83465fe75bc5ea3e219e","modified":1480415403017},{"_id":"themes/indigo/screenshots/hexo-theme-phone.png","hash":"1404b4fd664a8a552eed8ab46c0fb3b281c4f007","modified":1480415403280},{"_id":"themes/indigo/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1480415403028},{"_id":"themes/indigo/layout/_partial/cnzz.ejs","hash":"dbee64698919aeaeb0923c44b3f8c5402c7b8fed","modified":1480415403011},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"0f353bf87a124581d6632d328a018353d4a990a1","modified":1480415403052},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"654cfb61eb6779d7d4d2dd5b31330fb251fa273b","modified":1480415403048},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"8b3e037dd5f3d4564012689c5cd6f63caf73df0f","modified":1480415403073},{"_id":"themes/indigo/layout/_partial/mathjax.ejs","hash":"b82771c359969ddf3b384ab4aacdb1bacbb53377","modified":1480415403085},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"b0cc61079b36dc9922f7a5694b853fe4d7148959","modified":1480415403069},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"b97fb6ee93b66a645cbddf8f14e85a03373952d1","modified":1480415403203},{"_id":"themes/indigo/screenshots/hexo-theme-archive.png","hash":"36fd8e55e6672aa6afbd7f88b68a532c819f4473","modified":1480415403272},{"_id":"themes/indigo/source/css/style.less","hash":"f3056b43159ddc24fb135089674ff823e675a4c9","modified":1480415403602},{"_id":"themes/indigo/screenshots/hexo-theme-pc.png","hash":"5898394b7664bf87ec1422fe7c21e7e76fb37185","modified":1480415403278},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"5b8d9b22a189ea0da4d2b04f409d68408712e36c","modified":1480415403211},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"96d9b21c22e8c2048f2023ccbe7134031ecebdca","modified":1480415403099},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1480415403616},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1480415403618},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1480415403620},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"13b8ca0a04285566b2414d5de0d6563f0f2d6de2","modified":1480415403110},{"_id":"themes/indigo/source/img/alipay.jpg","hash":"6054d9ed2ca7cd1f645b729e05632134467d4daa","modified":1480415403610},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1480415403619},{"_id":"themes/indigo/source/img/logo.jpg","hash":"2eda8e2bf8480d6fb56961d4d67cf8cfa8366f4b","modified":1480415403627},{"_id":"themes/indigo/source/js/main.js","hash":"8292514a9a2b8ab928871cdc1fa34e0aed6fee17","modified":1480415403658},{"_id":"themes/indigo/source/img/wechat.jpg","hash":"ef069cc9e80c7553fd60589b0727bbbf8c6de372","modified":1480415403635},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"f9a8a0d99b39eec351c4effb2ad8508c8d2395ab","modified":1480415403143},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c08e44cbd7315dec7afb6054b04d3c7b82c3bde8","modified":1480415403120},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"f137c126672769e9571be2bb0a70ea8dda644b0e","modified":1480415403163},{"_id":"themes/indigo/source/js/search.js","hash":"7b16dcdd20041944894b5419539e66ead5403c2e","modified":1480415403680},{"_id":"themes/indigo/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1480415403152},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"4d25f0bf9d7dba72908a5819f17b9edcd7361d6c","modified":1480415403138},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"5728be1589a7533b10806982abe7ddb9bce23aa9","modified":1480415403184},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"41a150990fda5bbd63a630b4840b56d4762b4251","modified":1480415403179},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"9bf953ae16b8796291ea49b4e60a5174cd787d07","modified":1480415403287},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"fbb42e10a402555c54f94d8a7e9a03cb6a794f94","modified":1480415403174},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"eaad7af7888bddd7095243a43ff38f55ad8c494a","modified":1480415403199},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"60139e37b41769d218e5cf6f6040c41bd2293728","modified":1480415403193},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"804fb41d5c4c01ab452daf8429204bf8cb7944ad","modified":1480415403293},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"bad63006b3bd4849bf53ad38482af0d9971061d3","modified":1480415403312},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"439fed29b399232241b52a9c0d8464bdc21ef8c1","modified":1480415403316},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"4d225a6c7bb4bfec331893000f6a74f189d44ff9","modified":1480415403322},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"abe4f31e97397882862f82e61dd245d90ac278c7","modified":1480415403326},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"0361039b2abdeb1b41e504fa437df962cda055d2","modified":1480415403330},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"298abc4a58fbd838145d0c036b1fb007f569cf20","modified":1480415403335},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"68e21650caeffa0575b3e720da91f235453362f3","modified":1480415403340},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"3e457942995da8840e7662fa6cb551a7e12ea294","modified":1480415403344},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"01bb8da651c5123ab862660b4fd79235464e31c0","modified":1480415403350},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"a57647250236ca57768bb687f20fc5f8deb55dd0","modified":1480415403355},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"ffafe7c70131ce66d497c23fb455abd9aa367496","modified":1480415403308},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"a8b41b0b0c8ff2f6cf95f7f9784611dd8c212ffe","modified":1480415403370},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"6871d076083b7541c132eb54664e8d6fd80bf8e8","modified":1480415403365},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"36e77ccb39b080aab19d9d87fd20882d5ac84ee9","modified":1480415403359},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1480415403453},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1480415403474},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1480415403468},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1480415403488},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1480415403508},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1480415403502},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1480415403538},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1480415403520},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1480415403533},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1480415403550},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1480415403564},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1480415403569},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1480415403575},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1480415403590},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1480415403381},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1480415403436},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1480415403441},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1480415403405},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1480415403463},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1480415403498},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1480415403528},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1480415403559},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1480415403431},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1480415403596},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1480415403585},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1480415403422},{"_id":"public/atom.xml","hash":"c816f9941820cff09a1b28ffdea6eb24994ece67","modified":1481290944108},{"_id":"public/content.json","hash":"e096d36fb5333354bac86049df1c66fc65a73f19","modified":1481290944217},{"_id":"public/archives/2016/index.html","hash":"6deb1a7dc96d89c7769670ae9fe66fa331c2900e","modified":1481255326198},{"_id":"public/archives/index.html","hash":"92fac20359a1644d2217c6a9e6e2a2b18a17f4f7","modified":1481255326198},{"_id":"public/archives/2016/11/index.html","hash":"85a5a8c9a91da963d4a81b986707a10e93e1a844","modified":1481255326198},{"_id":"public/index.html","hash":"657ffaa2185ca87d967a3df7388ba20f46b24e34","modified":1481255326199},{"_id":"public/archives/2016/12/index.html","hash":"caea0c8b566836075bd0be8bf7dc279d90902c58","modified":1481255326199},{"_id":"public/tags/Node-js/index.html","hash":"698933a8504f9f7b014b8ab3545c7a35ad361460","modified":1481255326199},{"_id":"public/tags/node-js/index.html","hash":"6f636e2c5f3e12be943bfca9cc0e593679068b1c","modified":1481255326199},{"_id":"public/2016/12/09/Principle-of-Promise-Deferred/index.html","hash":"1e7a826bd6aa2581778b8041771e2b5014dbe3e9","modified":1481278539598},{"_id":"public/2016/11/29/web-server/index.html","hash":"2613d002b74953a4b6f9dfea5691d8b118d69838","modified":1481255326199},{"_id":"public/2016/12/08/node-js/index.html","hash":"33df6257ddd0be428fca017ddb8a22fe73c4ef0d","modified":1481290944233}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Principle of Promise/Deferred","date":"2016-12-09T02:21:08.000Z","_content":"\n# Super simple realize separate call an async and handle result in two files.\nAssume we have a project base on jQuery, we have to separate call AJAX and handle result in another file.\n\nMost of the time, we handle the result with below.\n``` JavaScript\n$.get('url', data => {\n  //handle data\n})\n```\n\nBut, sometimes, we don't want to handle it in the moment. Maybe we just want to handle in another file. So we can do below.\n`request.js`\n``` JavaScript\n$.get('url', data => {\n  window.result(data)\n})\n```\n`handle.js`\n``` JavaScript\nwindow.result = data => {\n  // handle result\n}\n```\n\nBut, we most of the time, we are not just handle the success result. We also handle error, receiving data.\nFor example.\n\n`request.js`\n``` JavaScript\n$.ajax({\n  url: 'url',\n  data: 'data',\n  type: 'get',\n  success: data => {\n    window.deferrd.resolve(data)\n  },\n  error: err => {\n    window.defered.error(err)\n  },\n  complete: notify => {\n    window.deferred.notify('complete')\n  }\n})\n```\n\n`handle.js`\n``` JavaScript\nwindow.deferred = {\n  //handle success\n  resolve: data => {\n    console.log(data)\n  },\n  //handle error\n  error: err => {\n    console.log(err)\n  },\n  //handle complete\n  notify: msg => {\n    console.log(msg)\n  }\n}\n```\n\n# use jQuery promise/deferred\nFortunately, jQuery already realize this, so we just have to do below.\n`request.js`\n``` JavaScript\nwindow.promise = $.get('url')\n```\n`handle.js`\n``` JavaScript\nwindow.promise.then(data => {\n  // handle success\n}, err => {\n  // handle error\n})\n```\n\n# Promise/A\nFor show how promise and deferred work, we create a new and simple promise and deferred object, so that you can easy understand it.\n## Promise Object\nHere try to extend EventEmitter module to explain how it work.\n`Promise.class.js`\n``` JavaScript\nclass Promise extends EventEmitter {\n  then(success, error, progress) {\n    if (typeof success === 'function') {\n      this.once('success', success)\n    }\n    if (typeof error === 'function') {\n      this.once('error', error)\n    }\n    if (typeof progress === 'progress') {\n      // Note, this function will be recall, so here defined the event use 'on'\n      this.on('progress', progress)\n    }\n  }\n}\n```\nHere you can see we defined three events after you pass these callback function into it through call 'then' function.\nSo we defined the events, and we have to emit it, so that we can execute these callbacks with the result.\n\nBelow, we defined the Deferred object.\n## Deferred Object\nHere we defined the Deferred, these functions just emit promise, so tell them we finished.\n`Deferred.class.js`\n``` JavaScript\nclass Deferred {\n  this.state = 'unsuccess'\n  this.promise = new Promise()\n\n  resolve(obj) {\n    this.state = 'success'\n    this.promise.emit('success', obj)\n  }\n  reject(obj) {\n    this.state = 'error'\n    this.promise.emit('error', obj)\n  }\n  progress(obj) {\n    this.state = 'progress'\n    this.promise.emit('progress', obj)\n  }\n}\n```\n\n\n## use Promise & Deferred\nTo realize this, we create a new Deferred, and we trigger deferred function (progress/end/error) when we finish specific action to tell Deferred that we finished.\nThen we get promise object, and then we can store it, and call it with callback in another file.\nSo we successful separate call async and get data in two files.\n``` JavaScript\nlet promisify = res => {\n  let deferred = new Deferred()\n  let result = ''\n\n  res.on('data', chunk => {\n    result += chunk\n    deferred.progress(result)\n  })\n  res.on('end', () => {\n    deferred.resolve(result)\n  })\n  res.on('error', () => {\n    deferred.reject()\n  })\n\n  return deferred.promise\n}\n\nglobal.result = promisify(res)\n\n\n// in another file, this just an example to pass the result to global, so we can easy get the result, in the production, you better to pass the result in other way.\nglobal.result.then((result) => {\n  // success\n}, (err) => {\n  // error\n}, (chunk) => {\n  // progress\n  console.log(chunk)\n})\n```\n\n## Deferred.all()\nDo some action after a several of asynchronous finished.\n`Deferred.class.js`\n``` JavaScript\nclass Deferred {\n  // ...\n\n  all(promises) {\n    let count = promises.length\n    let that = this\n    let results = []\n    promises.forEach((promise, i) => {\n      promise.then(data => {\n        count --\n        results[i] = data\n        if (count === 0) {\n          that.resolve(results)\n        }\n      })\n    }, err => {\n      that.reject(err)\n    })\n\n    return this.promise\n  }\n}\n```\n\n## Order Run asynchronous\nRun asynchronous in order\n`Deferred.class.js`\n``` JavaScript\nconst Promise = require('./promise.class')\n\nmodule.exports = class Deferred {\n  constructor() {\n    this.promise = new Promise()\n  }\n\n  resolve(data) {\n    let promise = this.promise\n    let handler\n    while(handler = promise.queue.shift()) {\n      if (handler && handler.resolve) {\n        let ret = handler.resolve(data)\n\n        // if there has next promise, then we interrupt current loop, and set next promise.queue equals current queue\n        if (ret && ret.isPromise) {\n          ret.queue = promise.queue\n          return\n        }\n      }\n    }\n  }\n\n  reject(err) {\n    let promise = this.promise\n    let handler\n    while(handler = promise.queue.shift()) {\n      if (handler && handler.reject) {\n        let ret = handler.reject(err)\n\n        // if there has next promise, then we interrupt current loop, and set next promise.queue equals current queue\n        if (ret && ret.isPromise) {\n          ret.queue = promise.queue\n          return\n        }\n      }\n    }\n  }\n\n  callback(str) {\n    let that = this\n    return (err, file) => {\n      if (err) {\n        return that.reject(err)\n      }\n      that.resolve(file)\n    }\n  }\n}\n```\n\n`promise.class.js`\n``` JavaScript\nmodule.exports = class Promise {\n  constructor() {\n    this.queue = []\n    this.isPromise = true\n  }\n\n  then(resolve, reject) {\n    let handler = {}\n    if (typeof resolve === 'function') {\n      handler.resolve = resolve\n    }\n    if (typeof reject === 'function') {\n      handler.reject = reject\n    }\n\n    this.queue.push(handler)\n    return this\n  }\n}\n```\n\n`app.js`\n``` JavaScript\nconst Deferred = require('./deferred.class')\nconst fs = require('fs')\n\nlet action1 = (file, encoding) => {\n  let deferred = new Deferred()\n  fs.readFile(file, encoding, deferred.callback())\n  return deferred.promise\n}\n\nlet action2 = (file, encoding) => {\n  let deferred = new Deferred()\n  fs.readFile(file, encoding, deferred.callback())\n  return deferred.promise\n}\n\naction1('./file1.txt', 'utf8').then(file1 => {\n  return action2(file1.trim(), 'utf8')\n}).then(file2 => {\n  console.log(file2)\n})\n```\n","source":"_posts/Principle-of-Promise-Deferred.md","raw":"---\ntitle: Principle of Promise/Deferred\ndate: 2016-12-09 10:21:08\ntags: Node.js\n---\n\n# Super simple realize separate call an async and handle result in two files.\nAssume we have a project base on jQuery, we have to separate call AJAX and handle result in another file.\n\nMost of the time, we handle the result with below.\n``` JavaScript\n$.get('url', data => {\n  //handle data\n})\n```\n\nBut, sometimes, we don't want to handle it in the moment. Maybe we just want to handle in another file. So we can do below.\n`request.js`\n``` JavaScript\n$.get('url', data => {\n  window.result(data)\n})\n```\n`handle.js`\n``` JavaScript\nwindow.result = data => {\n  // handle result\n}\n```\n\nBut, we most of the time, we are not just handle the success result. We also handle error, receiving data.\nFor example.\n\n`request.js`\n``` JavaScript\n$.ajax({\n  url: 'url',\n  data: 'data',\n  type: 'get',\n  success: data => {\n    window.deferrd.resolve(data)\n  },\n  error: err => {\n    window.defered.error(err)\n  },\n  complete: notify => {\n    window.deferred.notify('complete')\n  }\n})\n```\n\n`handle.js`\n``` JavaScript\nwindow.deferred = {\n  //handle success\n  resolve: data => {\n    console.log(data)\n  },\n  //handle error\n  error: err => {\n    console.log(err)\n  },\n  //handle complete\n  notify: msg => {\n    console.log(msg)\n  }\n}\n```\n\n# use jQuery promise/deferred\nFortunately, jQuery already realize this, so we just have to do below.\n`request.js`\n``` JavaScript\nwindow.promise = $.get('url')\n```\n`handle.js`\n``` JavaScript\nwindow.promise.then(data => {\n  // handle success\n}, err => {\n  // handle error\n})\n```\n\n# Promise/A\nFor show how promise and deferred work, we create a new and simple promise and deferred object, so that you can easy understand it.\n## Promise Object\nHere try to extend EventEmitter module to explain how it work.\n`Promise.class.js`\n``` JavaScript\nclass Promise extends EventEmitter {\n  then(success, error, progress) {\n    if (typeof success === 'function') {\n      this.once('success', success)\n    }\n    if (typeof error === 'function') {\n      this.once('error', error)\n    }\n    if (typeof progress === 'progress') {\n      // Note, this function will be recall, so here defined the event use 'on'\n      this.on('progress', progress)\n    }\n  }\n}\n```\nHere you can see we defined three events after you pass these callback function into it through call 'then' function.\nSo we defined the events, and we have to emit it, so that we can execute these callbacks with the result.\n\nBelow, we defined the Deferred object.\n## Deferred Object\nHere we defined the Deferred, these functions just emit promise, so tell them we finished.\n`Deferred.class.js`\n``` JavaScript\nclass Deferred {\n  this.state = 'unsuccess'\n  this.promise = new Promise()\n\n  resolve(obj) {\n    this.state = 'success'\n    this.promise.emit('success', obj)\n  }\n  reject(obj) {\n    this.state = 'error'\n    this.promise.emit('error', obj)\n  }\n  progress(obj) {\n    this.state = 'progress'\n    this.promise.emit('progress', obj)\n  }\n}\n```\n\n\n## use Promise & Deferred\nTo realize this, we create a new Deferred, and we trigger deferred function (progress/end/error) when we finish specific action to tell Deferred that we finished.\nThen we get promise object, and then we can store it, and call it with callback in another file.\nSo we successful separate call async and get data in two files.\n``` JavaScript\nlet promisify = res => {\n  let deferred = new Deferred()\n  let result = ''\n\n  res.on('data', chunk => {\n    result += chunk\n    deferred.progress(result)\n  })\n  res.on('end', () => {\n    deferred.resolve(result)\n  })\n  res.on('error', () => {\n    deferred.reject()\n  })\n\n  return deferred.promise\n}\n\nglobal.result = promisify(res)\n\n\n// in another file, this just an example to pass the result to global, so we can easy get the result, in the production, you better to pass the result in other way.\nglobal.result.then((result) => {\n  // success\n}, (err) => {\n  // error\n}, (chunk) => {\n  // progress\n  console.log(chunk)\n})\n```\n\n## Deferred.all()\nDo some action after a several of asynchronous finished.\n`Deferred.class.js`\n``` JavaScript\nclass Deferred {\n  // ...\n\n  all(promises) {\n    let count = promises.length\n    let that = this\n    let results = []\n    promises.forEach((promise, i) => {\n      promise.then(data => {\n        count --\n        results[i] = data\n        if (count === 0) {\n          that.resolve(results)\n        }\n      })\n    }, err => {\n      that.reject(err)\n    })\n\n    return this.promise\n  }\n}\n```\n\n## Order Run asynchronous\nRun asynchronous in order\n`Deferred.class.js`\n``` JavaScript\nconst Promise = require('./promise.class')\n\nmodule.exports = class Deferred {\n  constructor() {\n    this.promise = new Promise()\n  }\n\n  resolve(data) {\n    let promise = this.promise\n    let handler\n    while(handler = promise.queue.shift()) {\n      if (handler && handler.resolve) {\n        let ret = handler.resolve(data)\n\n        // if there has next promise, then we interrupt current loop, and set next promise.queue equals current queue\n        if (ret && ret.isPromise) {\n          ret.queue = promise.queue\n          return\n        }\n      }\n    }\n  }\n\n  reject(err) {\n    let promise = this.promise\n    let handler\n    while(handler = promise.queue.shift()) {\n      if (handler && handler.reject) {\n        let ret = handler.reject(err)\n\n        // if there has next promise, then we interrupt current loop, and set next promise.queue equals current queue\n        if (ret && ret.isPromise) {\n          ret.queue = promise.queue\n          return\n        }\n      }\n    }\n  }\n\n  callback(str) {\n    let that = this\n    return (err, file) => {\n      if (err) {\n        return that.reject(err)\n      }\n      that.resolve(file)\n    }\n  }\n}\n```\n\n`promise.class.js`\n``` JavaScript\nmodule.exports = class Promise {\n  constructor() {\n    this.queue = []\n    this.isPromise = true\n  }\n\n  then(resolve, reject) {\n    let handler = {}\n    if (typeof resolve === 'function') {\n      handler.resolve = resolve\n    }\n    if (typeof reject === 'function') {\n      handler.reject = reject\n    }\n\n    this.queue.push(handler)\n    return this\n  }\n}\n```\n\n`app.js`\n``` JavaScript\nconst Deferred = require('./deferred.class')\nconst fs = require('fs')\n\nlet action1 = (file, encoding) => {\n  let deferred = new Deferred()\n  fs.readFile(file, encoding, deferred.callback())\n  return deferred.promise\n}\n\nlet action2 = (file, encoding) => {\n  let deferred = new Deferred()\n  fs.readFile(file, encoding, deferred.callback())\n  return deferred.promise\n}\n\naction1('./file1.txt', 'utf8').then(file1 => {\n  return action2(file1.trim(), 'utf8')\n}).then(file2 => {\n  console.log(file2)\n})\n```\n","slug":"Principle-of-Promise-Deferred","published":1,"updated":"2016-12-09T10:10:59.675Z","_id":"ciwh62j7y0000c8ww2ko4jyqt","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Super-simple-realize-separate-call-an-async-and-handle-result-in-two-files\"><a href=\"#Super-simple-realize-separate-call-an-async-and-handle-result-in-two-files\" class=\"headerlink\" title=\"Super simple realize separate call an async and handle result in two files.\"></a>Super simple realize separate call an async and handle result in two files.</h1><p>Assume we have a project base on jQuery, we have to separate call AJAX and handle result in another file.</p>\n<p>Most of the time, we handle the result with below.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.get(<span class=\"string\">'url'</span>, data =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">//handle data</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>But, sometimes, we don’t want to handle it in the moment. Maybe we just want to handle in another file. So we can do below.<br><code>request.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.get(<span class=\"string\">'url'</span>, data =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">window</span>.result(data)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><code>handle.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.result = <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// handle result</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>But, we most of the time, we are not just handle the success result. We also handle error, receiving data.<br>For example.</p>\n<p><code>request.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">'url'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"string\">'data'</span>,</div><div class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">'get'</span>,</div><div class=\"line\">  <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.deferrd.resolve(data)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.defered.error(err)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">complete</span>: <span class=\"function\"><span class=\"params\">notify</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.deferred.notify(<span class=\"string\">'complete'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><code>handle.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.deferred = &#123;</div><div class=\"line\">  <span class=\"comment\">//handle success</span></div><div class=\"line\">  resolve: <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//handle error</span></div><div class=\"line\">  error: <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(err)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//handle complete</span></div><div class=\"line\">  notify: <span class=\"function\"><span class=\"params\">msg</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(msg)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"use-jQuery-promise-deferred\"><a href=\"#use-jQuery-promise-deferred\" class=\"headerlink\" title=\"use jQuery promise/deferred\"></a>use jQuery promise/deferred</h1><p>Fortunately, jQuery already realize this, so we just have to do below.<br><code>request.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.promise = $.get(<span class=\"string\">'url'</span>)</div></pre></td></tr></table></figure></p>\n<p><code>handle.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.promise.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// handle success</span></div><div class=\"line\">&#125;, err =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// handle error</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h1 id=\"Promise-A\"><a href=\"#Promise-A\" class=\"headerlink\" title=\"Promise/A\"></a>Promise/A</h1><p>For show how promise and deferred work, we create a new and simple promise and deferred object, so that you can easy understand it.</p>\n<h2 id=\"Promise-Object\"><a href=\"#Promise-Object\" class=\"headerlink\" title=\"Promise Object\"></a>Promise Object</h2><p>Here try to extend EventEmitter module to explain how it work.<br><code>Promise.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> <span class=\"keyword\">extends</span> <span class=\"title\">EventEmitter</span> </span>&#123;</div><div class=\"line\">  then(success, error, progress) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> success === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.once(<span class=\"string\">'success'</span>, success)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> error === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.once(<span class=\"string\">'error'</span>, error)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> progress === <span class=\"string\">'progress'</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// Note, this function will be recall, so here defined the event use 'on'</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.on(<span class=\"string\">'progress'</span>, progress)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Here you can see we defined three events after you pass these callback function into it through call ‘then’ function.<br>So we defined the events, and we have to emit it, so that we can execute these callbacks with the result.</p>\n<p>Below, we defined the Deferred object.</p>\n<h2 id=\"Deferred-Object\"><a href=\"#Deferred-Object\" class=\"headerlink\" title=\"Deferred Object\"></a>Deferred Object</h2><p>Here we defined the Deferred, these functions just emit promise, so tell them we finished.<br><code>Deferred.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Deferred</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.state = <span class=\"string\">'unsuccess'</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>()</div><div class=\"line\"></div><div class=\"line\">  resolve(obj) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'success'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.promise.emit(<span class=\"string\">'success'</span>, obj)</div><div class=\"line\">  &#125;</div><div class=\"line\">  reject(obj) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'error'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.promise.emit(<span class=\"string\">'error'</span>, obj)</div><div class=\"line\">  &#125;</div><div class=\"line\">  progress(obj) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'progress'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.promise.emit(<span class=\"string\">'progress'</span>, obj)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"use-Promise-amp-Deferred\"><a href=\"#use-Promise-amp-Deferred\" class=\"headerlink\" title=\"use Promise &amp; Deferred\"></a>use Promise &amp; Deferred</h2><p>To realize this, we create a new Deferred, and we trigger deferred function (progress/end/error) when we finish specific action to tell Deferred that we finished.<br>Then we get promise object, and then we can store it, and call it with callback in another file.<br>So we successful separate call async and get data in two files.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> promisify = <span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> deferred = <span class=\"keyword\">new</span> Deferred()</div><div class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"string\">''</span></div><div class=\"line\"></div><div class=\"line\">  res.on(<span class=\"string\">'data'</span>, chunk =&gt; &#123;</div><div class=\"line\">    result += chunk</div><div class=\"line\">    deferred.progress(result)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  res.on(<span class=\"string\">'end'</span>, () =&gt; &#123;</div><div class=\"line\">    deferred.resolve(result)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  res.on(<span class=\"string\">'error'</span>, () =&gt; &#123;</div><div class=\"line\">    deferred.reject()</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> deferred.promise</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">global.result = promisify(res)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// in another file, this just an example to pass the result to global, so we can easy get the result, in the production, you better to pass the result in other way.</span></div><div class=\"line\">global.result.then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// success</span></div><div class=\"line\">&#125;, (err) =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// error</span></div><div class=\"line\">&#125;, (chunk) =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// progress</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(chunk)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h2 id=\"Deferred-all\"><a href=\"#Deferred-all\" class=\"headerlink\" title=\"Deferred.all()\"></a>Deferred.all()</h2><p>Do some action after a several of asynchronous finished.<br><code>Deferred.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Deferred</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">  all(promises) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> count = promises.length</div><div class=\"line\">    <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">let</span> results = []</div><div class=\"line\">    promises.forEach(<span class=\"function\">(<span class=\"params\">promise, i</span>) =&gt;</span> &#123;</div><div class=\"line\">      promise.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">        count --</div><div class=\"line\">        results[i] = data</div><div class=\"line\">        <span class=\"keyword\">if</span> (count === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          that.resolve(results)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;, err =&gt; &#123;</div><div class=\"line\">      that.reject(err)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.promise</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Order-Run-asynchronous\"><a href=\"#Order-Run-asynchronous\" class=\"headerlink\" title=\"Order Run asynchronous\"></a>Order Run asynchronous</h2><p>Run asynchronous in order<br><code>Deferred.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'./promise.class'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Deferred</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>()</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  resolve(data) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> promise = <span class=\"keyword\">this</span>.promise</div><div class=\"line\">    <span class=\"keyword\">let</span> handler</div><div class=\"line\">    <span class=\"keyword\">while</span>(handler = promise.queue.shift()) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (handler &amp;&amp; handler.resolve) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> ret = handler.resolve(data)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// if there has next promise, then we interrupt current loop, and set next promise.queue equals current queue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (ret &amp;&amp; ret.isPromise) &#123;</div><div class=\"line\">          ret.queue = promise.queue</div><div class=\"line\">          <span class=\"keyword\">return</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  reject(err) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> promise = <span class=\"keyword\">this</span>.promise</div><div class=\"line\">    <span class=\"keyword\">let</span> handler</div><div class=\"line\">    <span class=\"keyword\">while</span>(handler = promise.queue.shift()) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (handler &amp;&amp; handler.reject) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> ret = handler.reject(err)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// if there has next promise, then we interrupt current loop, and set next promise.queue equals current queue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (ret &amp;&amp; ret.isPromise) &#123;</div><div class=\"line\">          ret.queue = promise.queue</div><div class=\"line\">          <span class=\"keyword\">return</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  callback(str) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">err, file</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> that.reject(err)</div><div class=\"line\">      &#125;</div><div class=\"line\">      that.resolve(file)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>promise.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.queue = []</div><div class=\"line\">    <span class=\"keyword\">this</span>.isPromise = <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  then(resolve, reject) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> handler = &#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> resolve === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      handler.resolve = resolve</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reject === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      handler.reject = reject</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.queue.push(handler)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>app.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Deferred = <span class=\"built_in\">require</span>(<span class=\"string\">'./deferred.class'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> action1 = <span class=\"function\">(<span class=\"params\">file, encoding</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> deferred = <span class=\"keyword\">new</span> Deferred()</div><div class=\"line\">  fs.readFile(file, encoding, deferred.callback())</div><div class=\"line\">  <span class=\"keyword\">return</span> deferred.promise</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> action2 = <span class=\"function\">(<span class=\"params\">file, encoding</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> deferred = <span class=\"keyword\">new</span> Deferred()</div><div class=\"line\">  fs.readFile(file, encoding, deferred.callback())</div><div class=\"line\">  <span class=\"keyword\">return</span> deferred.promise</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">action1(<span class=\"string\">'./file1.txt'</span>, <span class=\"string\">'utf8'</span>).then(<span class=\"function\"><span class=\"params\">file1</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> action2(file1.trim(), <span class=\"string\">'utf8'</span>)</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">file2</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(file2)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h1 id=\"Super-simple-realize-separate-call-an-async-and-handle-result-in-two-files\"><a href=\"#Super-simple-realize-separate-call-an-async-and-handle-result-in-two-files\" class=\"headerlink\" title=\"Super simple realize separate call an async and handle result in two files.\"></a>Super simple realize separate call an async and handle result in two files.</h1><p>Assume we have a project base on jQuery, we have to separate call AJAX and handle result in another file.</p>\n<p>Most of the time, we handle the result with below.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.get(<span class=\"string\">'url'</span>, data =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">//handle data</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>But, sometimes, we don’t want to handle it in the moment. Maybe we just want to handle in another file. So we can do below.<br><code>request.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.get(<span class=\"string\">'url'</span>, data =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">window</span>.result(data)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><code>handle.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.result = <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// handle result</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>But, we most of the time, we are not just handle the success result. We also handle error, receiving data.<br>For example.</p>\n<p><code>request.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">'url'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"string\">'data'</span>,</div><div class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">'get'</span>,</div><div class=\"line\">  <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.deferrd.resolve(data)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.defered.error(err)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">complete</span>: <span class=\"function\"><span class=\"params\">notify</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.deferred.notify(<span class=\"string\">'complete'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><code>handle.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.deferred = &#123;</div><div class=\"line\">  <span class=\"comment\">//handle success</span></div><div class=\"line\">  resolve: <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//handle error</span></div><div class=\"line\">  error: <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(err)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//handle complete</span></div><div class=\"line\">  notify: <span class=\"function\"><span class=\"params\">msg</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(msg)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"use-jQuery-promise-deferred\"><a href=\"#use-jQuery-promise-deferred\" class=\"headerlink\" title=\"use jQuery promise/deferred\"></a>use jQuery promise/deferred</h1><p>Fortunately, jQuery already realize this, so we just have to do below.<br><code>request.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.promise = $.get(<span class=\"string\">'url'</span>)</div></pre></td></tr></table></figure></p>\n<p><code>handle.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.promise.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// handle success</span></div><div class=\"line\">&#125;, err =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// handle error</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h1 id=\"Promise-A\"><a href=\"#Promise-A\" class=\"headerlink\" title=\"Promise/A\"></a>Promise/A</h1><p>For show how promise and deferred work, we create a new and simple promise and deferred object, so that you can easy understand it.</p>\n<h2 id=\"Promise-Object\"><a href=\"#Promise-Object\" class=\"headerlink\" title=\"Promise Object\"></a>Promise Object</h2><p>Here try to extend EventEmitter module to explain how it work.<br><code>Promise.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> <span class=\"keyword\">extends</span> <span class=\"title\">EventEmitter</span> </span>&#123;</div><div class=\"line\">  then(success, error, progress) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> success === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.once(<span class=\"string\">'success'</span>, success)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> error === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.once(<span class=\"string\">'error'</span>, error)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> progress === <span class=\"string\">'progress'</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// Note, this function will be recall, so here defined the event use 'on'</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.on(<span class=\"string\">'progress'</span>, progress)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Here you can see we defined three events after you pass these callback function into it through call ‘then’ function.<br>So we defined the events, and we have to emit it, so that we can execute these callbacks with the result.</p>\n<p>Below, we defined the Deferred object.</p>\n<h2 id=\"Deferred-Object\"><a href=\"#Deferred-Object\" class=\"headerlink\" title=\"Deferred Object\"></a>Deferred Object</h2><p>Here we defined the Deferred, these functions just emit promise, so tell them we finished.<br><code>Deferred.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Deferred</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.state = <span class=\"string\">'unsuccess'</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>()</div><div class=\"line\"></div><div class=\"line\">  resolve(obj) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'success'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.promise.emit(<span class=\"string\">'success'</span>, obj)</div><div class=\"line\">  &#125;</div><div class=\"line\">  reject(obj) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'error'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.promise.emit(<span class=\"string\">'error'</span>, obj)</div><div class=\"line\">  &#125;</div><div class=\"line\">  progress(obj) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'progress'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.promise.emit(<span class=\"string\">'progress'</span>, obj)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"use-Promise-amp-Deferred\"><a href=\"#use-Promise-amp-Deferred\" class=\"headerlink\" title=\"use Promise &amp; Deferred\"></a>use Promise &amp; Deferred</h2><p>To realize this, we create a new Deferred, and we trigger deferred function (progress/end/error) when we finish specific action to tell Deferred that we finished.<br>Then we get promise object, and then we can store it, and call it with callback in another file.<br>So we successful separate call async and get data in two files.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> promisify = <span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> deferred = <span class=\"keyword\">new</span> Deferred()</div><div class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"string\">''</span></div><div class=\"line\"></div><div class=\"line\">  res.on(<span class=\"string\">'data'</span>, chunk =&gt; &#123;</div><div class=\"line\">    result += chunk</div><div class=\"line\">    deferred.progress(result)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  res.on(<span class=\"string\">'end'</span>, () =&gt; &#123;</div><div class=\"line\">    deferred.resolve(result)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  res.on(<span class=\"string\">'error'</span>, () =&gt; &#123;</div><div class=\"line\">    deferred.reject()</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> deferred.promise</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">global.result = promisify(res)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// in another file, this just an example to pass the result to global, so we can easy get the result, in the production, you better to pass the result in other way.</span></div><div class=\"line\">global.result.then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// success</span></div><div class=\"line\">&#125;, (err) =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// error</span></div><div class=\"line\">&#125;, (chunk) =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// progress</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(chunk)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h2 id=\"Deferred-all\"><a href=\"#Deferred-all\" class=\"headerlink\" title=\"Deferred.all()\"></a>Deferred.all()</h2><p>Do some action after a several of asynchronous finished.<br><code>Deferred.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Deferred</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">  all(promises) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> count = promises.length</div><div class=\"line\">    <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">let</span> results = []</div><div class=\"line\">    promises.forEach(<span class=\"function\">(<span class=\"params\">promise, i</span>) =&gt;</span> &#123;</div><div class=\"line\">      promise.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">        count --</div><div class=\"line\">        results[i] = data</div><div class=\"line\">        <span class=\"keyword\">if</span> (count === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          that.resolve(results)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;, err =&gt; &#123;</div><div class=\"line\">      that.reject(err)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.promise</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Order-Run-asynchronous\"><a href=\"#Order-Run-asynchronous\" class=\"headerlink\" title=\"Order Run asynchronous\"></a>Order Run asynchronous</h2><p>Run asynchronous in order<br><code>Deferred.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'./promise.class'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Deferred</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>()</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  resolve(data) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> promise = <span class=\"keyword\">this</span>.promise</div><div class=\"line\">    <span class=\"keyword\">let</span> handler</div><div class=\"line\">    <span class=\"keyword\">while</span>(handler = promise.queue.shift()) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (handler &amp;&amp; handler.resolve) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> ret = handler.resolve(data)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// if there has next promise, then we interrupt current loop, and set next promise.queue equals current queue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (ret &amp;&amp; ret.isPromise) &#123;</div><div class=\"line\">          ret.queue = promise.queue</div><div class=\"line\">          <span class=\"keyword\">return</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  reject(err) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> promise = <span class=\"keyword\">this</span>.promise</div><div class=\"line\">    <span class=\"keyword\">let</span> handler</div><div class=\"line\">    <span class=\"keyword\">while</span>(handler = promise.queue.shift()) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (handler &amp;&amp; handler.reject) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> ret = handler.reject(err)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// if there has next promise, then we interrupt current loop, and set next promise.queue equals current queue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (ret &amp;&amp; ret.isPromise) &#123;</div><div class=\"line\">          ret.queue = promise.queue</div><div class=\"line\">          <span class=\"keyword\">return</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  callback(str) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">err, file</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> that.reject(err)</div><div class=\"line\">      &#125;</div><div class=\"line\">      that.resolve(file)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>promise.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.queue = []</div><div class=\"line\">    <span class=\"keyword\">this</span>.isPromise = <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  then(resolve, reject) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> handler = &#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> resolve === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      handler.resolve = resolve</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reject === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      handler.reject = reject</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.queue.push(handler)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>app.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Deferred = <span class=\"built_in\">require</span>(<span class=\"string\">'./deferred.class'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> action1 = <span class=\"function\">(<span class=\"params\">file, encoding</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> deferred = <span class=\"keyword\">new</span> Deferred()</div><div class=\"line\">  fs.readFile(file, encoding, deferred.callback())</div><div class=\"line\">  <span class=\"keyword\">return</span> deferred.promise</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> action2 = <span class=\"function\">(<span class=\"params\">file, encoding</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> deferred = <span class=\"keyword\">new</span> Deferred()</div><div class=\"line\">  fs.readFile(file, encoding, deferred.callback())</div><div class=\"line\">  <span class=\"keyword\">return</span> deferred.promise</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">action1(<span class=\"string\">'./file1.txt'</span>, <span class=\"string\">'utf8'</span>).then(<span class=\"function\"><span class=\"params\">file1</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> action2(file1.trim(), <span class=\"string\">'utf8'</span>)</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">file2</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(file2)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n"},{"title":"Node.js","date":"2016-12-08T12:35:41.000Z","_content":"\n## Event queue to solve a number of SQL with same result executed\nIf you want to use the cache after you execute a SQL, you can just execute it, then the OS will use the cache for you to improve the performance.\nBut sometimes, there are a lot of client send a lot of SQL request with same result in first (e.g. specific activity start at 10:00am), the result of the SQL haven't store to cache yet, so a number of request send to the OS, maybe your program will die. So it's essential to make requests that after the first not execute, and just use the cache by the first SQL.\n``` JavaScript\nlet proxy = new events.EventEmitter()\nlet status = 'ready'\nlet select = callback => {\n  proxy.once('selected', callback)\n  if (status === 'ready') {\n    status = 'pending'\n    db.select('sql', result => {\n      proxy.emit('selected', result)\n      status = 'ready'\n    })\n  }\n}\n```\n\n\n## asynchronous\nAsynchronous is a good stuff, you can execute I/O operate without wait it. It's a good way to improve the CPU usage rate.\nSometimes, we have multiple I/O operates, and these are associated, we want to do some action after all of the I/O operates finished. What can we do? You may do like this below.\n``` JavaScript\nfs.readFile(path, 'utf8', (err, template) => {\n  db.query(sql, (err, data) => {\n    l10n.get((err, resources) => {\n      // action\n    })\n  })\n})\n```\nIt's easy to do that right? But mention the callback, you write 3 level callback then do the action. Think about it, if you have to do 4 or 5 I/O operate, and you do action after all of theses finished. so you may write '}) }) }) }) })', seems painful to maintain the program.\n\nAnyway, we don't do above, that is so stupid. We can make these I/O operate in first level without put an operate in to another callback. Read below.\n\n``` JavaScript\nlet after = (times, callback) => {\n  let count = 0\n  let result = {}\n  return (key, value) => {\n    result[key] = value\n    count++\n    if (count === times) {\n      callback(results)\n    }\n  }\n}\n\n\nlet emitter = new events.Emitter()\nlet done = after(times, render)\n\nemitter.on('done', done)\nemitter.on('done', other)\n\nfs.readFile(template_path, 'utf8', (err, template) => {\n  emitter.emit('doen', 'template', tempalte)\n})\ndb.query(sql, (err, data) => {\n  emitter.emit('done', 'data', data)\n})\nl10n.get((err, resources) => {\n  emitter.emit('done', 'resources', resources)\n})\n```\n\n## order asynchronous\nhttps://wuyuchang.github.io/2016/12/09/Principle-of-Promise-Deferred/\n\n## smooth\n``` JavaScript\nlet smooth = method => {\n  return () => {\n    let deferred = new Deferred()\n    let args = Array.prototype.slice.call(arguments, 0) // transform the arguments to an array\n    args.push(deferred.callback()) // push an parameter, [file, encode, deferred.callback()]\n    method.apply(null, args) // call method, fs.readFile(file, encode, deferred.callback())\n    return deferred.promise\n  }\n}\n```\n","source":"_posts/node-js.md","raw":"---\ntitle: Node.js\ndate: 2016-12-08 20:35:41\ntags: node.js\n---\n\n## Event queue to solve a number of SQL with same result executed\nIf you want to use the cache after you execute a SQL, you can just execute it, then the OS will use the cache for you to improve the performance.\nBut sometimes, there are a lot of client send a lot of SQL request with same result in first (e.g. specific activity start at 10:00am), the result of the SQL haven't store to cache yet, so a number of request send to the OS, maybe your program will die. So it's essential to make requests that after the first not execute, and just use the cache by the first SQL.\n``` JavaScript\nlet proxy = new events.EventEmitter()\nlet status = 'ready'\nlet select = callback => {\n  proxy.once('selected', callback)\n  if (status === 'ready') {\n    status = 'pending'\n    db.select('sql', result => {\n      proxy.emit('selected', result)\n      status = 'ready'\n    })\n  }\n}\n```\n\n\n## asynchronous\nAsynchronous is a good stuff, you can execute I/O operate without wait it. It's a good way to improve the CPU usage rate.\nSometimes, we have multiple I/O operates, and these are associated, we want to do some action after all of the I/O operates finished. What can we do? You may do like this below.\n``` JavaScript\nfs.readFile(path, 'utf8', (err, template) => {\n  db.query(sql, (err, data) => {\n    l10n.get((err, resources) => {\n      // action\n    })\n  })\n})\n```\nIt's easy to do that right? But mention the callback, you write 3 level callback then do the action. Think about it, if you have to do 4 or 5 I/O operate, and you do action after all of theses finished. so you may write '}) }) }) }) })', seems painful to maintain the program.\n\nAnyway, we don't do above, that is so stupid. We can make these I/O operate in first level without put an operate in to another callback. Read below.\n\n``` JavaScript\nlet after = (times, callback) => {\n  let count = 0\n  let result = {}\n  return (key, value) => {\n    result[key] = value\n    count++\n    if (count === times) {\n      callback(results)\n    }\n  }\n}\n\n\nlet emitter = new events.Emitter()\nlet done = after(times, render)\n\nemitter.on('done', done)\nemitter.on('done', other)\n\nfs.readFile(template_path, 'utf8', (err, template) => {\n  emitter.emit('doen', 'template', tempalte)\n})\ndb.query(sql, (err, data) => {\n  emitter.emit('done', 'data', data)\n})\nl10n.get((err, resources) => {\n  emitter.emit('done', 'resources', resources)\n})\n```\n\n## order asynchronous\nhttps://wuyuchang.github.io/2016/12/09/Principle-of-Promise-Deferred/\n\n## smooth\n``` JavaScript\nlet smooth = method => {\n  return () => {\n    let deferred = new Deferred()\n    let args = Array.prototype.slice.call(arguments, 0) // transform the arguments to an array\n    args.push(deferred.callback()) // push an parameter, [file, encode, deferred.callback()]\n    method.apply(null, args) // call method, fs.readFile(file, encode, deferred.callback())\n    return deferred.promise\n  }\n}\n```\n","slug":"node-js","published":1,"updated":"2016-12-09T10:39:54.656Z","_id":"ciwh62j7y0001c8ww3aarygsn","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Event-queue-to-solve-a-number-of-SQL-with-same-result-executed\"><a href=\"#Event-queue-to-solve-a-number-of-SQL-with-same-result-executed\" class=\"headerlink\" title=\"Event queue to solve a number of SQL with same result executed\"></a>Event queue to solve a number of SQL with same result executed</h2><p>If you want to use the cache after you execute a SQL, you can just execute it, then the OS will use the cache for you to improve the performance.<br>But sometimes, there are a lot of client send a lot of SQL request with same result in first (e.g. specific activity start at 10:00am), the result of the SQL haven’t store to cache yet, so a number of request send to the OS, maybe your program will die. So it’s essential to make requests that after the first not execute, and just use the cache by the first SQL.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> events.EventEmitter()</div><div class=\"line\"><span class=\"keyword\">let</span> status = <span class=\"string\">'ready'</span></div><div class=\"line\"><span class=\"keyword\">let</span> select = <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> &#123;</div><div class=\"line\">  proxy.once(<span class=\"string\">'selected'</span>, callback)</div><div class=\"line\">  <span class=\"keyword\">if</span> (status === <span class=\"string\">'ready'</span>) &#123;</div><div class=\"line\">    status = <span class=\"string\">'pending'</span></div><div class=\"line\">    db.select(<span class=\"string\">'sql'</span>, result =&gt; &#123;</div><div class=\"line\">      proxy.emit(<span class=\"string\">'selected'</span>, result)</div><div class=\"line\">      status = <span class=\"string\">'ready'</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"asynchronous\"><a href=\"#asynchronous\" class=\"headerlink\" title=\"asynchronous\"></a>asynchronous</h2><p>Asynchronous is a good stuff, you can execute I/O operate without wait it. It’s a good way to improve the CPU usage rate.<br>Sometimes, we have multiple I/O operates, and these are associated, we want to do some action after all of the I/O operates finished. What can we do? You may do like this below.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">fs.readFile(path, <span class=\"string\">'utf8'</span>, (err, template) =&gt; &#123;</div><div class=\"line\">  db.query(sql, (err, data) =&gt; &#123;</div><div class=\"line\">    l10n.get(<span class=\"function\">(<span class=\"params\">err, resources</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// action</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>It’s easy to do that right? But mention the callback, you write 3 level callback then do the action. Think about it, if you have to do 4 or 5 I/O operate, and you do action after all of theses finished. so you may write ‘}) }) }) }) })’, seems painful to maintain the program.</p>\n<p>Anyway, we don’t do above, that is so stupid. We can make these I/O operate in first level without put an operate in to another callback. Read below.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> after = <span class=\"function\">(<span class=\"params\">times, callback</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"keyword\">let</span> result = &#123;&#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">key, value</span>) =&gt;</span> &#123;</div><div class=\"line\">    result[key] = value</div><div class=\"line\">    count++</div><div class=\"line\">    <span class=\"keyword\">if</span> (count === times) &#123;</div><div class=\"line\">      callback(results)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> emitter = <span class=\"keyword\">new</span> events.Emitter()</div><div class=\"line\"><span class=\"keyword\">let</span> done = after(times, render)</div><div class=\"line\"></div><div class=\"line\">emitter.on(<span class=\"string\">'done'</span>, done)</div><div class=\"line\">emitter.on(<span class=\"string\">'done'</span>, other)</div><div class=\"line\"></div><div class=\"line\">fs.readFile(template_path, <span class=\"string\">'utf8'</span>, (err, template) =&gt; &#123;</div><div class=\"line\">  emitter.emit(<span class=\"string\">'doen'</span>, <span class=\"string\">'template'</span>, tempalte)</div><div class=\"line\">&#125;)</div><div class=\"line\">db.query(sql, (err, data) =&gt; &#123;</div><div class=\"line\">  emitter.emit(<span class=\"string\">'done'</span>, <span class=\"string\">'data'</span>, data)</div><div class=\"line\">&#125;)</div><div class=\"line\">l10n.get(<span class=\"function\">(<span class=\"params\">err, resources</span>) =&gt;</span> &#123;</div><div class=\"line\">  emitter.emit(<span class=\"string\">'done'</span>, <span class=\"string\">'resources'</span>, resources)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"order-asynchronous\"><a href=\"#order-asynchronous\" class=\"headerlink\" title=\"order asynchronous\"></a>order asynchronous</h2><p><a href=\"https://wuyuchang.github.io/2016/12/09/Principle-of-Promise-Deferred/\">https://wuyuchang.github.io/2016/12/09/Principle-of-Promise-Deferred/</a></p>\n<h2 id=\"smooth\"><a href=\"#smooth\" class=\"headerlink\" title=\"smooth\"></a>smooth</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> smooth = <span class=\"function\"><span class=\"params\">method</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> deferred = <span class=\"keyword\">new</span> Deferred()</div><div class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">0</span>) <span class=\"comment\">// transform the arguments to an array</span></div><div class=\"line\">    args.push(deferred.callback()) <span class=\"comment\">// push an parameter, [file, encode, deferred.callback()]</span></div><div class=\"line\">    method.apply(<span class=\"literal\">null</span>, args) <span class=\"comment\">// call method, fs.readFile(file, encode, deferred.callback())</span></div><div class=\"line\">    <span class=\"keyword\">return</span> deferred.promise</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"Event-queue-to-solve-a-number-of-SQL-with-same-result-executed\"><a href=\"#Event-queue-to-solve-a-number-of-SQL-with-same-result-executed\" class=\"headerlink\" title=\"Event queue to solve a number of SQL with same result executed\"></a>Event queue to solve a number of SQL with same result executed</h2><p>If you want to use the cache after you execute a SQL, you can just execute it, then the OS will use the cache for you to improve the performance.<br>But sometimes, there are a lot of client send a lot of SQL request with same result in first (e.g. specific activity start at 10:00am), the result of the SQL haven’t store to cache yet, so a number of request send to the OS, maybe your program will die. So it’s essential to make requests that after the first not execute, and just use the cache by the first SQL.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> events.EventEmitter()</div><div class=\"line\"><span class=\"keyword\">let</span> status = <span class=\"string\">'ready'</span></div><div class=\"line\"><span class=\"keyword\">let</span> select = <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> &#123;</div><div class=\"line\">  proxy.once(<span class=\"string\">'selected'</span>, callback)</div><div class=\"line\">  <span class=\"keyword\">if</span> (status === <span class=\"string\">'ready'</span>) &#123;</div><div class=\"line\">    status = <span class=\"string\">'pending'</span></div><div class=\"line\">    db.select(<span class=\"string\">'sql'</span>, result =&gt; &#123;</div><div class=\"line\">      proxy.emit(<span class=\"string\">'selected'</span>, result)</div><div class=\"line\">      status = <span class=\"string\">'ready'</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"asynchronous\"><a href=\"#asynchronous\" class=\"headerlink\" title=\"asynchronous\"></a>asynchronous</h2><p>Asynchronous is a good stuff, you can execute I/O operate without wait it. It’s a good way to improve the CPU usage rate.<br>Sometimes, we have multiple I/O operates, and these are associated, we want to do some action after all of the I/O operates finished. What can we do? You may do like this below.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">fs.readFile(path, <span class=\"string\">'utf8'</span>, (err, template) =&gt; &#123;</div><div class=\"line\">  db.query(sql, (err, data) =&gt; &#123;</div><div class=\"line\">    l10n.get(<span class=\"function\">(<span class=\"params\">err, resources</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// action</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>It’s easy to do that right? But mention the callback, you write 3 level callback then do the action. Think about it, if you have to do 4 or 5 I/O operate, and you do action after all of theses finished. so you may write ‘}) }) }) }) })’, seems painful to maintain the program.</p>\n<p>Anyway, we don’t do above, that is so stupid. We can make these I/O operate in first level without put an operate in to another callback. Read below.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> after = <span class=\"function\">(<span class=\"params\">times, callback</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"keyword\">let</span> result = &#123;&#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">key, value</span>) =&gt;</span> &#123;</div><div class=\"line\">    result[key] = value</div><div class=\"line\">    count++</div><div class=\"line\">    <span class=\"keyword\">if</span> (count === times) &#123;</div><div class=\"line\">      callback(results)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> emitter = <span class=\"keyword\">new</span> events.Emitter()</div><div class=\"line\"><span class=\"keyword\">let</span> done = after(times, render)</div><div class=\"line\"></div><div class=\"line\">emitter.on(<span class=\"string\">'done'</span>, done)</div><div class=\"line\">emitter.on(<span class=\"string\">'done'</span>, other)</div><div class=\"line\"></div><div class=\"line\">fs.readFile(template_path, <span class=\"string\">'utf8'</span>, (err, template) =&gt; &#123;</div><div class=\"line\">  emitter.emit(<span class=\"string\">'doen'</span>, <span class=\"string\">'template'</span>, tempalte)</div><div class=\"line\">&#125;)</div><div class=\"line\">db.query(sql, (err, data) =&gt; &#123;</div><div class=\"line\">  emitter.emit(<span class=\"string\">'done'</span>, <span class=\"string\">'data'</span>, data)</div><div class=\"line\">&#125;)</div><div class=\"line\">l10n.get(<span class=\"function\">(<span class=\"params\">err, resources</span>) =&gt;</span> &#123;</div><div class=\"line\">  emitter.emit(<span class=\"string\">'done'</span>, <span class=\"string\">'resources'</span>, resources)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"order-asynchronous\"><a href=\"#order-asynchronous\" class=\"headerlink\" title=\"order asynchronous\"></a>order asynchronous</h2><p><a href=\"https://wuyuchang.github.io/2016/12/09/Principle-of-Promise-Deferred/\">https://wuyuchang.github.io/2016/12/09/Principle-of-Promise-Deferred/</a></p>\n<h2 id=\"smooth\"><a href=\"#smooth\" class=\"headerlink\" title=\"smooth\"></a>smooth</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> smooth = <span class=\"function\"><span class=\"params\">method</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> deferred = <span class=\"keyword\">new</span> Deferred()</div><div class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">0</span>) <span class=\"comment\">// transform the arguments to an array</span></div><div class=\"line\">    args.push(deferred.callback()) <span class=\"comment\">// push an parameter, [file, encode, deferred.callback()]</span></div><div class=\"line\">    method.apply(<span class=\"literal\">null</span>, args) <span class=\"comment\">// call method, fs.readFile(file, encode, deferred.callback())</span></div><div class=\"line\">    <span class=\"keyword\">return</span> deferred.promise</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"Config web server with Nginx & PHP7 in Linux for beginner","_content":"\nBoth of below are basic command line, If you are not familiar with command line in Linux, you should learn it first.\n\n## Update & Upgrade\n``` bash\n$ apt-get update\n$ apt-get upgrade\n```\nYou must curious what's difference between [update][apt-get] and [upgrade][apt-get].\n> **update**\nUsed to re-synchronize the package index files from their sources. The indexes of available packages are fetched from the location(s) specified in /etc/apt/sources.list(5). An update should always be performed before an upgrade or dist-upgrade.\n**upgrade**\nUsed to install the newest versions of all packages currently installed on the system from the sources enumerated in /etc/apt/sources.list(5). Packages currently installed with new versions available are retrieved and upgraded; under no circumstances are currently installed packages removed, nor are packages that are not already installed retrieved and installed. New versions of currently installed packages that cannot be upgraded without changing the install status of another package will be left at their current version. An update must be performed first so that apt-get knows that new versions of packages are available.\n\n[apt-get]: https://linux.die.net/man/8/apt-get\n\n## Htop, Vim & Screen\n``` bash\n$ apt-get install htop\n$ apt-get install vim\n$ apt-get install screen\n```\nThese packages can improve your effective.\n***htop:*** [htop][htop] command like [top][top] command, both of these are interactive process viewer for Unix systems. Its help you manage process and monitor resource easy. But [htop][htop] is more convenient than [top][top].\n> - In 'htop' you can scroll the list vertically and horizontally to see all processes and complete command lines.\n- In 'top' you are subject to a delay for each unassigned key you press (especially annoying when multi-key escape sequences are triggered by accident).\n- 'htop' starts faster ('top' seems to collect data for a while before displaying anything).\n- In 'htop' you don't need to type the process number to kill a process, in 'top' you do.\n- In 'htop' you don't need to type the process number or the priority value to renice a process, in 'top' you do.\n- 'htop' supports mouse operation, 'top' doesn't\n- 'top' is older, hence, more used and tested.\nFrom http://hisham.hm/htop/index.php?page=comparison\n\n***vim:*** [vim][vim] is almost a proper superset of [vi][vi], everything that is in vi is available in vim.\n\n***screen:***\n> 1. use multiple shell window from a single SSH session\n2. Keep a shell active even through network disruptions\n3. Disconnect and re-connect to a shell sessions from multiple locations\n4. Run a long running process without maintaining an active shell session\n\n**Usage**\nscreen uses the command `ctrl-a` that's the control key and a lowercase \"a\" as a signal to send commands to screen instead of the shell.\n*start*: `screen`\n*creating*: `Ctrl-a c`\n*switch*: `Ctrl-a n` for the next window or `Ctrl-a p` for the previous window.\n*detach*: `Ctrl-a d`\n*reattach*: `Ctrl-a r`\n*logging*: `Ctrl-a h`\n*lock*: `Ctrl-a x`\n*stop*: `Ctrl-a k`\n\n## Group & User\n``` bash\n$ groupadd\n$ groupdel\n$ useradd\n$ passwd\n$ usermod\n$ userdel\n```\n\n### useradd\nuser add will auto create group that the name same as user\n``` bash\n$ useradd chang # craete user \"chang\"\n$ useradd -d /data/projects chang # create user \"chang\" into /data/projects\n$ useradd -u 999 -g 998 chang # create user with 999 for user id and 998 for group id\n$ useradd -G admings,webadmin,developers chang #\n$ useradd -M chang # add user \"chang\" without home directory\n$ useradd -e 2017-01-01 chang # add user \"chang\" expire at 2017-01-02\n$ chage -l chang # show/change user or password expire date\n$ useradd -e 2017-01-01 -f 45 chang # password expire after 2017-01-01\n$ useradd -c \"Yuchang Wu\" chang # add user with \"Yuchang Wu\" infomation\n$ tail -1 /etc/passwd # print last 1 line of the file \"/etc/passwd\"\n```\n\n### the meaning of files that user and group saved\n- /etc/passwd – User account information.\n- /etc/shadow – Secure account information.\n- /etc/group – Group account information.\n- /etc/gshadow – Secure group account information.\n- /etc/login.defs – Shadow password suite configuration..\n\n/etc/passwd format:\nusername:password:uid:gid:userInfo:homeDirectory:shell\n\n/etc/group format:\ngroupname:password:gidd:groupMembers\n\n### usermod\nfor more detail, to below to see\n```bash\n$ usermod --help\n```\n``` bash\n$ usermod -G www chang # add www group to chang, Be careful, it will remove all existing groups that user belongs, so always add the '-a' with '-G' to append new groups\n$ usermod -G www -a chang\n```\n\n### chown\nchange file owner\n``` bash\n$ chown -hR www:www /home/www # chang the owner of /homw/www to www user and www group\n```\n## Tip\n``` bash\n$ man order # to see detail of the order\n$ apt-cache search package # search package\n$ cat /etc/passwd # show all users\n$ getent passwd # show all users\n$ getent group # show all groups\n$ getent group | grep username\n$ id username # show username information\n$ groups username # show which groups does username have\n```\n\n> Ref:\n*screen* https://www.rackaid.com/blog/linux-screen-tutorial-and-how-to/#starting\n*useradd* http://www.tecmint.com/add-users-in-linux/\n*usermod* http://www.tecmint.com/usermod-command-examples/\n*permission* http://www.tecmint.com/manage-users-and-groups-in-linux/\n*nginx* https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/\n\n[htop]: https://hisham.hm/htop/index.php\n[top]: https://linux.die.net/man/1/top\n[vim]: http://www.vim.org/\n[vi]: http://ex-vi.sourceforge.net/\n","source":"_posts/web-server.md","raw":"---\ntitle: Config web server with Nginx & PHP7 in Linux for beginner\n---\n\nBoth of below are basic command line, If you are not familiar with command line in Linux, you should learn it first.\n\n## Update & Upgrade\n``` bash\n$ apt-get update\n$ apt-get upgrade\n```\nYou must curious what's difference between [update][apt-get] and [upgrade][apt-get].\n> **update**\nUsed to re-synchronize the package index files from their sources. The indexes of available packages are fetched from the location(s) specified in /etc/apt/sources.list(5). An update should always be performed before an upgrade or dist-upgrade.\n**upgrade**\nUsed to install the newest versions of all packages currently installed on the system from the sources enumerated in /etc/apt/sources.list(5). Packages currently installed with new versions available are retrieved and upgraded; under no circumstances are currently installed packages removed, nor are packages that are not already installed retrieved and installed. New versions of currently installed packages that cannot be upgraded without changing the install status of another package will be left at their current version. An update must be performed first so that apt-get knows that new versions of packages are available.\n\n[apt-get]: https://linux.die.net/man/8/apt-get\n\n## Htop, Vim & Screen\n``` bash\n$ apt-get install htop\n$ apt-get install vim\n$ apt-get install screen\n```\nThese packages can improve your effective.\n***htop:*** [htop][htop] command like [top][top] command, both of these are interactive process viewer for Unix systems. Its help you manage process and monitor resource easy. But [htop][htop] is more convenient than [top][top].\n> - In 'htop' you can scroll the list vertically and horizontally to see all processes and complete command lines.\n- In 'top' you are subject to a delay for each unassigned key you press (especially annoying when multi-key escape sequences are triggered by accident).\n- 'htop' starts faster ('top' seems to collect data for a while before displaying anything).\n- In 'htop' you don't need to type the process number to kill a process, in 'top' you do.\n- In 'htop' you don't need to type the process number or the priority value to renice a process, in 'top' you do.\n- 'htop' supports mouse operation, 'top' doesn't\n- 'top' is older, hence, more used and tested.\nFrom http://hisham.hm/htop/index.php?page=comparison\n\n***vim:*** [vim][vim] is almost a proper superset of [vi][vi], everything that is in vi is available in vim.\n\n***screen:***\n> 1. use multiple shell window from a single SSH session\n2. Keep a shell active even through network disruptions\n3. Disconnect and re-connect to a shell sessions from multiple locations\n4. Run a long running process without maintaining an active shell session\n\n**Usage**\nscreen uses the command `ctrl-a` that's the control key and a lowercase \"a\" as a signal to send commands to screen instead of the shell.\n*start*: `screen`\n*creating*: `Ctrl-a c`\n*switch*: `Ctrl-a n` for the next window or `Ctrl-a p` for the previous window.\n*detach*: `Ctrl-a d`\n*reattach*: `Ctrl-a r`\n*logging*: `Ctrl-a h`\n*lock*: `Ctrl-a x`\n*stop*: `Ctrl-a k`\n\n## Group & User\n``` bash\n$ groupadd\n$ groupdel\n$ useradd\n$ passwd\n$ usermod\n$ userdel\n```\n\n### useradd\nuser add will auto create group that the name same as user\n``` bash\n$ useradd chang # craete user \"chang\"\n$ useradd -d /data/projects chang # create user \"chang\" into /data/projects\n$ useradd -u 999 -g 998 chang # create user with 999 for user id and 998 for group id\n$ useradd -G admings,webadmin,developers chang #\n$ useradd -M chang # add user \"chang\" without home directory\n$ useradd -e 2017-01-01 chang # add user \"chang\" expire at 2017-01-02\n$ chage -l chang # show/change user or password expire date\n$ useradd -e 2017-01-01 -f 45 chang # password expire after 2017-01-01\n$ useradd -c \"Yuchang Wu\" chang # add user with \"Yuchang Wu\" infomation\n$ tail -1 /etc/passwd # print last 1 line of the file \"/etc/passwd\"\n```\n\n### the meaning of files that user and group saved\n- /etc/passwd – User account information.\n- /etc/shadow – Secure account information.\n- /etc/group – Group account information.\n- /etc/gshadow – Secure group account information.\n- /etc/login.defs – Shadow password suite configuration..\n\n/etc/passwd format:\nusername:password:uid:gid:userInfo:homeDirectory:shell\n\n/etc/group format:\ngroupname:password:gidd:groupMembers\n\n### usermod\nfor more detail, to below to see\n```bash\n$ usermod --help\n```\n``` bash\n$ usermod -G www chang # add www group to chang, Be careful, it will remove all existing groups that user belongs, so always add the '-a' with '-G' to append new groups\n$ usermod -G www -a chang\n```\n\n### chown\nchange file owner\n``` bash\n$ chown -hR www:www /home/www # chang the owner of /homw/www to www user and www group\n```\n## Tip\n``` bash\n$ man order # to see detail of the order\n$ apt-cache search package # search package\n$ cat /etc/passwd # show all users\n$ getent passwd # show all users\n$ getent group # show all groups\n$ getent group | grep username\n$ id username # show username information\n$ groups username # show which groups does username have\n```\n\n> Ref:\n*screen* https://www.rackaid.com/blog/linux-screen-tutorial-and-how-to/#starting\n*useradd* http://www.tecmint.com/add-users-in-linux/\n*usermod* http://www.tecmint.com/usermod-command-examples/\n*permission* http://www.tecmint.com/manage-users-and-groups-in-linux/\n*nginx* https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/\n\n[htop]: https://hisham.hm/htop/index.php\n[top]: https://linux.die.net/man/1/top\n[vim]: http://www.vim.org/\n[vi]: http://ex-vi.sourceforge.net/\n","slug":"web-server","published":1,"date":"2016-11-29T10:30:02.944Z","updated":"2016-12-07T12:26:39.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwh62jdm0006c8wwxnv79d7a","content":"<p>Both of below are basic command line, If you are not familiar with command line in Linux, you should learn it first.</p>\n<h2 id=\"Update-amp-Upgrade\"><a href=\"#Update-amp-Upgrade\" class=\"headerlink\" title=\"Update &amp; Upgrade\"></a>Update &amp; Upgrade</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apt-get update</div><div class=\"line\">$ apt-get upgrade</div></pre></td></tr></table></figure>\n<p>You must curious what’s difference between <a href=\"https://linux.die.net/man/8/apt-get\" target=\"_blank\" rel=\"external\">update</a> and <a href=\"https://linux.die.net/man/8/apt-get\" target=\"_blank\" rel=\"external\">upgrade</a>.</p>\n<blockquote>\n<p><strong>update</strong><br>Used to re-synchronize the package index files from their sources. The indexes of available packages are fetched from the location(s) specified in /etc/apt/sources.list(5). An update should always be performed before an upgrade or dist-upgrade.<br><strong>upgrade</strong><br>Used to install the newest versions of all packages currently installed on the system from the sources enumerated in /etc/apt/sources.list(5). Packages currently installed with new versions available are retrieved and upgraded; under no circumstances are currently installed packages removed, nor are packages that are not already installed retrieved and installed. New versions of currently installed packages that cannot be upgraded without changing the install status of another package will be left at their current version. An update must be performed first so that apt-get knows that new versions of packages are available.</p>\n</blockquote>\n<h2 id=\"Htop-Vim-amp-Screen\"><a href=\"#Htop-Vim-amp-Screen\" class=\"headerlink\" title=\"Htop, Vim &amp; Screen\"></a>Htop, Vim &amp; Screen</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apt-get install htop</div><div class=\"line\">$ apt-get install vim</div><div class=\"line\">$ apt-get install screen</div></pre></td></tr></table></figure>\n<p>These packages can improve your effective.<br><strong><em>htop:</em></strong> <a href=\"https://hisham.hm/htop/index.php\" target=\"_blank\" rel=\"external\">htop</a> command like <a href=\"https://linux.die.net/man/1/top\" target=\"_blank\" rel=\"external\">top</a> command, both of these are interactive process viewer for Unix systems. Its help you manage process and monitor resource easy. But <a href=\"https://hisham.hm/htop/index.php\" target=\"_blank\" rel=\"external\">htop</a> is more convenient than <a href=\"https://linux.die.net/man/1/top\" target=\"_blank\" rel=\"external\">top</a>.</p>\n<blockquote>\n<ul>\n<li>In ‘htop’ you can scroll the list vertically and horizontally to see all processes and complete command lines.</li>\n<li>In ‘top’ you are subject to a delay for each unassigned key you press (especially annoying when multi-key escape sequences are triggered by accident).</li>\n<li>‘htop’ starts faster (‘top’ seems to collect data for a while before displaying anything).</li>\n<li>In ‘htop’ you don’t need to type the process number to kill a process, in ‘top’ you do.</li>\n<li>In ‘htop’ you don’t need to type the process number or the priority value to renice a process, in ‘top’ you do.</li>\n<li>‘htop’ supports mouse operation, ‘top’ doesn’t</li>\n<li>‘top’ is older, hence, more used and tested.<br>From <a href=\"http://hisham.hm/htop/index.php?page=comparison\" target=\"_blank\" rel=\"external\">http://hisham.hm/htop/index.php?page=comparison</a></li>\n</ul>\n</blockquote>\n<p><strong><em>vim:</em></strong> <a href=\"http://www.vim.org/\" target=\"_blank\" rel=\"external\">vim</a> is almost a proper superset of <a href=\"http://ex-vi.sourceforge.net/\" target=\"_blank\" rel=\"external\">vi</a>, everything that is in vi is available in vim.</p>\n<p><strong><em>screen:</em></strong></p>\n<blockquote>\n<ol>\n<li>use multiple shell window from a single SSH session</li>\n<li>Keep a shell active even through network disruptions</li>\n<li>Disconnect and re-connect to a shell sessions from multiple locations</li>\n<li>Run a long running process without maintaining an active shell session</li>\n</ol>\n</blockquote>\n<p><strong>Usage</strong><br>screen uses the command <code>ctrl-a</code> that’s the control key and a lowercase “a” as a signal to send commands to screen instead of the shell.<br><em>start</em>: <code>screen</code><br><em>creating</em>: <code>Ctrl-a c</code><br><em>switch</em>: <code>Ctrl-a n</code> for the next window or <code>Ctrl-a p</code> for the previous window.<br><em>detach</em>: <code>Ctrl-a d</code><br><em>reattach</em>: <code>Ctrl-a r</code><br><em>logging</em>: <code>Ctrl-a h</code><br><em>lock</em>: <code>Ctrl-a x</code><br><em>stop</em>: <code>Ctrl-a k</code></p>\n<h2 id=\"Group-amp-User\"><a href=\"#Group-amp-User\" class=\"headerlink\" title=\"Group &amp; User\"></a>Group &amp; User</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ groupadd</div><div class=\"line\">$ groupdel</div><div class=\"line\">$ useradd</div><div class=\"line\">$ passwd</div><div class=\"line\">$ usermod</div><div class=\"line\">$ userdel</div></pre></td></tr></table></figure>\n<h3 id=\"useradd\"><a href=\"#useradd\" class=\"headerlink\" title=\"useradd\"></a>useradd</h3><p>user add will auto create group that the name same as user<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ useradd chang <span class=\"comment\"># craete user \"chang\"</span></div><div class=\"line\">$ useradd <span class=\"_\">-d</span> /data/projects chang <span class=\"comment\"># create user \"chang\" into /data/projects</span></div><div class=\"line\">$ useradd -u 999 -g 998 chang <span class=\"comment\"># create user with 999 for user id and 998 for group id</span></div><div class=\"line\">$ useradd -G admings,webadmin,developers chang <span class=\"comment\">#</span></div><div class=\"line\">$ useradd -M chang <span class=\"comment\"># add user \"chang\" without home directory</span></div><div class=\"line\">$ useradd <span class=\"_\">-e</span> 2017-01-01 chang <span class=\"comment\"># add user \"chang\" expire at 2017-01-02</span></div><div class=\"line\">$ chage <span class=\"_\">-l</span> chang <span class=\"comment\"># show/change user or password expire date</span></div><div class=\"line\">$ useradd <span class=\"_\">-e</span> 2017-01-01 <span class=\"_\">-f</span> 45 chang <span class=\"comment\"># password expire after 2017-01-01</span></div><div class=\"line\">$ useradd -c <span class=\"string\">\"Yuchang Wu\"</span> chang <span class=\"comment\"># add user with \"Yuchang Wu\" infomation</span></div><div class=\"line\">$ tail -1 /etc/passwd <span class=\"comment\"># print last 1 line of the file \"/etc/passwd\"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"the-meaning-of-files-that-user-and-group-saved\"><a href=\"#the-meaning-of-files-that-user-and-group-saved\" class=\"headerlink\" title=\"the meaning of files that user and group saved\"></a>the meaning of files that user and group saved</h3><ul>\n<li>/etc/passwd – User account information.</li>\n<li>/etc/shadow – Secure account information.</li>\n<li>/etc/group – Group account information.</li>\n<li>/etc/gshadow – Secure group account information.</li>\n<li>/etc/login.defs – Shadow password suite configuration..</li>\n</ul>\n<p>/etc/passwd format:<br>username:password:uid:gid:userInfo:homeDirectory:shell</p>\n<p>/etc/group format:<br>groupname:password:gidd:groupMembers</p>\n<h3 id=\"usermod\"><a href=\"#usermod\" class=\"headerlink\" title=\"usermod\"></a>usermod</h3><p>for more detail, to below to see<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ usermod --help</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ usermod -G www chang <span class=\"comment\"># add www group to chang, Be careful, it will remove all existing groups that user belongs, so always add the '-a' with '-G' to append new groups</span></div><div class=\"line\">$ usermod -G www <span class=\"_\">-a</span> chang</div></pre></td></tr></table></figure>\n<h3 id=\"chown\"><a href=\"#chown\" class=\"headerlink\" title=\"chown\"></a>chown</h3><p>change file owner<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chown -hR www:www /home/www <span class=\"comment\"># chang the owner of /homw/www to www user and www group</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ man order <span class=\"comment\"># to see detail of the order</span></div><div class=\"line\">$ apt-cache search package <span class=\"comment\"># search package</span></div><div class=\"line\">$ cat /etc/passwd <span class=\"comment\"># show all users</span></div><div class=\"line\">$ getent passwd <span class=\"comment\"># show all users</span></div><div class=\"line\">$ getent group <span class=\"comment\"># show all groups</span></div><div class=\"line\">$ getent group | grep username</div><div class=\"line\">$ id username <span class=\"comment\"># show username information</span></div><div class=\"line\">$ groups username <span class=\"comment\"># show which groups does username have</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>Ref:<br><em>screen</em> <a href=\"https://www.rackaid.com/blog/linux-screen-tutorial-and-how-to/#starting\" target=\"_blank\" rel=\"external\">https://www.rackaid.com/blog/linux-screen-tutorial-and-how-to/#starting</a><br><em>useradd</em> <a href=\"http://www.tecmint.com/add-users-in-linux/\" target=\"_blank\" rel=\"external\">http://www.tecmint.com/add-users-in-linux/</a><br><em>usermod</em> <a href=\"http://www.tecmint.com/usermod-command-examples/\" target=\"_blank\" rel=\"external\">http://www.tecmint.com/usermod-command-examples/</a><br><em>permission</em> <a href=\"http://www.tecmint.com/manage-users-and-groups-in-linux/\" target=\"_blank\" rel=\"external\">http://www.tecmint.com/manage-users-and-groups-in-linux/</a><br><em>nginx</em> <a href=\"https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/\" target=\"_blank\" rel=\"external\">https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/</a></p>\n</blockquote>\n","excerpt":"","more":"<p>Both of below are basic command line, If you are not familiar with command line in Linux, you should learn it first.</p>\n<h2 id=\"Update-amp-Upgrade\"><a href=\"#Update-amp-Upgrade\" class=\"headerlink\" title=\"Update &amp; Upgrade\"></a>Update &amp; Upgrade</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apt-get update</div><div class=\"line\">$ apt-get upgrade</div></pre></td></tr></table></figure>\n<p>You must curious what’s difference between <a href=\"https://linux.die.net/man/8/apt-get\">update</a> and <a href=\"https://linux.die.net/man/8/apt-get\">upgrade</a>.</p>\n<blockquote>\n<p><strong>update</strong><br>Used to re-synchronize the package index files from their sources. The indexes of available packages are fetched from the location(s) specified in /etc/apt/sources.list(5). An update should always be performed before an upgrade or dist-upgrade.<br><strong>upgrade</strong><br>Used to install the newest versions of all packages currently installed on the system from the sources enumerated in /etc/apt/sources.list(5). Packages currently installed with new versions available are retrieved and upgraded; under no circumstances are currently installed packages removed, nor are packages that are not already installed retrieved and installed. New versions of currently installed packages that cannot be upgraded without changing the install status of another package will be left at their current version. An update must be performed first so that apt-get knows that new versions of packages are available.</p>\n</blockquote>\n<h2 id=\"Htop-Vim-amp-Screen\"><a href=\"#Htop-Vim-amp-Screen\" class=\"headerlink\" title=\"Htop, Vim &amp; Screen\"></a>Htop, Vim &amp; Screen</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apt-get install htop</div><div class=\"line\">$ apt-get install vim</div><div class=\"line\">$ apt-get install screen</div></pre></td></tr></table></figure>\n<p>These packages can improve your effective.<br><strong><em>htop:</em></strong> <a href=\"https://hisham.hm/htop/index.php\">htop</a> command like <a href=\"https://linux.die.net/man/1/top\">top</a> command, both of these are interactive process viewer for Unix systems. Its help you manage process and monitor resource easy. But <a href=\"https://hisham.hm/htop/index.php\">htop</a> is more convenient than <a href=\"https://linux.die.net/man/1/top\">top</a>.</p>\n<blockquote>\n<ul>\n<li>In ‘htop’ you can scroll the list vertically and horizontally to see all processes and complete command lines.</li>\n<li>In ‘top’ you are subject to a delay for each unassigned key you press (especially annoying when multi-key escape sequences are triggered by accident).</li>\n<li>‘htop’ starts faster (‘top’ seems to collect data for a while before displaying anything).</li>\n<li>In ‘htop’ you don’t need to type the process number to kill a process, in ‘top’ you do.</li>\n<li>In ‘htop’ you don’t need to type the process number or the priority value to renice a process, in ‘top’ you do.</li>\n<li>‘htop’ supports mouse operation, ‘top’ doesn’t</li>\n<li>‘top’ is older, hence, more used and tested.<br>From <a href=\"http://hisham.hm/htop/index.php?page=comparison\">http://hisham.hm/htop/index.php?page=comparison</a></li>\n</ul>\n</blockquote>\n<p><strong><em>vim:</em></strong> <a href=\"http://www.vim.org/\">vim</a> is almost a proper superset of <a href=\"http://ex-vi.sourceforge.net/\">vi</a>, everything that is in vi is available in vim.</p>\n<p><strong><em>screen:</em></strong></p>\n<blockquote>\n<ol>\n<li>use multiple shell window from a single SSH session</li>\n<li>Keep a shell active even through network disruptions</li>\n<li>Disconnect and re-connect to a shell sessions from multiple locations</li>\n<li>Run a long running process without maintaining an active shell session</li>\n</ol>\n</blockquote>\n<p><strong>Usage</strong><br>screen uses the command <code>ctrl-a</code> that’s the control key and a lowercase “a” as a signal to send commands to screen instead of the shell.<br><em>start</em>: <code>screen</code><br><em>creating</em>: <code>Ctrl-a c</code><br><em>switch</em>: <code>Ctrl-a n</code> for the next window or <code>Ctrl-a p</code> for the previous window.<br><em>detach</em>: <code>Ctrl-a d</code><br><em>reattach</em>: <code>Ctrl-a r</code><br><em>logging</em>: <code>Ctrl-a h</code><br><em>lock</em>: <code>Ctrl-a x</code><br><em>stop</em>: <code>Ctrl-a k</code></p>\n<h2 id=\"Group-amp-User\"><a href=\"#Group-amp-User\" class=\"headerlink\" title=\"Group &amp; User\"></a>Group &amp; User</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ groupadd</div><div class=\"line\">$ groupdel</div><div class=\"line\">$ useradd</div><div class=\"line\">$ passwd</div><div class=\"line\">$ usermod</div><div class=\"line\">$ userdel</div></pre></td></tr></table></figure>\n<h3 id=\"useradd\"><a href=\"#useradd\" class=\"headerlink\" title=\"useradd\"></a>useradd</h3><p>user add will auto create group that the name same as user<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ useradd chang <span class=\"comment\"># craete user \"chang\"</span></div><div class=\"line\">$ useradd <span class=\"_\">-d</span> /data/projects chang <span class=\"comment\"># create user \"chang\" into /data/projects</span></div><div class=\"line\">$ useradd -u 999 -g 998 chang <span class=\"comment\"># create user with 999 for user id and 998 for group id</span></div><div class=\"line\">$ useradd -G admings,webadmin,developers chang <span class=\"comment\">#</span></div><div class=\"line\">$ useradd -M chang <span class=\"comment\"># add user \"chang\" without home directory</span></div><div class=\"line\">$ useradd <span class=\"_\">-e</span> 2017-01-01 chang <span class=\"comment\"># add user \"chang\" expire at 2017-01-02</span></div><div class=\"line\">$ chage <span class=\"_\">-l</span> chang <span class=\"comment\"># show/change user or password expire date</span></div><div class=\"line\">$ useradd <span class=\"_\">-e</span> 2017-01-01 <span class=\"_\">-f</span> 45 chang <span class=\"comment\"># password expire after 2017-01-01</span></div><div class=\"line\">$ useradd -c <span class=\"string\">\"Yuchang Wu\"</span> chang <span class=\"comment\"># add user with \"Yuchang Wu\" infomation</span></div><div class=\"line\">$ tail -1 /etc/passwd <span class=\"comment\"># print last 1 line of the file \"/etc/passwd\"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"the-meaning-of-files-that-user-and-group-saved\"><a href=\"#the-meaning-of-files-that-user-and-group-saved\" class=\"headerlink\" title=\"the meaning of files that user and group saved\"></a>the meaning of files that user and group saved</h3><ul>\n<li>/etc/passwd – User account information.</li>\n<li>/etc/shadow – Secure account information.</li>\n<li>/etc/group – Group account information.</li>\n<li>/etc/gshadow – Secure group account information.</li>\n<li>/etc/login.defs – Shadow password suite configuration..</li>\n</ul>\n<p>/etc/passwd format:<br>username:password:uid:gid:userInfo:homeDirectory:shell</p>\n<p>/etc/group format:<br>groupname:password:gidd:groupMembers</p>\n<h3 id=\"usermod\"><a href=\"#usermod\" class=\"headerlink\" title=\"usermod\"></a>usermod</h3><p>for more detail, to below to see<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ usermod --help</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ usermod -G www chang <span class=\"comment\"># add www group to chang, Be careful, it will remove all existing groups that user belongs, so always add the '-a' with '-G' to append new groups</span></div><div class=\"line\">$ usermod -G www <span class=\"_\">-a</span> chang</div></pre></td></tr></table></figure>\n<h3 id=\"chown\"><a href=\"#chown\" class=\"headerlink\" title=\"chown\"></a>chown</h3><p>change file owner<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chown -hR www:www /home/www <span class=\"comment\"># chang the owner of /homw/www to www user and www group</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ man order <span class=\"comment\"># to see detail of the order</span></div><div class=\"line\">$ apt-cache search package <span class=\"comment\"># search package</span></div><div class=\"line\">$ cat /etc/passwd <span class=\"comment\"># show all users</span></div><div class=\"line\">$ getent passwd <span class=\"comment\"># show all users</span></div><div class=\"line\">$ getent group <span class=\"comment\"># show all groups</span></div><div class=\"line\">$ getent group | grep username</div><div class=\"line\">$ id username <span class=\"comment\"># show username information</span></div><div class=\"line\">$ groups username <span class=\"comment\"># show which groups does username have</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>Ref:<br><em>screen</em> <a href=\"https://www.rackaid.com/blog/linux-screen-tutorial-and-how-to/#starting\">https://www.rackaid.com/blog/linux-screen-tutorial-and-how-to/#starting</a><br><em>useradd</em> <a href=\"http://www.tecmint.com/add-users-in-linux/\">http://www.tecmint.com/add-users-in-linux/</a><br><em>usermod</em> <a href=\"http://www.tecmint.com/usermod-command-examples/\">http://www.tecmint.com/usermod-command-examples/</a><br><em>permission</em> <a href=\"http://www.tecmint.com/manage-users-and-groups-in-linux/\">http://www.tecmint.com/manage-users-and-groups-in-linux/</a><br><em>nginx</em> <a href=\"https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/\">https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/</a></p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciwh62j7y0000c8ww2ko4jyqt","tag_id":"ciwh62j7y0002c8wwwfan9tgv","_id":"ciwh62j8e0004c8wwy8l8nfiv"},{"post_id":"ciwh62j7y0001c8ww3aarygsn","tag_id":"ciwh62j8e0003c8ww53b4a4m2","_id":"ciwh62j8e0005c8wwjzdvu3iw"}],"Tag":[{"name":"Node.js","_id":"ciwh62j7y0002c8wwwfan9tgv"},{"name":"node.js","_id":"ciwh62j8e0003c8ww53b4a4m2"}]}}