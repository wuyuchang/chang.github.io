{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/indigo/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/logo.jpg","path":"img/logo.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.min.js","path":"js/main.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.min.js","path":"js/search.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/embed.min.js","path":"js/embed.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/cloudTie/mobile.less","path":"css/cloudTie/mobile.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/cloudTie/pc.less","path":"css/cloudTie/pc.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/cloudTie/loader.min.js","path":"js/cloudTie/loader.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/cloudTie/loader.js","path":"js/cloudTie/loader.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/cloudTie/mobile.min.js","path":"js/cloudTie/mobile.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/embed.js","path":"js/embed.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/cloudTie/mobile.js","path":"js/cloudTie/mobile.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/cloudTie/pc.min.js","path":"js/cloudTie/pc.min.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/cloudTie/pc.js","path":"js/cloudTie/pc.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/indigo/.editorconfig","hash":"67a03b88eadd7810f2e01866e73814074ecd3b87","modified":1495681481117},{"_id":"themes/indigo/README.md","hash":"1ee068cd61a6ce20d7b723070ae318119881201e","modified":1495681481117},{"_id":"themes/indigo/_config.yml","hash":"f8328f4baa94a347ce94ab5f498346ec953f7113","modified":1500021665158},{"_id":"themes/indigo/package.json","hash":"de9cf393d2b560fcba9530ac952ced9d87c32954","modified":1495681481726},{"_id":"source/_posts/Four-commonly-used-form-accept-type.md","hash":"f640b9f6f8dd4fcf89b2c2a3b93d2c7bafdfa39e","modified":1495508902341},{"_id":"source/_posts/Principle-of-Promise-Deferred.md","hash":"e0cd8c0a1be3bc4d777a8832ce43260bbb4ccf61","modified":1495702696828},{"_id":"source/_posts/config-ThinkPHP-support-memcache-in-php5.md","hash":"64a7097e341c9ae4f7573ff44def94a7eace7197","modified":1495705545813},{"_id":"source/_posts/node-js.md","hash":"41b7187c16e52c4cf913eeebbc7abdf68eeae9af","modified":1495701376116},{"_id":"source/_posts/web-server.md","hash":"e0cfba15096c8610a16ac3df32f46521808a3b4c","modified":1495705598934},{"_id":"source/_posts/wechat-jssdk.md","hash":"7a1e04e7742520e6fa84f754fbb32979135cb88b","modified":1500020138929},{"_id":"source/tags/index.md","hash":"c6bc4360d6faf1709b35f7fd97d96af02ce8d5c3","modified":1495697253216},{"_id":"source/categories/index.md","hash":"e107f195298fce4abac6fdb9e12a1847d10f175e","modified":1495681822547},{"_id":"themes/indigo/.git/HEAD","hash":"da237e0de55301608e7c572e119ab5c4e43c0e85","modified":1495681481086},{"_id":"themes/indigo/.git/config","hash":"a15105d7ceffae664ad108699dcf7e7c4b2f0adb","modified":1495681481101},{"_id":"themes/indigo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1495681467399},{"_id":"themes/indigo/.git/index","hash":"f59094dad76d3d71d4639607022124dbf6a6de57","modified":1495681482271},{"_id":"themes/indigo/.git/packed-refs","hash":"9ec104f50a82f130450a83e72cf55b111eed8946","modified":1495681481039},{"_id":"themes/indigo/languages/en.yml","hash":"ba78def0453d08172248e220a1f9e145e99b4f23","modified":1495681481132},{"_id":"themes/indigo/languages/zh-CN.yml","hash":"d52870fed110543abee3b29f06f4c3d568e29104","modified":1495681481132},{"_id":"themes/indigo/languages/zh-TW.yml","hash":"9b8bdd9c8b68716f364503926dca6ba8571ee5ff","modified":1495681481132},{"_id":"themes/indigo/layout/archive.ejs","hash":"6897178ba358379d6a4b7c0ba1bc2ab97ad5303a","modified":1495681481633},{"_id":"themes/indigo/layout/categories.ejs","hash":"efae06b4d83aaf73ab93260381e891825bf404ac","modified":1495681481648},{"_id":"themes/indigo/layout/category.ejs","hash":"e5ba5cc2e092c199285b8097ef12ffe70bf84c91","modified":1495681481648},{"_id":"themes/indigo/layout/index.ejs","hash":"772c1985c7743e101598b4eddc253f9174c5605b","modified":1495681481648},{"_id":"themes/indigo/layout/layout.ejs","hash":"770af84fff104c398ce8b6c995130cddd3e9a1e9","modified":1495681481664},{"_id":"themes/indigo/layout/page.ejs","hash":"567c42b978da4c39b8b4982df19b940c26bc32a4","modified":1495681481679},{"_id":"themes/indigo/layout/post.ejs","hash":"efc3352828351f8574c51e8a93dc56c66660c3b1","modified":1495681481695},{"_id":"themes/indigo/layout/tag.ejs","hash":"90a231dea3a364b329a740e5d6c49c8cf5664fe9","modified":1495681481695},{"_id":"themes/indigo/layout/tags.ejs","hash":"1fc0461e9602b53899ec756e4361beb8cce74740","modified":1495681481711},{"_id":"themes/indigo/scripts/plugins.js","hash":"00ea278ea77733f546439aed507ce69a298da362","modified":1495681481726},{"_id":"themes/indigo/source/favicon.ico","hash":"4eda7c0f3a36181f483dd0a14efe9f58c8b29814","modified":1495614817534},{"_id":"source/_posts/web-server/default_server.png","hash":"8dcf521b836f0859108f82ddad779683a1af87b2","modified":1495508902352},{"_id":"source/_posts/web-server/response_header_safe.png","hash":"23ab5ac44c6f04f858bd7bb9815760cc5563e694","modified":1495508902356},{"_id":"source/_posts/web-server/response_header.png","hash":"3c1da8222a689aae5158230eef0a5c15fc8792a5","modified":1495508902354},{"_id":"themes/indigo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1495681467399},{"_id":"themes/indigo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1495681467399},{"_id":"themes/indigo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1495681467416},{"_id":"themes/indigo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1495681467416},{"_id":"themes/indigo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1495681467416},{"_id":"themes/indigo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1495681467416},{"_id":"themes/indigo/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1495681467416},{"_id":"themes/indigo/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1495681467416},{"_id":"themes/indigo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1495681467416},{"_id":"themes/indigo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1495681467416},{"_id":"themes/indigo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1495681467416},{"_id":"themes/indigo/.git/logs/HEAD","hash":"eb1ed0e6c739f9c05dd1825148dfc8120b49d728","modified":1495681481086},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"b95fd8a0beb61f4336f6af8dccceeda92430bf9a","modified":1495681481164},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"1351dbfca311f0d50a939f9e1a91c4f65bbcdf5f","modified":1495681481148},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"c294c98617ce14082f9b3d5eec83328f480f5597","modified":1495681481148},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"fca3d18413c21ef65d384bdf26004a2c38c9ed19","modified":1495681481211},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"648db446567a81371b8a29d719d13636aa157012","modified":1495681481211},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"e8a7f8d5b3d9d6eae581e309825721b94e079b7e","modified":1495681481226},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"8b3e037dd5f3d4564012689c5cd6f63caf73df0f","modified":1495681481242},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"ea6aded24a68de0914f24b3760f766b5e1c9835a","modified":1495681481258},{"_id":"themes/indigo/layout/_partial/paginator.ejs","hash":"13952250463f70d1c1bbbfdd7f4ee8160dd6d99b","modified":1495681481273},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"ee9eec3c29e8d089deb00579d82b07a4d26b2a8f","modified":1495681481414},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"8048494f38e47b7838d6db94784bf8bda683a3a9","modified":1495681481586},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"752109904304fdb8e988ee1254df2af9c0701466","modified":1495681481601},{"_id":"themes/indigo/layout/_partial/tags-bar.ejs","hash":"30ec74f081cc4c273a7bcd5d57da99072e9f0755","modified":1495681481617},{"_id":"themes/indigo/source/css/style.less","hash":"2235bfc5fcde90ca8dfa7e299b984b2bb98cf5e7","modified":1495681482209},{"_id":"themes/indigo/source/img/alipay.jpg","hash":"92dda7f4318b3db3abd8cc5083178952b70c3560","modified":1495611337423},{"_id":"themes/indigo/source/img/avatar.jpg","hash":"62a4893b1a32e997dcdb6e467b10559df75221e2","modified":1495681482224},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1495508903617},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1495508903621},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1495508903629},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1495508903632},{"_id":"themes/indigo/source/img/logo.jpg","hash":"2eda8e2bf8480d6fb56961d4d67cf8cfa8366f4b","modified":1495508903639},{"_id":"themes/indigo/source/img/wechat.jpg","hash":"beb0f7a66269172b4e32857f51d97d5595c100ae","modified":1495611344901},{"_id":"themes/indigo/source/js/main.js","hash":"7e2baa3accbc8dacecfff2471ed95a726550385a","modified":1495681482271},{"_id":"themes/indigo/source/js/main.min.js","hash":"7355f5a169c02ff32af75b95237ef34e3756e9c8","modified":1495681482271},{"_id":"themes/indigo/source/js/search.js","hash":"e9075b0dd68bce7750fb32a1e3c46f81fdcca6f6","modified":1495681482271},{"_id":"themes/indigo/source/js/search.min.js","hash":"c0c3d048af0d6b840f6f1dfda08911c7bfdb5dc1","modified":1495681482271},{"_id":"themes/indigo/source/js/embed.min.js","hash":"4f895c80ca3afa722e2a5085ccbed6a13c9ff9ae","modified":1495681482255},{"_id":"themes/indigo/.git/objects/pack/pack-f50bcf2a083e1e7c292aa229156888b1c23335e0.idx","hash":"35bf8135bc1bb3d47bd7f7f8280e24beb5c596bb","modified":1495681480679},{"_id":"themes/indigo/.git/refs/heads/card","hash":"1cd5581f30c0439695acebc7b255b47989b27131","modified":1495681481086},{"_id":"themes/indigo/layout/_partial/plugins/disqus.ejs","hash":"86fe837ab16cb60754b0a73bb9efa38b04f3023f","modified":1495681481304},{"_id":"themes/indigo/layout/_partial/plugins/baidu.ejs","hash":"da1355eea131952031e54c45560555e6d3aa5a33","modified":1495681481289},{"_id":"themes/indigo/layout/_partial/plugins/duoshuo-count.ejs","hash":"56e0a83ee77c7022aad528703e848a71a185ca12","modified":1495681481304},{"_id":"themes/indigo/layout/_partial/plugins/duoshuo-js.ejs","hash":"02f1b7986009e61d8aa514b847631d6552f41ca4","modified":1495681481304},{"_id":"themes/indigo/layout/_partial/plugins/duoshuo.ejs","hash":"25d3e25875e5f6b5a0597896dbe800c2187d58ac","modified":1495681481336},{"_id":"themes/indigo/layout/_partial/plugins/dynamic-title.ejs","hash":"3b877868c4a6fc217ea6f3314544830280a77472","modified":1495681481336},{"_id":"themes/indigo/layout/_partial/plugins/gitment.ejs","hash":"5f6ceb7f4b9b579e8e3f87894447f556a53f9385","modified":1495681481351},{"_id":"themes/indigo/layout/_partial/plugins/google-analytics.ejs","hash":"b5b87761751a897949e085a8f1ace78b0b8babd5","modified":1495681481367},{"_id":"themes/indigo/layout/_partial/plugins/mathjax.ejs","hash":"3a5c9f7d22d30cd8ffa4e83a8d3976db22815994","modified":1495681481383},{"_id":"themes/indigo/layout/_partial/plugins/page-visit.ejs","hash":"bb9deb32c54ea6820f622b923e62592915e9f21f","modified":1495681481383},{"_id":"themes/indigo/layout/_partial/plugins/site-visit.ejs","hash":"a2c247c2e32016563dd6a22c21474072d93f4dbd","modified":1495681481383},{"_id":"themes/indigo/layout/_partial/plugins/tajs.ejs","hash":"ef9c77d8c6e004b014c83c5f9333e7174f8bafa3","modified":1495681481383},{"_id":"themes/indigo/layout/_partial/plugins/uyan.ejs","hash":"ddf290e90dc1c779f42a48e1bd852ca932148dfb","modified":1495681481398},{"_id":"themes/indigo/layout/_partial/plugins/wangyi-ygt.ejs","hash":"7660c57324984fdbfeddc4d5b72b1d4b2c077866","modified":1495681481398},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c08e44cbd7315dec7afb6054b04d3c7b82c3bde8","modified":1495681481429},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"0d36a6b98ae23dbb791ff7ed16bd3121f324a8ed","modified":1495681481461},{"_id":"themes/indigo/layout/_partial/post/copyright.ejs","hash":"ffd06f34b6d29d5306d1bb8965fcca0e41cdd5f7","modified":1495681481461},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"c5adcec8db1506c378d39855a697e1bb1165646c","modified":1495681481476},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"f137c126672769e9571be2bb0a70ea8dda644b0e","modified":1495681481476},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"03719097851575a2c1bb95774058b224f6402a1f","modified":1495681481492},{"_id":"themes/indigo/layout/_partial/post/reward-btn.ejs","hash":"b46160005224821a439dec9f1ff183e2f66d9f4b","modified":1495681481492},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"e48e275869c9b3dd9dd5313aef19e18bc6e4868c","modified":1495681481492},{"_id":"themes/indigo/layout/_partial/post/share-fab.ejs","hash":"2ec7de870988cfbc8ea9872cddf7e4076ac64a57","modified":1495681481508},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"7d79a67b3e5e6989f22fb0e0904fa540bfca5fcc","modified":1495681481523},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"412894001b1ac6e63012b26b1109a0856651c076","modified":1495681481539},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"eaad7af7888bddd7095243a43ff38f55ad8c494a","modified":1495681481539},{"_id":"themes/indigo/layout/_partial/post/toc.ejs","hash":"0d8f0a4ab14c227cd52802095fc4974b6a7aae67","modified":1495681481554},{"_id":"themes/indigo/layout/_partial/post/updated.ejs","hash":"00fedf7971c0bda0623d968bc0614e512d19a985","modified":1495681481586},{"_id":"themes/indigo/source/css/_duoshuo/common.less","hash":"3831573b116be85a8b61b4040073d615092a4e26","modified":1495681481726},{"_id":"themes/indigo/source/css/_duoshuo/custom.less","hash":"4829a9e46e4287c81806a4b675446baf61469128","modified":1495681481742},{"_id":"themes/indigo/source/css/_duoshuo/dialog.less","hash":"b8ff5b1ad549031399ea1482c4ac0724d1119e97","modified":1495681481742},{"_id":"themes/indigo/source/css/_duoshuo/embed.less","hash":"81d1eb62500b12ef975e7ea6743d738ce9100a98","modified":1495681481742},{"_id":"themes/indigo/source/css/_duoshuo/global.less","hash":"78d7335c6f654d66417aa553914d25fc21368016","modified":1495681481758},{"_id":"themes/indigo/source/css/_duoshuo/login.less","hash":"3540d01cea125952b3d191e28a754778491a2319","modified":1495681481773},{"_id":"themes/indigo/source/css/_duoshuo/mixins.less","hash":"43ae6371cbd7c89575d10cce8fc25c184dedefc0","modified":1495681481773},{"_id":"themes/indigo/source/css/_duoshuo/notify.less","hash":"b4443555ff98d14fb70d793037a28077e7e2fee9","modified":1495681481773},{"_id":"themes/indigo/source/css/_duoshuo/recent-comments.less","hash":"2bc2cb483a04a0ad44dc7f3f3fe0e281c664e760","modified":1495681481773},{"_id":"themes/indigo/source/css/_duoshuo/recent-visitors.less","hash":"5307b1449d06639c8d897184599a73c737ffeed7","modified":1495681481789},{"_id":"themes/indigo/source/css/_duoshuo/share.less","hash":"45816bd1b01f2fed2f180fd14620ada0b09f2598","modified":1495681481789},{"_id":"themes/indigo/source/css/_duoshuo/thread.less","hash":"b82efa0e5a5fc8320ee847f194048c3ad00eb023","modified":1495681481804},{"_id":"themes/indigo/source/css/_duoshuo/variables.less","hash":"e4df4f20f5117f84ae67f5cdd8182b4c033c6654","modified":1495681481804},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"382fc22cd5cc073e881768a65600d97eba9f1d21","modified":1495681481804},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"be3681cf54571daa62a0abc3f62b7b209652993e","modified":1495681481820},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"bad63006b3bd4849bf53ad38482af0d9971061d3","modified":1495681481836},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"880b4a28e97d556ed15b07642d25115f9b6ba4f6","modified":1495681481836},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"99e48793dc0b4ffb66ecaf2d1315145872f9bb98","modified":1495681481836},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"a2bae8d2cffdc8a586de97f76c6880f907324bb5","modified":1495681481851},{"_id":"themes/indigo/source/css/_partial/lightbox.less","hash":"38419aaf3c1832e84ade331f051f110fdc8b960f","modified":1495681481851},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"85157ddf3877b5c58e8f1d737dda3dfb1bfd540b","modified":1495681481851},{"_id":"themes/indigo/source/css/_partial/page.less","hash":"33b0a5edcedc26a4c592c812c5785bb20d3c93db","modified":1495681481886},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"516cded3c7f1db4cacfa898bcaf0adfae7f3a2e1","modified":1495681481892},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"0ee290661ff436b6a3bc8fff99ee2ca18ab7d757","modified":1495681481896},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"3e457942995da8840e7662fa6cb551a7e12ea294","modified":1495681481912},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"dbc23e77e586ee682a21475f5eb568628ea6720f","modified":1495681481912},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"a683c96a59470efd35722b763c55149a46e35156","modified":1495681481912},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"01eb7f84193180928a6ed4796ee8802f6c1628e7","modified":1495681481927},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"3232e75f4653402c9fbd7bda5b97c05ecc31db2b","modified":1495681481927},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"a02eaa601887f947257f6016679b62dc96a61c0c","modified":1495681481927},{"_id":"themes/indigo/source/css/cloudTie/_inputBox.less","hash":"c7d7c8eaf26fbc878b0170b64318c8e04066b26a","modified":1495681481943},{"_id":"themes/indigo/source/css/cloudTie/_joinCount.less","hash":"e251746eb432d5597a2883fe01dd2307ef1a231f","modified":1495681481943},{"_id":"themes/indigo/source/css/cloudTie/_reset.less","hash":"2e8ff3e47dadac5259f5ac7218e31edc88df8aff","modified":1495681481943},{"_id":"themes/indigo/source/css/cloudTie/_share.less","hash":"adc02184e9a9dabc72beeebc9ce8f9b3c7ee826e","modified":1495681481959},{"_id":"themes/indigo/source/css/cloudTie/mobile.less","hash":"8a00d06f62b937a2c7c38249f877f709dc1ae27b","modified":1495681481959},{"_id":"themes/indigo/source/css/cloudTie/pc.less","hash":"fcb5bb53f9211ac845d8e52b985099bf2a7f4a85","modified":1495681481959},{"_id":"themes/indigo/source/js/cloudTie/loader.min.js","hash":"e73fcd885be2c4585f154861c9969e3c955d03e3","modified":1495681482255},{"_id":"themes/indigo/source/js/cloudTie/loader.js","hash":"b69e12df49584d551668192c1870c7f3e4ab9883","modified":1495681482255},{"_id":"themes/indigo/source/js/cloudTie/mobile.min.js","hash":"90edd9177e8beb2083b803bbe9a84e45c2c55aa6","modified":1495681482255},{"_id":"themes/indigo/source/js/embed.js","hash":"31ef69574e8863f7a928add9bb53ad35683732fc","modified":1495681482255},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"907c10fa4388b7ae7e141b026fb98cc9f758d785","modified":1495681481820},{"_id":"themes/indigo/source/js/cloudTie/mobile.js","hash":"0a9ea82684b59a4985270fc89eb9f7e19993418c","modified":1495681482255},{"_id":"themes/indigo/source/js/cloudTie/pc.min.js","hash":"abc6cd3b05a563aa3aa5569cd881735ed36c6e94","modified":1495681482255},{"_id":"themes/indigo/.git/logs/refs/heads/card","hash":"eb1ed0e6c739f9c05dd1825148dfc8120b49d728","modified":1495681481101},{"_id":"themes/indigo/.git/refs/remotes/origin/HEAD","hash":"7f141be72288af81f8e55d94df5da3f87101e8f1","modified":1495681481070},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1495681482037},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1495681482052},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1495681482052},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1495681482068},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1495681482084},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1495681482084},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1495681482099},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1495681482115},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1495681482130},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1495681482130},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1495681482146},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1495681482162},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1495681482162},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1495681482193},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1495681482193},{"_id":"themes/indigo/source/js/cloudTie/pc.js","hash":"e11f2a346da54ff420e3d8a7911e121e514482c1","modified":1495681482255},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1495681482021},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1495681482021},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1495681482037},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1495681482084},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1495681482115},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1495681482146},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1495681482177},{"_id":"themes/indigo/.git/logs/refs/remotes/origin/HEAD","hash":"eb1ed0e6c739f9c05dd1825148dfc8120b49d728","modified":1495681481054},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1495681481974},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1495681481974},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1495681482005},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1495681482005},{"_id":"themes/indigo/.git/objects/pack/pack-f50bcf2a083e1e7c292aa229156888b1c23335e0.pack","hash":"c0ededd78ed6980f0b83b21fa2f02df248ee9d6d","modified":1495681480695},{"_id":"source/_posts/wechat-jssdk/default_share.png","hash":"f0a6bb22a5323ad686beb1abb4799122d78cf44b","modified":1499937395951},{"_id":"source/_posts/wechat-jssdk/jssdk_share.png","hash":"c94b887aec0ae1092cb977c2700d0d965914a1cb","modified":1499937930521},{"_id":"public/atom.xml","hash":"b70b3bc0333f602372216f27c4887e118e22a917","modified":1500021750956},{"_id":"public/content.json","hash":"d5e95de614b3d8b9e49dc563541f3cd91f74ac10","modified":1500021751501},{"_id":"public/categories/index.html","hash":"b14cec26180bcb595a713edb1ffd69d6625cae50","modified":1500021751687},{"_id":"public/archives/index.html","hash":"e9480388b2f76340a9d75f4deb330a103396afd7","modified":1500021751931},{"_id":"public/archives/2016/index.html","hash":"c1b63913555153eeac7e812067ec1f76f9dde11a","modified":1500021751935},{"_id":"public/archives/2016/12/index.html","hash":"d8ef898c1267792ad14fba8d55c5623e56c955eb","modified":1500021751935},{"_id":"public/archives/2017/index.html","hash":"332e727546f56c2df970f225124aa0a959ec3338","modified":1500021751935},{"_id":"public/archives/2017/01/index.html","hash":"f406961642807d08b66e3d53386f41f38ffc27ba","modified":1500021751936},{"_id":"public/archives/2017/05/index.html","hash":"9f9a11fbb6a0811766f1ec51688f0ac74d05044e","modified":1500021751936},{"_id":"public/tags/Node-js/index.html","hash":"536daf77111467ffd5ea77eb83c3ecf8cb7858c2","modified":1500021751936},{"_id":"public/tags/MongoDB/index.html","hash":"eff5624ed9401a61eddb8dc01f9fb2710273b480","modified":1500021751938},{"_id":"public/tags/Performance/index.html","hash":"03fc198e85a566fecb8410d2e0b783fe7d10055b","modified":1500021751938},{"_id":"public/tags/index.html","hash":"9ac851517c205757ddee2ceca6078d46b99904d9","modified":1500021751939},{"_id":"public/2017/05/23/web-server/index.html","hash":"2c3bb32d89ba68bb209357955b7ce954f09e8606","modified":1500021751939},{"_id":"public/2017/01/03/config-ThinkPHP-support-memcache-in-php5/index.html","hash":"6d5edf48de940518b7ca1e3a071b893ad3a765dc","modified":1500021751939},{"_id":"public/2016/12/20/Four-commonly-used-form-accept-type/index.html","hash":"d500697f507c4cbeb33d123c7d5d664a2851a998","modified":1500021751939},{"_id":"public/2016/12/09/Principle-of-Promise-Deferred/index.html","hash":"812a58c15ccf24e1fac20a456dd45bf1b7c6621a","modified":1500021751939},{"_id":"public/2016/12/08/node-js/index.html","hash":"fa7c0a4bc621fcbc4a565de388604743294b9b11","modified":1500021751939},{"_id":"public/index.html","hash":"7c940d9699ca528d9ab0b414ae262c58b8aca821","modified":1500021751940},{"_id":"public/archives/2017/07/index.html","hash":"78e253cf493c9ebd6321d28831e94fa75fac3b06","modified":1500021751952},{"_id":"public/tags/Linux/index.html","hash":"2465c58be0c2904134235d8a89cfbd47b2bb081a","modified":1500021751952},{"_id":"public/tags/PHP/index.html","hash":"752a2dbf4bf5e4b2f2426b5a233f0e8a5c530e26","modified":1500021751952},{"_id":"public/tags/Memcache/index.html","hash":"9c91ef7073b786d104bec52c408bdc98d4c4c292","modified":1500021751952},{"_id":"public/tags/Nginx/index.html","hash":"16fc2d270c345b889cd3faaf5685e037fcfadca9","modified":1500021751954},{"_id":"public/tags/Wechat/index.html","hash":"a130241c6a81005aed995bb08e235aa00d1ddb75","modified":1500021751954},{"_id":"public/tags/JSSDK/index.html","hash":"677e2ecd78cb78298c73b5e78fefc8e5ad7842a5","modified":1500021751955},{"_id":"public/tags/Chinese/index.html","hash":"ddbfa2f38046be653edb14de1d53cfae6784ca5d","modified":1500021751956},{"_id":"public/2017/07/13/wechat-jssdk/index.html","hash":"2ad5f98f81b007d4bacbbbda2bd3d94fa415acb9","modified":1500021751956},{"_id":"public/2017/07/13/wechat-jssdk/default_share.png","hash":"f0a6bb22a5323ad686beb1abb4799122d78cf44b","modified":1500021751963},{"_id":"public/2017/07/13/wechat-jssdk/jssdk_share.png","hash":"c94b887aec0ae1092cb977c2700d0d965914a1cb","modified":1500021751963}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2017-05-25T03:08:18.000Z","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-05-25 11:08:18\nlayout: tags\n---\n","updated":"2017-05-25T07:27:33.216Z","path":"tags/index.html","comments":1,"_id":"cj526dkb40001gkle58rcyedl","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2017-05-25T03:10:22.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-05-25 11:10:22\n---\n","updated":"2017-05-25T03:10:22.547Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj526dkba0003gkleqegy0f8x","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Four commonly used form accept type","date":"2016-12-20T03:06:46.000Z","_content":"\nThe blog based on Node.js server.\n\nIn front-end, we have several types to send a request to server, most of the time, we use 3 commonly below:\n1. application/json\n2. application/x-www-form-urlencoded\n3. multipart/form-data\n\n## application/json\n### GET\n#### client\n``` javascript\n$.ajax({\n  url: '/upload',\n  method: 'GET',\n  contentType: 'application/json',\n  data: JSON.stringify({   // must turn to string, whether jQuery will turn to \"x-www-form-urlcoded\" format\n    username: 'username',\n    password: 'password'\n  })\n})\n```\nCheck the request header in network panel in Chrome dev-tool, you will see the request URL turn to *http://domain/upload?{\"test\":\"wuyuchang\",\"passowrd\":\"chang\"}*, it's because GET request always append data to the request URL.\n\n``` header\nRequest URL:http://domain/upload?{\"test\":\"username\",\"passowrd\":\"password\"}\nRequest Method:GET\nContent-Type:application/json\n...\n```\n#### server\nIn server side, you can read the header that client send throw req.headers, and URL throw req.url, then you just compile analysis the parameter after question mark.\n``` javascript\nhttp.createServer((req, res) => {\n  const qs = require('querystring')\n  let param = qs.unescape(req.url.split('?')[1])\n  let json = JSON.parse(param)\n  // ...\n}).listen(8080)\n```\n### POST\n#### Client\nFor client, you just change the request method from 'GET' to 'POST'.\n#### Server\nIn server side, you can't get content that client send directly, it's send throw buffer, so you have to receive it by listen it throw req.on('data')\n``` javascript\nhttp.createServer((req, res) => {\n  let chunk = ''\n  req.on('data', data => {\n    chunk += data\n  })\n  req.on('end', err => {\n    let json = JSON.parse(chunk.toString())\n    // ...\n  })\n}).listen(8080)\n```\nIt's convenient to get JSON data throw this way.\n\n## application/x-www-form-urlencoded\n### GET\n#### Client\nSame with above, just change the contenType to 'application/x-www-form-urlencoded', the jQuery wouldn't add contentType automatic if you set method as 'GET'.\n#### server\n``` javascript\nhttp.createServer((req, res) => {\n  let json = require('url').parse(req.url, true).query\n  // ...\n}).listen(8080)\n```\n### POST\njQuery set contentType as 'application/x-www-form-urlencoded' if you send request throw 'POST' method.\n#### server\n``` javascript\nhttp.createServer((req, res) => {\n  let chunk = ''\n  req.on('data', data => {\n    chunk += data\n  })\n  req.on('end', err => {\n    let qs = require('querystring')\n    let json = qs.parse(chunk.toString())\n    // ...\n  })\n}).listen(8080)\n```\n\n## multipart/form-data\n*multipart/form-data* always used to send a file, of course, you also can send form without file.\n### GET\nIt's same with below, the different is that if you send a file to server, the server can't accept it.\n\n### POST\n#### Client\n``` html\n<form action=\"/upload\" method=\"POST\" enctype=\"multipart/form-data\">\n  <input type=\"text\" name=\"test\" value=\"wuyuchang\">\n  <input type=\"password\" name=\"pwd\" value=\"chang\">\n  <input type=\"file\" multiple=\"multiple\" name=\"upload\"><br>\n  <input type=\"submit\" value=\"Upload\">\n</form>\n```\nthe request header is different\n``` text\nContent-Type:multipart/form-data; boundary=----WebKitFormBoundaryuyeyXEbnVwhZJcl6\nRequest Payload:\n  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6\n  Content-Disposition: form-data; name=\"test\"\n\n  wuyuchang\n  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6\n  Content-Disposition: form-data; name=\"pwd\"\n\n  chang\n  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6\n  Content-Disposition: form-data; name=\"upload\"; filename=\"boom.png\"\n  Content-Type: image/png\n```\n\nthe value of boundary is random.\n#### Server\nIn server side you can compile it, but it's complex, you can import a package name of 'formidable'.\n","source":"_posts/Four-commonly-used-form-accept-type.md","raw":"---\ntitle: Four commonly used form accept type\ndate: 2016-12-20 11:06:46\ntags: Node.js\n---\n\nThe blog based on Node.js server.\n\nIn front-end, we have several types to send a request to server, most of the time, we use 3 commonly below:\n1. application/json\n2. application/x-www-form-urlencoded\n3. multipart/form-data\n\n## application/json\n### GET\n#### client\n``` javascript\n$.ajax({\n  url: '/upload',\n  method: 'GET',\n  contentType: 'application/json',\n  data: JSON.stringify({   // must turn to string, whether jQuery will turn to \"x-www-form-urlcoded\" format\n    username: 'username',\n    password: 'password'\n  })\n})\n```\nCheck the request header in network panel in Chrome dev-tool, you will see the request URL turn to *http://domain/upload?{\"test\":\"wuyuchang\",\"passowrd\":\"chang\"}*, it's because GET request always append data to the request URL.\n\n``` header\nRequest URL:http://domain/upload?{\"test\":\"username\",\"passowrd\":\"password\"}\nRequest Method:GET\nContent-Type:application/json\n...\n```\n#### server\nIn server side, you can read the header that client send throw req.headers, and URL throw req.url, then you just compile analysis the parameter after question mark.\n``` javascript\nhttp.createServer((req, res) => {\n  const qs = require('querystring')\n  let param = qs.unescape(req.url.split('?')[1])\n  let json = JSON.parse(param)\n  // ...\n}).listen(8080)\n```\n### POST\n#### Client\nFor client, you just change the request method from 'GET' to 'POST'.\n#### Server\nIn server side, you can't get content that client send directly, it's send throw buffer, so you have to receive it by listen it throw req.on('data')\n``` javascript\nhttp.createServer((req, res) => {\n  let chunk = ''\n  req.on('data', data => {\n    chunk += data\n  })\n  req.on('end', err => {\n    let json = JSON.parse(chunk.toString())\n    // ...\n  })\n}).listen(8080)\n```\nIt's convenient to get JSON data throw this way.\n\n## application/x-www-form-urlencoded\n### GET\n#### Client\nSame with above, just change the contenType to 'application/x-www-form-urlencoded', the jQuery wouldn't add contentType automatic if you set method as 'GET'.\n#### server\n``` javascript\nhttp.createServer((req, res) => {\n  let json = require('url').parse(req.url, true).query\n  // ...\n}).listen(8080)\n```\n### POST\njQuery set contentType as 'application/x-www-form-urlencoded' if you send request throw 'POST' method.\n#### server\n``` javascript\nhttp.createServer((req, res) => {\n  let chunk = ''\n  req.on('data', data => {\n    chunk += data\n  })\n  req.on('end', err => {\n    let qs = require('querystring')\n    let json = qs.parse(chunk.toString())\n    // ...\n  })\n}).listen(8080)\n```\n\n## multipart/form-data\n*multipart/form-data* always used to send a file, of course, you also can send form without file.\n### GET\nIt's same with below, the different is that if you send a file to server, the server can't accept it.\n\n### POST\n#### Client\n``` html\n<form action=\"/upload\" method=\"POST\" enctype=\"multipart/form-data\">\n  <input type=\"text\" name=\"test\" value=\"wuyuchang\">\n  <input type=\"password\" name=\"pwd\" value=\"chang\">\n  <input type=\"file\" multiple=\"multiple\" name=\"upload\"><br>\n  <input type=\"submit\" value=\"Upload\">\n</form>\n```\nthe request header is different\n``` text\nContent-Type:multipart/form-data; boundary=----WebKitFormBoundaryuyeyXEbnVwhZJcl6\nRequest Payload:\n  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6\n  Content-Disposition: form-data; name=\"test\"\n\n  wuyuchang\n  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6\n  Content-Disposition: form-data; name=\"pwd\"\n\n  chang\n  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6\n  Content-Disposition: form-data; name=\"upload\"; filename=\"boom.png\"\n  Content-Type: image/png\n```\n\nthe value of boundary is random.\n#### Server\nIn server side you can compile it, but it's complex, you can import a package name of 'formidable'.\n","slug":"Four-commonly-used-form-accept-type","published":1,"updated":"2017-05-23T03:08:22.341Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj526dkay0000gklehkgd3230","content":"<p>The blog based on Node.js server.</p>\n<p>In front-end, we have several types to send a request to server, most of the time, we use 3 commonly below:</p>\n<ol>\n<li>application/json</li>\n<li>application/x-www-form-urlencoded</li>\n<li>multipart/form-data</li>\n</ol>\n<h2 id=\"application-json\"><a href=\"#application-json\" class=\"headerlink\" title=\"application/json\"></a>application/json</h2><h3 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h3><h4 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">'/upload'</span>,</div><div class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">'GET'</span>,</div><div class=\"line\">  <span class=\"attr\">contentType</span>: <span class=\"string\">'application/json'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"built_in\">JSON</span>.stringify(&#123;   <span class=\"comment\">// must turn to string, whether jQuery will turn to \"x-www-form-urlcoded\" format</span></div><div class=\"line\">    username: <span class=\"string\">'username'</span>,</div><div class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">'password'</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Check the request header in network panel in Chrome dev-tool, you will see the request URL turn to <em><a href=\"http://domain/upload?{&quot;test&quot;:&quot;wuyuchang&quot;,&quot;passowrd&quot;:&quot;chang&quot;}\" target=\"_blank\" rel=\"external\">http://domain/upload?{&quot;test&quot;:&quot;wuyuchang&quot;,&quot;passowrd&quot;:&quot;chang&quot;}</a></em>, it’s because GET request always append data to the request URL.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Request URL:http://domain/upload?&#123;&quot;test&quot;:&quot;username&quot;,&quot;passowrd&quot;:&quot;password&quot;&#125;</div><div class=\"line\">Request Method:GET</div><div class=\"line\">Content-Type:application/json</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<h4 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h4><p>In server side, you can read the header that client send throw req.headers, and URL throw req.url, then you just compile analysis the parameter after question mark.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> qs = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>)</div><div class=\"line\">  <span class=\"keyword\">let</span> param = qs.unescape(req.url.split(<span class=\"string\">'?'</span>)[<span class=\"number\">1</span>])</div><div class=\"line\">  <span class=\"keyword\">let</span> json = <span class=\"built_in\">JSON</span>.parse(param)</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;).listen(<span class=\"number\">8080</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h3><h4 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client\"></a>Client</h4><p>For client, you just change the request method from ‘GET’ to ‘POST’.</p>\n<h4 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h4><p>In server side, you can’t get content that client send directly, it’s send throw buffer, so you have to receive it by listen it throw req.on(‘data’)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> chunk = <span class=\"string\">''</span></div><div class=\"line\">  req.on(<span class=\"string\">'data'</span>, data =&gt; &#123;</div><div class=\"line\">    chunk += data</div><div class=\"line\">  &#125;)</div><div class=\"line\">  req.on(<span class=\"string\">'end'</span>, err =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> json = <span class=\"built_in\">JSON</span>.parse(chunk.toString())</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;).listen(<span class=\"number\">8080</span>)</div></pre></td></tr></table></figure></p>\n<p>It’s convenient to get JSON data throw this way.</p>\n<h2 id=\"application-x-www-form-urlencoded\"><a href=\"#application-x-www-form-urlencoded\" class=\"headerlink\" title=\"application/x-www-form-urlencoded\"></a>application/x-www-form-urlencoded</h2><h3 id=\"GET-1\"><a href=\"#GET-1\" class=\"headerlink\" title=\"GET\"></a>GET</h3><h4 id=\"Client-1\"><a href=\"#Client-1\" class=\"headerlink\" title=\"Client\"></a>Client</h4><p>Same with above, just change the contenType to ‘application/x-www-form-urlencoded’, the jQuery wouldn’t add contentType automatic if you set method as ‘GET’.</p>\n<h4 id=\"server-1\"><a href=\"#server-1\" class=\"headerlink\" title=\"server\"></a>server</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> json = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>).parse(req.url, <span class=\"literal\">true</span>).query</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;).listen(<span class=\"number\">8080</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"POST-1\"><a href=\"#POST-1\" class=\"headerlink\" title=\"POST\"></a>POST</h3><p>jQuery set contentType as ‘application/x-www-form-urlencoded’ if you send request throw ‘POST’ method.</p>\n<h4 id=\"server-2\"><a href=\"#server-2\" class=\"headerlink\" title=\"server\"></a>server</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> chunk = <span class=\"string\">''</span></div><div class=\"line\">  req.on(<span class=\"string\">'data'</span>, data =&gt; &#123;</div><div class=\"line\">    chunk += data</div><div class=\"line\">  &#125;)</div><div class=\"line\">  req.on(<span class=\"string\">'end'</span>, err =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> qs = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>)</div><div class=\"line\">    <span class=\"keyword\">let</span> json = qs.parse(chunk.toString())</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;).listen(<span class=\"number\">8080</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"multipart-form-data\"><a href=\"#multipart-form-data\" class=\"headerlink\" title=\"multipart/form-data\"></a>multipart/form-data</h2><p><em>multipart/form-data</em> always used to send a file, of course, you also can send form without file.</p>\n<h3 id=\"GET-2\"><a href=\"#GET-2\" class=\"headerlink\" title=\"GET\"></a>GET</h3><p>It’s same with below, the different is that if you send a file to server, the server can’t accept it.</p>\n<h3 id=\"POST-2\"><a href=\"#POST-2\" class=\"headerlink\" title=\"POST\"></a>POST</h3><h4 id=\"Client-2\"><a href=\"#Client-2\" class=\"headerlink\" title=\"Client\"></a>Client</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/upload\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"wuyuchang\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"pwd\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"chang\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">multiple</span>=<span class=\"string\">\"multiple\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"upload\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Upload\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>the request header is different<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryuyeyXEbnVwhZJcl6</div><div class=\"line\">Request Payload:</div><div class=\"line\">  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6</div><div class=\"line\">  Content-Disposition: form-data; name=&quot;test&quot;</div><div class=\"line\"></div><div class=\"line\">  wuyuchang</div><div class=\"line\">  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6</div><div class=\"line\">  Content-Disposition: form-data; name=&quot;pwd&quot;</div><div class=\"line\"></div><div class=\"line\">  chang</div><div class=\"line\">  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6</div><div class=\"line\">  Content-Disposition: form-data; name=&quot;upload&quot;; filename=&quot;boom.png&quot;</div><div class=\"line\">  Content-Type: image/png</div></pre></td></tr></table></figure></p>\n<p>the value of boundary is random.</p>\n<h4 id=\"Server-1\"><a href=\"#Server-1\" class=\"headerlink\" title=\"Server\"></a>Server</h4><p>In server side you can compile it, but it’s complex, you can import a package name of ‘formidable’.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>The blog based on Node.js server.</p>\n<p>In front-end, we have several types to send a request to server, most of the time, we use 3 commonly below:</p>\n<ol>\n<li>application/json</li>\n<li>application/x-www-form-urlencoded</li>\n<li>multipart/form-data</li>\n</ol>\n<h2 id=\"application-json\"><a href=\"#application-json\" class=\"headerlink\" title=\"application/json\"></a>application/json</h2><h3 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h3><h4 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">'/upload'</span>,</div><div class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">'GET'</span>,</div><div class=\"line\">  <span class=\"attr\">contentType</span>: <span class=\"string\">'application/json'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"built_in\">JSON</span>.stringify(&#123;   <span class=\"comment\">// must turn to string, whether jQuery will turn to \"x-www-form-urlcoded\" format</span></div><div class=\"line\">    username: <span class=\"string\">'username'</span>,</div><div class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">'password'</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Check the request header in network panel in Chrome dev-tool, you will see the request URL turn to <em><a href=\"http://domain/upload?{&quot;test&quot;:&quot;wuyuchang&quot;,&quot;passowrd&quot;:&quot;chang&quot;}\" target=\"_blank\" rel=\"external\">http://domain/upload?{&quot;test&quot;:&quot;wuyuchang&quot;,&quot;passowrd&quot;:&quot;chang&quot;}</a></em>, it’s because GET request always append data to the request URL.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Request URL:http://domain/upload?&#123;&quot;test&quot;:&quot;username&quot;,&quot;passowrd&quot;:&quot;password&quot;&#125;</div><div class=\"line\">Request Method:GET</div><div class=\"line\">Content-Type:application/json</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<h4 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h4><p>In server side, you can read the header that client send throw req.headers, and URL throw req.url, then you just compile analysis the parameter after question mark.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> qs = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>)</div><div class=\"line\">  <span class=\"keyword\">let</span> param = qs.unescape(req.url.split(<span class=\"string\">'?'</span>)[<span class=\"number\">1</span>])</div><div class=\"line\">  <span class=\"keyword\">let</span> json = <span class=\"built_in\">JSON</span>.parse(param)</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;).listen(<span class=\"number\">8080</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h3><h4 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client\"></a>Client</h4><p>For client, you just change the request method from ‘GET’ to ‘POST’.</p>\n<h4 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h4><p>In server side, you can’t get content that client send directly, it’s send throw buffer, so you have to receive it by listen it throw req.on(‘data’)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> chunk = <span class=\"string\">''</span></div><div class=\"line\">  req.on(<span class=\"string\">'data'</span>, data =&gt; &#123;</div><div class=\"line\">    chunk += data</div><div class=\"line\">  &#125;)</div><div class=\"line\">  req.on(<span class=\"string\">'end'</span>, err =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> json = <span class=\"built_in\">JSON</span>.parse(chunk.toString())</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;).listen(<span class=\"number\">8080</span>)</div></pre></td></tr></table></figure></p>\n<p>It’s convenient to get JSON data throw this way.</p>\n<h2 id=\"application-x-www-form-urlencoded\"><a href=\"#application-x-www-form-urlencoded\" class=\"headerlink\" title=\"application/x-www-form-urlencoded\"></a>application/x-www-form-urlencoded</h2><h3 id=\"GET-1\"><a href=\"#GET-1\" class=\"headerlink\" title=\"GET\"></a>GET</h3><h4 id=\"Client-1\"><a href=\"#Client-1\" class=\"headerlink\" title=\"Client\"></a>Client</h4><p>Same with above, just change the contenType to ‘application/x-www-form-urlencoded’, the jQuery wouldn’t add contentType automatic if you set method as ‘GET’.</p>\n<h4 id=\"server-1\"><a href=\"#server-1\" class=\"headerlink\" title=\"server\"></a>server</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> json = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>).parse(req.url, <span class=\"literal\">true</span>).query</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;).listen(<span class=\"number\">8080</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"POST-1\"><a href=\"#POST-1\" class=\"headerlink\" title=\"POST\"></a>POST</h3><p>jQuery set contentType as ‘application/x-www-form-urlencoded’ if you send request throw ‘POST’ method.</p>\n<h4 id=\"server-2\"><a href=\"#server-2\" class=\"headerlink\" title=\"server\"></a>server</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> chunk = <span class=\"string\">''</span></div><div class=\"line\">  req.on(<span class=\"string\">'data'</span>, data =&gt; &#123;</div><div class=\"line\">    chunk += data</div><div class=\"line\">  &#125;)</div><div class=\"line\">  req.on(<span class=\"string\">'end'</span>, err =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> qs = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>)</div><div class=\"line\">    <span class=\"keyword\">let</span> json = qs.parse(chunk.toString())</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;).listen(<span class=\"number\">8080</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"multipart-form-data\"><a href=\"#multipart-form-data\" class=\"headerlink\" title=\"multipart/form-data\"></a>multipart/form-data</h2><p><em>multipart/form-data</em> always used to send a file, of course, you also can send form without file.</p>\n<h3 id=\"GET-2\"><a href=\"#GET-2\" class=\"headerlink\" title=\"GET\"></a>GET</h3><p>It’s same with below, the different is that if you send a file to server, the server can’t accept it.</p>\n<h3 id=\"POST-2\"><a href=\"#POST-2\" class=\"headerlink\" title=\"POST\"></a>POST</h3><h4 id=\"Client-2\"><a href=\"#Client-2\" class=\"headerlink\" title=\"Client\"></a>Client</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/upload\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"wuyuchang\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"pwd\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"chang\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">multiple</span>=<span class=\"string\">\"multiple\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"upload\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Upload\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>the request header is different<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryuyeyXEbnVwhZJcl6</div><div class=\"line\">Request Payload:</div><div class=\"line\">  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6</div><div class=\"line\">  Content-Disposition: form-data; name=&quot;test&quot;</div><div class=\"line\"></div><div class=\"line\">  wuyuchang</div><div class=\"line\">  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6</div><div class=\"line\">  Content-Disposition: form-data; name=&quot;pwd&quot;</div><div class=\"line\"></div><div class=\"line\">  chang</div><div class=\"line\">  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6</div><div class=\"line\">  Content-Disposition: form-data; name=&quot;upload&quot;; filename=&quot;boom.png&quot;</div><div class=\"line\">  Content-Type: image/png</div></pre></td></tr></table></figure></p>\n<p>the value of boundary is random.</p>\n<h4 id=\"Server-1\"><a href=\"#Server-1\" class=\"headerlink\" title=\"Server\"></a>Server</h4><p>In server side you can compile it, but it’s complex, you can import a package name of ‘formidable’.</p>\n"},{"title":"Principle of Promise/Deferred","date":"2016-12-09T02:21:08.000Z","_content":"\n# Super simple realize separate call an async and handle result in two files.\nAssume we have a project base on jQuery, we have to separate call AJAX and handle result in another file.\n\nMost of the time, we handle the result with below.\n``` JavaScript\n$.get('url', data => {\n  //handle data\n})\n```\n\nBut, sometimes, we don't want to handle it in the moment. Maybe we just want to handle in another file. So we can do below.\n`request.js`\n``` JavaScript\n$.get('url', data => {\n  window.result(data)\n})\n```\n`handle.js`\n``` JavaScript\nwindow.result = data => {\n  // handle result\n}\n```\n\nBut, we most of the time, we are not just handle the success result. We also handle error, receiving data.\nFor example.\n\n`request.js`\n``` JavaScript\n$.ajax({\n  url: 'url',\n  data: 'data',\n  type: 'get',\n  success: data => {\n    window.deferrd.resolve(data)\n  },\n  error: err => {\n    window.defered.error(err)\n  },\n  complete: notify => {\n    window.deferred.notify('complete')\n  }\n})\n```\n\n`handle.js`\n``` JavaScript\nwindow.deferred = {\n  //handle success\n  resolve: data => {\n    console.log(data)\n  },\n  //handle error\n  error: err => {\n    console.log(err)\n  },\n  //handle complete\n  notify: msg => {\n    console.log(msg)\n  }\n}\n```\n\n# use jQuery promise/deferred\nFortunately, jQuery already implement this, so we just have to do below.\n`request.js`\n``` JavaScript\nwindow.promise = $.get('url')\n```\n`handle.js`\n``` JavaScript\nwindow.promise.then(data => {\n  // handle success\n}, err => {\n  // handle error\n})\n```\n\n# Promise/A\nFor show how promise and deferred work, we create a new and simple promise and deferred object, so that you can easy understand it.\n## Promise Object\nHere try to extend EventEmitter module to explain how it work.\n`Promise.class.js`\n``` JavaScript\nclass Promise extends EventEmitter {\n  then(success, error, progress) {\n    if (typeof success === 'function') {\n      this.once('success', success)\n    }\n    if (typeof error === 'function') {\n      this.once('error', error)\n    }\n    if (typeof progress === 'progress') {\n      // Note, this function will be recall, so here defined the event use 'on'\n      this.on('progress', progress)\n    }\n  }\n}\n```\nHere you can see we defined three events after you pass these callback function into it through 'then' function.\nSo we defined the events, and we have to trigger it, so that we can execute these callbacks with the result.\n\nBelow, we defined the Deferred object.\n## Deferred Object\nHere we defined the Deferred, these functions just emit promise, so tell them we finished.\n`Deferred.class.js`\n``` JavaScript\nclass Deferred {\n  this.state = 'unsuccess'\n  this.promise = new Promise()\n\n  resolve(obj) {\n    this.state = 'success'\n    this.promise.emit('success', obj)\n  }\n  reject(obj) {\n    this.state = 'error'\n    this.promise.emit('error', obj)\n  }\n  progress(obj) {\n    this.state = 'progress'\n    this.promise.emit('progress', obj)\n  }\n}\n```\n\n\n## use Promise & Deferred\nTo implement this, we create a new Deferred, and we trigger deferred function (progress/end/error) when we finish specific action to tell Deferred that we finished.\nThen we get promise object, and then we can store it, and call it with callback in another file.\nSo we successful separate call async and get data in two files.\n``` JavaScript\nlet promisify = res => {\n  let deferred = new Deferred()\n  let result = ''\n\n  res.on('data', chunk => {\n    result += chunk\n    deferred.progress(result)\n  })\n  res.on('end', () => {\n    deferred.resolve(result)\n  })\n  res.on('error', () => {\n    deferred.reject()\n  })\n\n  return deferred.promise\n}\n\nglobal.result = promisify(res)\n\n\n// in another file, this just an example to pass the result to global, so we can easy get the result, in the production, you better to pass the result in other way.\nglobal.result.then((result) => {\n  // success\n}, (err) => {\n  // error\n}, (chunk) => {\n  // progress\n  console.log(chunk)\n})\n```\n\n## Deferred.all()\nDo some action after a several of asynchronous finished.\n`Deferred.class.js`\n``` JavaScript\nclass Deferred {\n  // ...\n\n  all(promises) {\n    let count = promises.length\n    let that = this\n    let results = []\n    promises.forEach((promise, i) => {\n      promise.then(data => {\n        count --\n        results[i] = data\n        if (count === 0) {\n          that.resolve(results)\n        }\n      })\n    }, err => {\n      that.reject(err)\n    })\n\n    return this.promise\n  }\n}\n```\n\n## Order Run asynchronous\nRun asynchronous in order\n`Deferred.class.js`\n``` JavaScript\nconst Promise = require('./promise.class')\n\nmodule.exports = class Deferred {\n  constructor() {\n    this.promise = new Promise()\n  }\n\n  resolve(data) {\n    let promise = this.promise\n    let handler\n    while(handler = promise.queue.shift()) {\n      if (handler && handler.resolve) {\n        let ret = handler.resolve(data)\n\n        // if there has next promise, then we interrupt current loop, and set next promise.queue equals current queue\n        if (ret && ret.isPromise) {\n          ret.queue = promise.queue\n          return\n        }\n      }\n    }\n  }\n\n  reject(err) {\n    let promise = this.promise\n    let handler\n    while(handler = promise.queue.shift()) {\n      if (handler && handler.reject) {\n        let ret = handler.reject(err)\n\n        // if there has next promise, then we interrupt current loop, and set next promise.queue equals current queue\n        if (ret && ret.isPromise) {\n          ret.queue = promise.queue\n          return\n        }\n      }\n    }\n  }\n\n  callback(str) {\n    let that = this\n    return (err, file) => {\n      if (err) {\n        return that.reject(err)\n      }\n      that.resolve(file)\n    }\n  }\n}\n```\n\n`promise.class.js`\n``` JavaScript\nmodule.exports = class Promise {\n  constructor() {\n    this.queue = []\n    this.isPromise = true\n  }\n\n  then(resolve, reject) {\n    let handler = {}\n    if (typeof resolve === 'function') {\n      handler.resolve = resolve\n    }\n    if (typeof reject === 'function') {\n      handler.reject = reject\n    }\n\n    this.queue.push(handler)\n    return this\n  }\n}\n```\n\n`app.js`\n``` JavaScript\nconst Deferred = require('./deferred.class')\nconst fs = require('fs')\n\nlet action1 = (file, encoding) => {\n  let deferred = new Deferred()\n  fs.readFile(file, encoding, deferred.callback())\n  return deferred.promise\n}\n\nlet action2 = (file, encoding) => {\n  let deferred = new Deferred()\n  fs.readFile(file, encoding, deferred.callback())\n  return deferred.promise\n}\n\naction1('./file1.txt', 'utf8').then(file1 => {\n  return action2(file1.trim(), 'utf8')\n}).then(file2 => {\n  console.log(file2)\n})\n```\n","source":"_posts/Principle-of-Promise-Deferred.md","raw":"---\ntitle: Principle of Promise/Deferred\ndate: 2016-12-09 10:21:08\ntags: Node.js\n---\n\n# Super simple realize separate call an async and handle result in two files.\nAssume we have a project base on jQuery, we have to separate call AJAX and handle result in another file.\n\nMost of the time, we handle the result with below.\n``` JavaScript\n$.get('url', data => {\n  //handle data\n})\n```\n\nBut, sometimes, we don't want to handle it in the moment. Maybe we just want to handle in another file. So we can do below.\n`request.js`\n``` JavaScript\n$.get('url', data => {\n  window.result(data)\n})\n```\n`handle.js`\n``` JavaScript\nwindow.result = data => {\n  // handle result\n}\n```\n\nBut, we most of the time, we are not just handle the success result. We also handle error, receiving data.\nFor example.\n\n`request.js`\n``` JavaScript\n$.ajax({\n  url: 'url',\n  data: 'data',\n  type: 'get',\n  success: data => {\n    window.deferrd.resolve(data)\n  },\n  error: err => {\n    window.defered.error(err)\n  },\n  complete: notify => {\n    window.deferred.notify('complete')\n  }\n})\n```\n\n`handle.js`\n``` JavaScript\nwindow.deferred = {\n  //handle success\n  resolve: data => {\n    console.log(data)\n  },\n  //handle error\n  error: err => {\n    console.log(err)\n  },\n  //handle complete\n  notify: msg => {\n    console.log(msg)\n  }\n}\n```\n\n# use jQuery promise/deferred\nFortunately, jQuery already implement this, so we just have to do below.\n`request.js`\n``` JavaScript\nwindow.promise = $.get('url')\n```\n`handle.js`\n``` JavaScript\nwindow.promise.then(data => {\n  // handle success\n}, err => {\n  // handle error\n})\n```\n\n# Promise/A\nFor show how promise and deferred work, we create a new and simple promise and deferred object, so that you can easy understand it.\n## Promise Object\nHere try to extend EventEmitter module to explain how it work.\n`Promise.class.js`\n``` JavaScript\nclass Promise extends EventEmitter {\n  then(success, error, progress) {\n    if (typeof success === 'function') {\n      this.once('success', success)\n    }\n    if (typeof error === 'function') {\n      this.once('error', error)\n    }\n    if (typeof progress === 'progress') {\n      // Note, this function will be recall, so here defined the event use 'on'\n      this.on('progress', progress)\n    }\n  }\n}\n```\nHere you can see we defined three events after you pass these callback function into it through 'then' function.\nSo we defined the events, and we have to trigger it, so that we can execute these callbacks with the result.\n\nBelow, we defined the Deferred object.\n## Deferred Object\nHere we defined the Deferred, these functions just emit promise, so tell them we finished.\n`Deferred.class.js`\n``` JavaScript\nclass Deferred {\n  this.state = 'unsuccess'\n  this.promise = new Promise()\n\n  resolve(obj) {\n    this.state = 'success'\n    this.promise.emit('success', obj)\n  }\n  reject(obj) {\n    this.state = 'error'\n    this.promise.emit('error', obj)\n  }\n  progress(obj) {\n    this.state = 'progress'\n    this.promise.emit('progress', obj)\n  }\n}\n```\n\n\n## use Promise & Deferred\nTo implement this, we create a new Deferred, and we trigger deferred function (progress/end/error) when we finish specific action to tell Deferred that we finished.\nThen we get promise object, and then we can store it, and call it with callback in another file.\nSo we successful separate call async and get data in two files.\n``` JavaScript\nlet promisify = res => {\n  let deferred = new Deferred()\n  let result = ''\n\n  res.on('data', chunk => {\n    result += chunk\n    deferred.progress(result)\n  })\n  res.on('end', () => {\n    deferred.resolve(result)\n  })\n  res.on('error', () => {\n    deferred.reject()\n  })\n\n  return deferred.promise\n}\n\nglobal.result = promisify(res)\n\n\n// in another file, this just an example to pass the result to global, so we can easy get the result, in the production, you better to pass the result in other way.\nglobal.result.then((result) => {\n  // success\n}, (err) => {\n  // error\n}, (chunk) => {\n  // progress\n  console.log(chunk)\n})\n```\n\n## Deferred.all()\nDo some action after a several of asynchronous finished.\n`Deferred.class.js`\n``` JavaScript\nclass Deferred {\n  // ...\n\n  all(promises) {\n    let count = promises.length\n    let that = this\n    let results = []\n    promises.forEach((promise, i) => {\n      promise.then(data => {\n        count --\n        results[i] = data\n        if (count === 0) {\n          that.resolve(results)\n        }\n      })\n    }, err => {\n      that.reject(err)\n    })\n\n    return this.promise\n  }\n}\n```\n\n## Order Run asynchronous\nRun asynchronous in order\n`Deferred.class.js`\n``` JavaScript\nconst Promise = require('./promise.class')\n\nmodule.exports = class Deferred {\n  constructor() {\n    this.promise = new Promise()\n  }\n\n  resolve(data) {\n    let promise = this.promise\n    let handler\n    while(handler = promise.queue.shift()) {\n      if (handler && handler.resolve) {\n        let ret = handler.resolve(data)\n\n        // if there has next promise, then we interrupt current loop, and set next promise.queue equals current queue\n        if (ret && ret.isPromise) {\n          ret.queue = promise.queue\n          return\n        }\n      }\n    }\n  }\n\n  reject(err) {\n    let promise = this.promise\n    let handler\n    while(handler = promise.queue.shift()) {\n      if (handler && handler.reject) {\n        let ret = handler.reject(err)\n\n        // if there has next promise, then we interrupt current loop, and set next promise.queue equals current queue\n        if (ret && ret.isPromise) {\n          ret.queue = promise.queue\n          return\n        }\n      }\n    }\n  }\n\n  callback(str) {\n    let that = this\n    return (err, file) => {\n      if (err) {\n        return that.reject(err)\n      }\n      that.resolve(file)\n    }\n  }\n}\n```\n\n`promise.class.js`\n``` JavaScript\nmodule.exports = class Promise {\n  constructor() {\n    this.queue = []\n    this.isPromise = true\n  }\n\n  then(resolve, reject) {\n    let handler = {}\n    if (typeof resolve === 'function') {\n      handler.resolve = resolve\n    }\n    if (typeof reject === 'function') {\n      handler.reject = reject\n    }\n\n    this.queue.push(handler)\n    return this\n  }\n}\n```\n\n`app.js`\n``` JavaScript\nconst Deferred = require('./deferred.class')\nconst fs = require('fs')\n\nlet action1 = (file, encoding) => {\n  let deferred = new Deferred()\n  fs.readFile(file, encoding, deferred.callback())\n  return deferred.promise\n}\n\nlet action2 = (file, encoding) => {\n  let deferred = new Deferred()\n  fs.readFile(file, encoding, deferred.callback())\n  return deferred.promise\n}\n\naction1('./file1.txt', 'utf8').then(file1 => {\n  return action2(file1.trim(), 'utf8')\n}).then(file2 => {\n  console.log(file2)\n})\n```\n","slug":"Principle-of-Promise-Deferred","published":1,"updated":"2017-05-25T08:58:16.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj526dkb70002gklesyn5r3eq","content":"<h1 id=\"Super-simple-realize-separate-call-an-async-and-handle-result-in-two-files\"><a href=\"#Super-simple-realize-separate-call-an-async-and-handle-result-in-two-files\" class=\"headerlink\" title=\"Super simple realize separate call an async and handle result in two files.\"></a>Super simple realize separate call an async and handle result in two files.</h1><p>Assume we have a project base on jQuery, we have to separate call AJAX and handle result in another file.</p>\n<p>Most of the time, we handle the result with below.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.get(<span class=\"string\">'url'</span>, data =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">//handle data</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>But, sometimes, we don’t want to handle it in the moment. Maybe we just want to handle in another file. So we can do below.<br><code>request.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.get(<span class=\"string\">'url'</span>, data =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">window</span>.result(data)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><code>handle.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.result = <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// handle result</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>But, we most of the time, we are not just handle the success result. We also handle error, receiving data.<br>For example.</p>\n<p><code>request.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">'url'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"string\">'data'</span>,</div><div class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">'get'</span>,</div><div class=\"line\">  <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.deferrd.resolve(data)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.defered.error(err)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">complete</span>: <span class=\"function\"><span class=\"params\">notify</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.deferred.notify(<span class=\"string\">'complete'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><code>handle.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.deferred = &#123;</div><div class=\"line\">  <span class=\"comment\">//handle success</span></div><div class=\"line\">  resolve: <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//handle error</span></div><div class=\"line\">  error: <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(err)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//handle complete</span></div><div class=\"line\">  notify: <span class=\"function\"><span class=\"params\">msg</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(msg)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"use-jQuery-promise-deferred\"><a href=\"#use-jQuery-promise-deferred\" class=\"headerlink\" title=\"use jQuery promise/deferred\"></a>use jQuery promise/deferred</h1><p>Fortunately, jQuery already implement this, so we just have to do below.<br><code>request.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.promise = $.get(<span class=\"string\">'url'</span>)</div></pre></td></tr></table></figure></p>\n<p><code>handle.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.promise.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// handle success</span></div><div class=\"line\">&#125;, err =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// handle error</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h1 id=\"Promise-A\"><a href=\"#Promise-A\" class=\"headerlink\" title=\"Promise/A\"></a>Promise/A</h1><p>For show how promise and deferred work, we create a new and simple promise and deferred object, so that you can easy understand it.</p>\n<h2 id=\"Promise-Object\"><a href=\"#Promise-Object\" class=\"headerlink\" title=\"Promise Object\"></a>Promise Object</h2><p>Here try to extend EventEmitter module to explain how it work.<br><code>Promise.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> <span class=\"keyword\">extends</span> <span class=\"title\">EventEmitter</span> </span>&#123;</div><div class=\"line\">  then(success, error, progress) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> success === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.once(<span class=\"string\">'success'</span>, success)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> error === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.once(<span class=\"string\">'error'</span>, error)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> progress === <span class=\"string\">'progress'</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// Note, this function will be recall, so here defined the event use 'on'</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.on(<span class=\"string\">'progress'</span>, progress)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Here you can see we defined three events after you pass these callback function into it through ‘then’ function.<br>So we defined the events, and we have to trigger it, so that we can execute these callbacks with the result.</p>\n<p>Below, we defined the Deferred object.</p>\n<h2 id=\"Deferred-Object\"><a href=\"#Deferred-Object\" class=\"headerlink\" title=\"Deferred Object\"></a>Deferred Object</h2><p>Here we defined the Deferred, these functions just emit promise, so tell them we finished.<br><code>Deferred.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Deferred</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.state = <span class=\"string\">'unsuccess'</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>()</div><div class=\"line\"></div><div class=\"line\">  resolve(obj) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'success'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.promise.emit(<span class=\"string\">'success'</span>, obj)</div><div class=\"line\">  &#125;</div><div class=\"line\">  reject(obj) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'error'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.promise.emit(<span class=\"string\">'error'</span>, obj)</div><div class=\"line\">  &#125;</div><div class=\"line\">  progress(obj) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'progress'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.promise.emit(<span class=\"string\">'progress'</span>, obj)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"use-Promise-amp-Deferred\"><a href=\"#use-Promise-amp-Deferred\" class=\"headerlink\" title=\"use Promise &amp; Deferred\"></a>use Promise &amp; Deferred</h2><p>To implement this, we create a new Deferred, and we trigger deferred function (progress/end/error) when we finish specific action to tell Deferred that we finished.<br>Then we get promise object, and then we can store it, and call it with callback in another file.<br>So we successful separate call async and get data in two files.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> promisify = <span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> deferred = <span class=\"keyword\">new</span> Deferred()</div><div class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"string\">''</span></div><div class=\"line\"></div><div class=\"line\">  res.on(<span class=\"string\">'data'</span>, chunk =&gt; &#123;</div><div class=\"line\">    result += chunk</div><div class=\"line\">    deferred.progress(result)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  res.on(<span class=\"string\">'end'</span>, () =&gt; &#123;</div><div class=\"line\">    deferred.resolve(result)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  res.on(<span class=\"string\">'error'</span>, () =&gt; &#123;</div><div class=\"line\">    deferred.reject()</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> deferred.promise</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">global.result = promisify(res)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// in another file, this just an example to pass the result to global, so we can easy get the result, in the production, you better to pass the result in other way.</span></div><div class=\"line\">global.result.then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// success</span></div><div class=\"line\">&#125;, (err) =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// error</span></div><div class=\"line\">&#125;, (chunk) =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// progress</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(chunk)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h2 id=\"Deferred-all\"><a href=\"#Deferred-all\" class=\"headerlink\" title=\"Deferred.all()\"></a>Deferred.all()</h2><p>Do some action after a several of asynchronous finished.<br><code>Deferred.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Deferred</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">  all(promises) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> count = promises.length</div><div class=\"line\">    <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">let</span> results = []</div><div class=\"line\">    promises.forEach(<span class=\"function\">(<span class=\"params\">promise, i</span>) =&gt;</span> &#123;</div><div class=\"line\">      promise.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">        count --</div><div class=\"line\">        results[i] = data</div><div class=\"line\">        <span class=\"keyword\">if</span> (count === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          that.resolve(results)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;, err =&gt; &#123;</div><div class=\"line\">      that.reject(err)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.promise</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Order-Run-asynchronous\"><a href=\"#Order-Run-asynchronous\" class=\"headerlink\" title=\"Order Run asynchronous\"></a>Order Run asynchronous</h2><p>Run asynchronous in order<br><code>Deferred.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'./promise.class'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Deferred</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>()</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  resolve(data) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> promise = <span class=\"keyword\">this</span>.promise</div><div class=\"line\">    <span class=\"keyword\">let</span> handler</div><div class=\"line\">    <span class=\"keyword\">while</span>(handler = promise.queue.shift()) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (handler &amp;&amp; handler.resolve) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> ret = handler.resolve(data)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// if there has next promise, then we interrupt current loop, and set next promise.queue equals current queue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (ret &amp;&amp; ret.isPromise) &#123;</div><div class=\"line\">          ret.queue = promise.queue</div><div class=\"line\">          <span class=\"keyword\">return</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  reject(err) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> promise = <span class=\"keyword\">this</span>.promise</div><div class=\"line\">    <span class=\"keyword\">let</span> handler</div><div class=\"line\">    <span class=\"keyword\">while</span>(handler = promise.queue.shift()) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (handler &amp;&amp; handler.reject) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> ret = handler.reject(err)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// if there has next promise, then we interrupt current loop, and set next promise.queue equals current queue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (ret &amp;&amp; ret.isPromise) &#123;</div><div class=\"line\">          ret.queue = promise.queue</div><div class=\"line\">          <span class=\"keyword\">return</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  callback(str) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">err, file</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> that.reject(err)</div><div class=\"line\">      &#125;</div><div class=\"line\">      that.resolve(file)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>promise.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.queue = []</div><div class=\"line\">    <span class=\"keyword\">this</span>.isPromise = <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  then(resolve, reject) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> handler = &#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> resolve === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      handler.resolve = resolve</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reject === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      handler.reject = reject</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.queue.push(handler)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>app.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Deferred = <span class=\"built_in\">require</span>(<span class=\"string\">'./deferred.class'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> action1 = <span class=\"function\">(<span class=\"params\">file, encoding</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> deferred = <span class=\"keyword\">new</span> Deferred()</div><div class=\"line\">  fs.readFile(file, encoding, deferred.callback())</div><div class=\"line\">  <span class=\"keyword\">return</span> deferred.promise</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> action2 = <span class=\"function\">(<span class=\"params\">file, encoding</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> deferred = <span class=\"keyword\">new</span> Deferred()</div><div class=\"line\">  fs.readFile(file, encoding, deferred.callback())</div><div class=\"line\">  <span class=\"keyword\">return</span> deferred.promise</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">action1(<span class=\"string\">'./file1.txt'</span>, <span class=\"string\">'utf8'</span>).then(<span class=\"function\"><span class=\"params\">file1</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> action2(file1.trim(), <span class=\"string\">'utf8'</span>)</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">file2</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(file2)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Super-simple-realize-separate-call-an-async-and-handle-result-in-two-files\"><a href=\"#Super-simple-realize-separate-call-an-async-and-handle-result-in-two-files\" class=\"headerlink\" title=\"Super simple realize separate call an async and handle result in two files.\"></a>Super simple realize separate call an async and handle result in two files.</h1><p>Assume we have a project base on jQuery, we have to separate call AJAX and handle result in another file.</p>\n<p>Most of the time, we handle the result with below.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.get(<span class=\"string\">'url'</span>, data =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">//handle data</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>But, sometimes, we don’t want to handle it in the moment. Maybe we just want to handle in another file. So we can do below.<br><code>request.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.get(<span class=\"string\">'url'</span>, data =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">window</span>.result(data)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><code>handle.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.result = <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// handle result</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>But, we most of the time, we are not just handle the success result. We also handle error, receiving data.<br>For example.</p>\n<p><code>request.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">'url'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"string\">'data'</span>,</div><div class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">'get'</span>,</div><div class=\"line\">  <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.deferrd.resolve(data)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.defered.error(err)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">complete</span>: <span class=\"function\"><span class=\"params\">notify</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.deferred.notify(<span class=\"string\">'complete'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><code>handle.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.deferred = &#123;</div><div class=\"line\">  <span class=\"comment\">//handle success</span></div><div class=\"line\">  resolve: <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//handle error</span></div><div class=\"line\">  error: <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(err)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//handle complete</span></div><div class=\"line\">  notify: <span class=\"function\"><span class=\"params\">msg</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(msg)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"use-jQuery-promise-deferred\"><a href=\"#use-jQuery-promise-deferred\" class=\"headerlink\" title=\"use jQuery promise/deferred\"></a>use jQuery promise/deferred</h1><p>Fortunately, jQuery already implement this, so we just have to do below.<br><code>request.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.promise = $.get(<span class=\"string\">'url'</span>)</div></pre></td></tr></table></figure></p>\n<p><code>handle.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.promise.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// handle success</span></div><div class=\"line\">&#125;, err =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// handle error</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h1 id=\"Promise-A\"><a href=\"#Promise-A\" class=\"headerlink\" title=\"Promise/A\"></a>Promise/A</h1><p>For show how promise and deferred work, we create a new and simple promise and deferred object, so that you can easy understand it.</p>\n<h2 id=\"Promise-Object\"><a href=\"#Promise-Object\" class=\"headerlink\" title=\"Promise Object\"></a>Promise Object</h2><p>Here try to extend EventEmitter module to explain how it work.<br><code>Promise.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> <span class=\"keyword\">extends</span> <span class=\"title\">EventEmitter</span> </span>&#123;</div><div class=\"line\">  then(success, error, progress) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> success === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.once(<span class=\"string\">'success'</span>, success)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> error === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.once(<span class=\"string\">'error'</span>, error)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> progress === <span class=\"string\">'progress'</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// Note, this function will be recall, so here defined the event use 'on'</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.on(<span class=\"string\">'progress'</span>, progress)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Here you can see we defined three events after you pass these callback function into it through ‘then’ function.<br>So we defined the events, and we have to trigger it, so that we can execute these callbacks with the result.</p>\n<p>Below, we defined the Deferred object.</p>\n<h2 id=\"Deferred-Object\"><a href=\"#Deferred-Object\" class=\"headerlink\" title=\"Deferred Object\"></a>Deferred Object</h2><p>Here we defined the Deferred, these functions just emit promise, so tell them we finished.<br><code>Deferred.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Deferred</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.state = <span class=\"string\">'unsuccess'</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>()</div><div class=\"line\"></div><div class=\"line\">  resolve(obj) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'success'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.promise.emit(<span class=\"string\">'success'</span>, obj)</div><div class=\"line\">  &#125;</div><div class=\"line\">  reject(obj) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'error'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.promise.emit(<span class=\"string\">'error'</span>, obj)</div><div class=\"line\">  &#125;</div><div class=\"line\">  progress(obj) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'progress'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.promise.emit(<span class=\"string\">'progress'</span>, obj)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"use-Promise-amp-Deferred\"><a href=\"#use-Promise-amp-Deferred\" class=\"headerlink\" title=\"use Promise &amp; Deferred\"></a>use Promise &amp; Deferred</h2><p>To implement this, we create a new Deferred, and we trigger deferred function (progress/end/error) when we finish specific action to tell Deferred that we finished.<br>Then we get promise object, and then we can store it, and call it with callback in another file.<br>So we successful separate call async and get data in two files.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> promisify = <span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> deferred = <span class=\"keyword\">new</span> Deferred()</div><div class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"string\">''</span></div><div class=\"line\"></div><div class=\"line\">  res.on(<span class=\"string\">'data'</span>, chunk =&gt; &#123;</div><div class=\"line\">    result += chunk</div><div class=\"line\">    deferred.progress(result)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  res.on(<span class=\"string\">'end'</span>, () =&gt; &#123;</div><div class=\"line\">    deferred.resolve(result)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  res.on(<span class=\"string\">'error'</span>, () =&gt; &#123;</div><div class=\"line\">    deferred.reject()</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> deferred.promise</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">global.result = promisify(res)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// in another file, this just an example to pass the result to global, so we can easy get the result, in the production, you better to pass the result in other way.</span></div><div class=\"line\">global.result.then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// success</span></div><div class=\"line\">&#125;, (err) =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// error</span></div><div class=\"line\">&#125;, (chunk) =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// progress</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(chunk)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h2 id=\"Deferred-all\"><a href=\"#Deferred-all\" class=\"headerlink\" title=\"Deferred.all()\"></a>Deferred.all()</h2><p>Do some action after a several of asynchronous finished.<br><code>Deferred.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Deferred</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">  all(promises) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> count = promises.length</div><div class=\"line\">    <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">let</span> results = []</div><div class=\"line\">    promises.forEach(<span class=\"function\">(<span class=\"params\">promise, i</span>) =&gt;</span> &#123;</div><div class=\"line\">      promise.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">        count --</div><div class=\"line\">        results[i] = data</div><div class=\"line\">        <span class=\"keyword\">if</span> (count === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          that.resolve(results)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;, err =&gt; &#123;</div><div class=\"line\">      that.reject(err)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.promise</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Order-Run-asynchronous\"><a href=\"#Order-Run-asynchronous\" class=\"headerlink\" title=\"Order Run asynchronous\"></a>Order Run asynchronous</h2><p>Run asynchronous in order<br><code>Deferred.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'./promise.class'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Deferred</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>()</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  resolve(data) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> promise = <span class=\"keyword\">this</span>.promise</div><div class=\"line\">    <span class=\"keyword\">let</span> handler</div><div class=\"line\">    <span class=\"keyword\">while</span>(handler = promise.queue.shift()) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (handler &amp;&amp; handler.resolve) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> ret = handler.resolve(data)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// if there has next promise, then we interrupt current loop, and set next promise.queue equals current queue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (ret &amp;&amp; ret.isPromise) &#123;</div><div class=\"line\">          ret.queue = promise.queue</div><div class=\"line\">          <span class=\"keyword\">return</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  reject(err) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> promise = <span class=\"keyword\">this</span>.promise</div><div class=\"line\">    <span class=\"keyword\">let</span> handler</div><div class=\"line\">    <span class=\"keyword\">while</span>(handler = promise.queue.shift()) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (handler &amp;&amp; handler.reject) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> ret = handler.reject(err)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// if there has next promise, then we interrupt current loop, and set next promise.queue equals current queue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (ret &amp;&amp; ret.isPromise) &#123;</div><div class=\"line\">          ret.queue = promise.queue</div><div class=\"line\">          <span class=\"keyword\">return</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  callback(str) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">err, file</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> that.reject(err)</div><div class=\"line\">      &#125;</div><div class=\"line\">      that.resolve(file)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>promise.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.queue = []</div><div class=\"line\">    <span class=\"keyword\">this</span>.isPromise = <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  then(resolve, reject) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> handler = &#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> resolve === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      handler.resolve = resolve</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reject === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      handler.reject = reject</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.queue.push(handler)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>app.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Deferred = <span class=\"built_in\">require</span>(<span class=\"string\">'./deferred.class'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> action1 = <span class=\"function\">(<span class=\"params\">file, encoding</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> deferred = <span class=\"keyword\">new</span> Deferred()</div><div class=\"line\">  fs.readFile(file, encoding, deferred.callback())</div><div class=\"line\">  <span class=\"keyword\">return</span> deferred.promise</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> action2 = <span class=\"function\">(<span class=\"params\">file, encoding</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> deferred = <span class=\"keyword\">new</span> Deferred()</div><div class=\"line\">  fs.readFile(file, encoding, deferred.callback())</div><div class=\"line\">  <span class=\"keyword\">return</span> deferred.promise</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">action1(<span class=\"string\">'./file1.txt'</span>, <span class=\"string\">'utf8'</span>).then(<span class=\"function\"><span class=\"params\">file1</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> action2(file1.trim(), <span class=\"string\">'utf8'</span>)</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">file2</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(file2)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n"},{"title":"config ThinkPHP support memcache in php5","date":"2017-01-03T09:23:37.000Z","_content":"\nThis guide is base on Ubuntu & PHP5, so you have to install PHP5 in Ubunut first, but debian is okay.\n\n## Install Memcached\n``` shell\n$ sudo apt-get install memcached\n$ service memcached start\n```\n\nthen execute `ps aux | grep memcached` to check it is running.\n``` shell\n$ ps aux | grep memcached\n```\n\n## Install Memcache extension for PHP\nLet's go to https://pecl.php.net/package-stats.php.\n1. download memcache package from https://pecl.php.net/package-stats.php to your home directory.\n2. extract it.\n3. run phpize to gererate configure, make file.\n4. configure\n5. make\n6. make install\n\n``` shell\n$ wget https://pecl.php.net/get/memcache-2.2.7.tgz\n$ tar zxf memcache-2.2.7.tgz\n$ phpize\n$ ./configure\n$ sudo make\n$ sudo make install\n```\n\n## set php.ini\nappend extension=/path/to/memcache.so\n`php.ini`\n``` config\nextension=/path/to/memcache.so\n```\n\n## config ThinkPHP\nGo into Core/conf/conf.php\n\n``` php\n'DATA_CACHE_TYPE' => 'Memcache',\n'MEMCACHE_HOST' => 'localhost',\n'MEMCACHE_PORT' => '11211'\n```\n\n## restart php-fpm\n``` shell\n$ ps aux | grep memcached\n$ kill pid\n```\n","source":"_posts/config-ThinkPHP-support-memcache-in-php5.md","raw":"---\ntitle: config ThinkPHP support memcache in php5\ndate: 2017-01-03 17:23:37\ntags: [Linux, PHP, Memcache]\n---\n\nThis guide is base on Ubuntu & PHP5, so you have to install PHP5 in Ubunut first, but debian is okay.\n\n## Install Memcached\n``` shell\n$ sudo apt-get install memcached\n$ service memcached start\n```\n\nthen execute `ps aux | grep memcached` to check it is running.\n``` shell\n$ ps aux | grep memcached\n```\n\n## Install Memcache extension for PHP\nLet's go to https://pecl.php.net/package-stats.php.\n1. download memcache package from https://pecl.php.net/package-stats.php to your home directory.\n2. extract it.\n3. run phpize to gererate configure, make file.\n4. configure\n5. make\n6. make install\n\n``` shell\n$ wget https://pecl.php.net/get/memcache-2.2.7.tgz\n$ tar zxf memcache-2.2.7.tgz\n$ phpize\n$ ./configure\n$ sudo make\n$ sudo make install\n```\n\n## set php.ini\nappend extension=/path/to/memcache.so\n`php.ini`\n``` config\nextension=/path/to/memcache.so\n```\n\n## config ThinkPHP\nGo into Core/conf/conf.php\n\n``` php\n'DATA_CACHE_TYPE' => 'Memcache',\n'MEMCACHE_HOST' => 'localhost',\n'MEMCACHE_PORT' => '11211'\n```\n\n## restart php-fpm\n``` shell\n$ ps aux | grep memcached\n$ kill pid\n```\n","slug":"config-ThinkPHP-support-memcache-in-php5","published":1,"updated":"2017-05-25T09:45:45.813Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj526dkbh0005gklecef8til9","content":"<p>This guide is base on Ubuntu &amp; PHP5, so you have to install PHP5 in Ubunut first, but debian is okay.</p>\n<h2 id=\"Install-Memcached\"><a href=\"#Install-Memcached\" class=\"headerlink\" title=\"Install Memcached\"></a>Install Memcached</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> sudo apt-get install memcached</div><div class=\"line\"><span class=\"meta\">$</span> service memcached start</div></pre></td></tr></table></figure>\n<p>then execute <code>ps aux | grep memcached</code> to check it is running.<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> ps aux | grep memcached</div></pre></td></tr></table></figure></p>\n<h2 id=\"Install-Memcache-extension-for-PHP\"><a href=\"#Install-Memcache-extension-for-PHP\" class=\"headerlink\" title=\"Install Memcache extension for PHP\"></a>Install Memcache extension for PHP</h2><p>Let’s go to <a href=\"https://pecl.php.net/package-stats.php\" target=\"_blank\" rel=\"external\">https://pecl.php.net/package-stats.php</a>.</p>\n<ol>\n<li>download memcache package from <a href=\"https://pecl.php.net/package-stats.php\" target=\"_blank\" rel=\"external\">https://pecl.php.net/package-stats.php</a> to your home directory.</li>\n<li>extract it.</li>\n<li>run phpize to gererate configure, make file.</li>\n<li>configure</li>\n<li>make</li>\n<li>make install</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> wget https://pecl.php.net/get/memcache-2.2.7.tgz</div><div class=\"line\"><span class=\"meta\">$</span> tar zxf memcache-2.2.7.tgz</div><div class=\"line\"><span class=\"meta\">$</span> phpize</div><div class=\"line\"><span class=\"meta\">$</span> ./configure</div><div class=\"line\"><span class=\"meta\">$</span> sudo make</div><div class=\"line\"><span class=\"meta\">$</span> sudo make install</div></pre></td></tr></table></figure>\n<h2 id=\"set-php-ini\"><a href=\"#set-php-ini\" class=\"headerlink\" title=\"set php.ini\"></a>set php.ini</h2><p>append extension=/path/to/memcache.so<br><code>php.ini</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">extension=/path/to/memcache.so</div></pre></td></tr></table></figure></p>\n<h2 id=\"config-ThinkPHP\"><a href=\"#config-ThinkPHP\" class=\"headerlink\" title=\"config ThinkPHP\"></a>config ThinkPHP</h2><p>Go into Core/conf/conf.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'DATA_CACHE_TYPE'</span> =&gt; <span class=\"string\">'Memcache'</span>,</div><div class=\"line\"><span class=\"string\">'MEMCACHE_HOST'</span> =&gt; <span class=\"string\">'localhost'</span>,</div><div class=\"line\"><span class=\"string\">'MEMCACHE_PORT'</span> =&gt; <span class=\"string\">'11211'</span></div></pre></td></tr></table></figure>\n<h2 id=\"restart-php-fpm\"><a href=\"#restart-php-fpm\" class=\"headerlink\" title=\"restart php-fpm\"></a>restart php-fpm</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> ps aux | grep memcached</div><div class=\"line\"><span class=\"meta\">$</span> kill pid</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>This guide is base on Ubuntu &amp; PHP5, so you have to install PHP5 in Ubunut first, but debian is okay.</p>\n<h2 id=\"Install-Memcached\"><a href=\"#Install-Memcached\" class=\"headerlink\" title=\"Install Memcached\"></a>Install Memcached</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> sudo apt-get install memcached</div><div class=\"line\"><span class=\"meta\">$</span> service memcached start</div></pre></td></tr></table></figure>\n<p>then execute <code>ps aux | grep memcached</code> to check it is running.<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> ps aux | grep memcached</div></pre></td></tr></table></figure></p>\n<h2 id=\"Install-Memcache-extension-for-PHP\"><a href=\"#Install-Memcache-extension-for-PHP\" class=\"headerlink\" title=\"Install Memcache extension for PHP\"></a>Install Memcache extension for PHP</h2><p>Let’s go to <a href=\"https://pecl.php.net/package-stats.php\" target=\"_blank\" rel=\"external\">https://pecl.php.net/package-stats.php</a>.</p>\n<ol>\n<li>download memcache package from <a href=\"https://pecl.php.net/package-stats.php\" target=\"_blank\" rel=\"external\">https://pecl.php.net/package-stats.php</a> to your home directory.</li>\n<li>extract it.</li>\n<li>run phpize to gererate configure, make file.</li>\n<li>configure</li>\n<li>make</li>\n<li>make install</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> wget https://pecl.php.net/get/memcache-2.2.7.tgz</div><div class=\"line\"><span class=\"meta\">$</span> tar zxf memcache-2.2.7.tgz</div><div class=\"line\"><span class=\"meta\">$</span> phpize</div><div class=\"line\"><span class=\"meta\">$</span> ./configure</div><div class=\"line\"><span class=\"meta\">$</span> sudo make</div><div class=\"line\"><span class=\"meta\">$</span> sudo make install</div></pre></td></tr></table></figure>\n<h2 id=\"set-php-ini\"><a href=\"#set-php-ini\" class=\"headerlink\" title=\"set php.ini\"></a>set php.ini</h2><p>append extension=/path/to/memcache.so<br><code>php.ini</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">extension=/path/to/memcache.so</div></pre></td></tr></table></figure></p>\n<h2 id=\"config-ThinkPHP\"><a href=\"#config-ThinkPHP\" class=\"headerlink\" title=\"config ThinkPHP\"></a>config ThinkPHP</h2><p>Go into Core/conf/conf.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'DATA_CACHE_TYPE'</span> =&gt; <span class=\"string\">'Memcache'</span>,</div><div class=\"line\"><span class=\"string\">'MEMCACHE_HOST'</span> =&gt; <span class=\"string\">'localhost'</span>,</div><div class=\"line\"><span class=\"string\">'MEMCACHE_PORT'</span> =&gt; <span class=\"string\">'11211'</span></div></pre></td></tr></table></figure>\n<h2 id=\"restart-php-fpm\"><a href=\"#restart-php-fpm\" class=\"headerlink\" title=\"restart php-fpm\"></a>restart php-fpm</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> ps aux | grep memcached</div><div class=\"line\"><span class=\"meta\">$</span> kill pid</div></pre></td></tr></table></figure>\n"},{"title":"Node.js","date":"2016-12-08T12:35:41.000Z","_content":"\n## Perform query SQL for server during variety of requests with same result at specific time\nBrowser auto cache the result of AJAX for performance, but sometimes we get a special activity which a lot of user will access server for same data at specific time, if we don't handle it, the server may die. So we can use event queue to handle the problem.\n``` JavaScript\nlet proxy = new events.EventEmitter()\nlet status = 'ready'\nlet select = callback => {\n  proxy.once('selected', callback)  // bind event for every request\n  if (status === 'ready') {\n    status = 'pending'\n    db.select('sql', result => {      // if SQL query finished,\n      proxy.emit('selected', result)  // then trigger event\n      status = 'ready'                // and recover status\n    })\n  }\n}\n```\n\n\n## asynchronous\nAsynchronous is a good object, you can run I/O operate without wait it. It's a good way to improve the CPU usage rate.\nSometimes, we have multiple I/O operates, and these are associated, we want to do some action after all of the I/O operates finished. What can we do? You may do like this below.\n``` JavaScript\nfs.readFile(path, 'utf8', (err, template) => {\n  db.query(sql, (err, data) => {\n    l10n.get((err, resources) => {\n      // action\n    })\n  })\n})\n```\nIt's easy to do that right? But mention the callback, you run the action in the 3 level callbacks. Think about it, if you have to do 4 or 5 I/O operate, and you do action after all of theses finished. so you may write '}) }) }) }) })', seems painful to maintain the program.\n\nAnyway, we don't do above, that is so stupid. We can make these I/O operate in first level without put an operate in to another callback. Read below.\n\n``` JavaScript\nlet after = (times, callback) => {\n  let count = 0\n  let result = {}\n  return (key, value) => {\n    result[key] = value\n    count++\n    if (count === times) {\n      callback(results)\n    }\n  }\n}\n\n\nlet emitter = new events.Emitter()\nlet done = after(times, render)\n\nemitter.on('done', done)\nemitter.on('done', other)\n\nfs.readFile(template_path, 'utf8', (err, template) => {\n  emitter.emit('done', 'template', tempalte)\n})\ndb.query(sql, (err, data) => {\n  emitter.emit('done', 'data', data)\n})\nl10n.get((err, resources) => {\n  emitter.emit('done', 'resources', resources)\n})\n```\n> similar with `async` in waterfall\n\n## order asynchronous\nhttps://wuyuchang.github.io/2016/12/09/Principle-of-Promise-Deferred/\n\n## smooth\n``` JavaScript\nlet smooth = method => {\n  return () => {\n    let deferred = new Deferred()\n    let args = Array.prototype.slice.call(arguments, 0) // transform the arguments to an array\n    args.push(deferred.callback()) // push an parameter, [file, encode, deferred.callback()]\n    method.apply(null, args) // call method, fs.readFile(file, encode, deferred.callback())\n    return deferred.promise\n  }\n}\n```\n","source":"_posts/node-js.md","raw":"---\ntitle: Node.js\ndate: 2016-12-08 20:35:41\ntags: [Node.js, MongoDB, Performance]\n---\n\n## Perform query SQL for server during variety of requests with same result at specific time\nBrowser auto cache the result of AJAX for performance, but sometimes we get a special activity which a lot of user will access server for same data at specific time, if we don't handle it, the server may die. So we can use event queue to handle the problem.\n``` JavaScript\nlet proxy = new events.EventEmitter()\nlet status = 'ready'\nlet select = callback => {\n  proxy.once('selected', callback)  // bind event for every request\n  if (status === 'ready') {\n    status = 'pending'\n    db.select('sql', result => {      // if SQL query finished,\n      proxy.emit('selected', result)  // then trigger event\n      status = 'ready'                // and recover status\n    })\n  }\n}\n```\n\n\n## asynchronous\nAsynchronous is a good object, you can run I/O operate without wait it. It's a good way to improve the CPU usage rate.\nSometimes, we have multiple I/O operates, and these are associated, we want to do some action after all of the I/O operates finished. What can we do? You may do like this below.\n``` JavaScript\nfs.readFile(path, 'utf8', (err, template) => {\n  db.query(sql, (err, data) => {\n    l10n.get((err, resources) => {\n      // action\n    })\n  })\n})\n```\nIt's easy to do that right? But mention the callback, you run the action in the 3 level callbacks. Think about it, if you have to do 4 or 5 I/O operate, and you do action after all of theses finished. so you may write '}) }) }) }) })', seems painful to maintain the program.\n\nAnyway, we don't do above, that is so stupid. We can make these I/O operate in first level without put an operate in to another callback. Read below.\n\n``` JavaScript\nlet after = (times, callback) => {\n  let count = 0\n  let result = {}\n  return (key, value) => {\n    result[key] = value\n    count++\n    if (count === times) {\n      callback(results)\n    }\n  }\n}\n\n\nlet emitter = new events.Emitter()\nlet done = after(times, render)\n\nemitter.on('done', done)\nemitter.on('done', other)\n\nfs.readFile(template_path, 'utf8', (err, template) => {\n  emitter.emit('done', 'template', tempalte)\n})\ndb.query(sql, (err, data) => {\n  emitter.emit('done', 'data', data)\n})\nl10n.get((err, resources) => {\n  emitter.emit('done', 'resources', resources)\n})\n```\n> similar with `async` in waterfall\n\n## order asynchronous\nhttps://wuyuchang.github.io/2016/12/09/Principle-of-Promise-Deferred/\n\n## smooth\n``` JavaScript\nlet smooth = method => {\n  return () => {\n    let deferred = new Deferred()\n    let args = Array.prototype.slice.call(arguments, 0) // transform the arguments to an array\n    args.push(deferred.callback()) // push an parameter, [file, encode, deferred.callback()]\n    method.apply(null, args) // call method, fs.readFile(file, encode, deferred.callback())\n    return deferred.promise\n  }\n}\n```\n","slug":"node-js","published":1,"updated":"2017-05-25T08:36:16.116Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj526dkbl0006gkleuo5mcltk","content":"<h2 id=\"Perform-query-SQL-for-server-during-variety-of-requests-with-same-result-at-specific-time\"><a href=\"#Perform-query-SQL-for-server-during-variety-of-requests-with-same-result-at-specific-time\" class=\"headerlink\" title=\"Perform query SQL for server during variety of requests with same result at specific time\"></a>Perform query SQL for server during variety of requests with same result at specific time</h2><p>Browser auto cache the result of AJAX for performance, but sometimes we get a special activity which a lot of user will access server for same data at specific time, if we don’t handle it, the server may die. So we can use event queue to handle the problem.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> events.EventEmitter()</div><div class=\"line\"><span class=\"keyword\">let</span> status = <span class=\"string\">'ready'</span></div><div class=\"line\"><span class=\"keyword\">let</span> select = <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> &#123;</div><div class=\"line\">  proxy.once(<span class=\"string\">'selected'</span>, callback)  <span class=\"comment\">// bind event for every request</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (status === <span class=\"string\">'ready'</span>) &#123;</div><div class=\"line\">    status = <span class=\"string\">'pending'</span></div><div class=\"line\">    db.select(<span class=\"string\">'sql'</span>, result =&gt; &#123;      <span class=\"comment\">// if SQL query finished,</span></div><div class=\"line\">      proxy.emit(<span class=\"string\">'selected'</span>, result)  <span class=\"comment\">// then trigger event</span></div><div class=\"line\">      status = <span class=\"string\">'ready'</span>                <span class=\"comment\">// and recover status</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"asynchronous\"><a href=\"#asynchronous\" class=\"headerlink\" title=\"asynchronous\"></a>asynchronous</h2><p>Asynchronous is a good object, you can run I/O operate without wait it. It’s a good way to improve the CPU usage rate.<br>Sometimes, we have multiple I/O operates, and these are associated, we want to do some action after all of the I/O operates finished. What can we do? You may do like this below.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">fs.readFile(path, <span class=\"string\">'utf8'</span>, (err, template) =&gt; &#123;</div><div class=\"line\">  db.query(sql, (err, data) =&gt; &#123;</div><div class=\"line\">    l10n.get(<span class=\"function\">(<span class=\"params\">err, resources</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// action</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>It’s easy to do that right? But mention the callback, you run the action in the 3 level callbacks. Think about it, if you have to do 4 or 5 I/O operate, and you do action after all of theses finished. so you may write ‘}) }) }) }) })’, seems painful to maintain the program.</p>\n<p>Anyway, we don’t do above, that is so stupid. We can make these I/O operate in first level without put an operate in to another callback. Read below.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> after = <span class=\"function\">(<span class=\"params\">times, callback</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"keyword\">let</span> result = &#123;&#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">key, value</span>) =&gt;</span> &#123;</div><div class=\"line\">    result[key] = value</div><div class=\"line\">    count++</div><div class=\"line\">    <span class=\"keyword\">if</span> (count === times) &#123;</div><div class=\"line\">      callback(results)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> emitter = <span class=\"keyword\">new</span> events.Emitter()</div><div class=\"line\"><span class=\"keyword\">let</span> done = after(times, render)</div><div class=\"line\"></div><div class=\"line\">emitter.on(<span class=\"string\">'done'</span>, done)</div><div class=\"line\">emitter.on(<span class=\"string\">'done'</span>, other)</div><div class=\"line\"></div><div class=\"line\">fs.readFile(template_path, <span class=\"string\">'utf8'</span>, (err, template) =&gt; &#123;</div><div class=\"line\">  emitter.emit(<span class=\"string\">'done'</span>, <span class=\"string\">'template'</span>, tempalte)</div><div class=\"line\">&#125;)</div><div class=\"line\">db.query(sql, (err, data) =&gt; &#123;</div><div class=\"line\">  emitter.emit(<span class=\"string\">'done'</span>, <span class=\"string\">'data'</span>, data)</div><div class=\"line\">&#125;)</div><div class=\"line\">l10n.get(<span class=\"function\">(<span class=\"params\">err, resources</span>) =&gt;</span> &#123;</div><div class=\"line\">  emitter.emit(<span class=\"string\">'done'</span>, <span class=\"string\">'resources'</span>, resources)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>similar with <code>async</code> in waterfall</p>\n</blockquote>\n<h2 id=\"order-asynchronous\"><a href=\"#order-asynchronous\" class=\"headerlink\" title=\"order asynchronous\"></a>order asynchronous</h2><p><a href=\"https://wuyuchang.github.io/2016/12/09/Principle-of-Promise-Deferred/\">https://wuyuchang.github.io/2016/12/09/Principle-of-Promise-Deferred/</a></p>\n<h2 id=\"smooth\"><a href=\"#smooth\" class=\"headerlink\" title=\"smooth\"></a>smooth</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> smooth = <span class=\"function\"><span class=\"params\">method</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> deferred = <span class=\"keyword\">new</span> Deferred()</div><div class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">0</span>) <span class=\"comment\">// transform the arguments to an array</span></div><div class=\"line\">    args.push(deferred.callback()) <span class=\"comment\">// push an parameter, [file, encode, deferred.callback()]</span></div><div class=\"line\">    method.apply(<span class=\"literal\">null</span>, args) <span class=\"comment\">// call method, fs.readFile(file, encode, deferred.callback())</span></div><div class=\"line\">    <span class=\"keyword\">return</span> deferred.promise</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Perform-query-SQL-for-server-during-variety-of-requests-with-same-result-at-specific-time\"><a href=\"#Perform-query-SQL-for-server-during-variety-of-requests-with-same-result-at-specific-time\" class=\"headerlink\" title=\"Perform query SQL for server during variety of requests with same result at specific time\"></a>Perform query SQL for server during variety of requests with same result at specific time</h2><p>Browser auto cache the result of AJAX for performance, but sometimes we get a special activity which a lot of user will access server for same data at specific time, if we don’t handle it, the server may die. So we can use event queue to handle the problem.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> events.EventEmitter()</div><div class=\"line\"><span class=\"keyword\">let</span> status = <span class=\"string\">'ready'</span></div><div class=\"line\"><span class=\"keyword\">let</span> select = <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> &#123;</div><div class=\"line\">  proxy.once(<span class=\"string\">'selected'</span>, callback)  <span class=\"comment\">// bind event for every request</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (status === <span class=\"string\">'ready'</span>) &#123;</div><div class=\"line\">    status = <span class=\"string\">'pending'</span></div><div class=\"line\">    db.select(<span class=\"string\">'sql'</span>, result =&gt; &#123;      <span class=\"comment\">// if SQL query finished,</span></div><div class=\"line\">      proxy.emit(<span class=\"string\">'selected'</span>, result)  <span class=\"comment\">// then trigger event</span></div><div class=\"line\">      status = <span class=\"string\">'ready'</span>                <span class=\"comment\">// and recover status</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"asynchronous\"><a href=\"#asynchronous\" class=\"headerlink\" title=\"asynchronous\"></a>asynchronous</h2><p>Asynchronous is a good object, you can run I/O operate without wait it. It’s a good way to improve the CPU usage rate.<br>Sometimes, we have multiple I/O operates, and these are associated, we want to do some action after all of the I/O operates finished. What can we do? You may do like this below.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">fs.readFile(path, <span class=\"string\">'utf8'</span>, (err, template) =&gt; &#123;</div><div class=\"line\">  db.query(sql, (err, data) =&gt; &#123;</div><div class=\"line\">    l10n.get(<span class=\"function\">(<span class=\"params\">err, resources</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// action</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>It’s easy to do that right? But mention the callback, you run the action in the 3 level callbacks. Think about it, if you have to do 4 or 5 I/O operate, and you do action after all of theses finished. so you may write ‘}) }) }) }) })’, seems painful to maintain the program.</p>\n<p>Anyway, we don’t do above, that is so stupid. We can make these I/O operate in first level without put an operate in to another callback. Read below.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> after = <span class=\"function\">(<span class=\"params\">times, callback</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"keyword\">let</span> result = &#123;&#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">key, value</span>) =&gt;</span> &#123;</div><div class=\"line\">    result[key] = value</div><div class=\"line\">    count++</div><div class=\"line\">    <span class=\"keyword\">if</span> (count === times) &#123;</div><div class=\"line\">      callback(results)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> emitter = <span class=\"keyword\">new</span> events.Emitter()</div><div class=\"line\"><span class=\"keyword\">let</span> done = after(times, render)</div><div class=\"line\"></div><div class=\"line\">emitter.on(<span class=\"string\">'done'</span>, done)</div><div class=\"line\">emitter.on(<span class=\"string\">'done'</span>, other)</div><div class=\"line\"></div><div class=\"line\">fs.readFile(template_path, <span class=\"string\">'utf8'</span>, (err, template) =&gt; &#123;</div><div class=\"line\">  emitter.emit(<span class=\"string\">'done'</span>, <span class=\"string\">'template'</span>, tempalte)</div><div class=\"line\">&#125;)</div><div class=\"line\">db.query(sql, (err, data) =&gt; &#123;</div><div class=\"line\">  emitter.emit(<span class=\"string\">'done'</span>, <span class=\"string\">'data'</span>, data)</div><div class=\"line\">&#125;)</div><div class=\"line\">l10n.get(<span class=\"function\">(<span class=\"params\">err, resources</span>) =&gt;</span> &#123;</div><div class=\"line\">  emitter.emit(<span class=\"string\">'done'</span>, <span class=\"string\">'resources'</span>, resources)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<blockquote>\n<p>similar with <code>async</code> in waterfall</p>\n</blockquote>\n<h2 id=\"order-asynchronous\"><a href=\"#order-asynchronous\" class=\"headerlink\" title=\"order asynchronous\"></a>order asynchronous</h2><p><a href=\"https://wuyuchang.github.io/2016/12/09/Principle-of-Promise-Deferred/\">https://wuyuchang.github.io/2016/12/09/Principle-of-Promise-Deferred/</a></p>\n<h2 id=\"smooth\"><a href=\"#smooth\" class=\"headerlink\" title=\"smooth\"></a>smooth</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> smooth = <span class=\"function\"><span class=\"params\">method</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> deferred = <span class=\"keyword\">new</span> Deferred()</div><div class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">0</span>) <span class=\"comment\">// transform the arguments to an array</span></div><div class=\"line\">    args.push(deferred.callback()) <span class=\"comment\">// push an parameter, [file, encode, deferred.callback()]</span></div><div class=\"line\">    method.apply(<span class=\"literal\">null</span>, args) <span class=\"comment\">// call method, fs.readFile(file, encode, deferred.callback())</span></div><div class=\"line\">    <span class=\"keyword\">return</span> deferred.promise</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"Config web server with Nginx in Linux for beginner","_content":"\nWe use **Debian** to finish the demo.\nBoth of below are basic command line, If you are not familiar with command line in Linux, you should learn it first.\n\n## Update & Upgrade\n``` bash\n$ apt-get update\n$ apt-get upgrade\n```\nYou must curious what's difference between [update][apt-get] and [upgrade][apt-get].\n> **update**\nUsed to re-synchronize the package index files from their sources. The indexes of available packages are fetched from the location(s) specified in /etc/apt/sources.list(5). An update should always be performed before an upgrade or dist-upgrade.\n**upgrade**\nUsed to install the newest versions of all packages currently installed on the system from the sources enumerated in /etc/apt/sources.list(5). Packages currently installed with new versions available are retrieved and upgraded; under no circumstances are currently installed packages removed, nor are packages that are not already installed retrieved and installed. New versions of currently installed packages that cannot be upgraded without changing the install status of another package will be left at their current version. An update must be performed first so that apt-get knows that new versions of packages are available.\n\n[apt-get]: https://linux.die.net/man/8/apt-get\n\n## Htop, Vim & Screen\n``` bash\n$ apt-get install htop\n$ apt-get install vim\n$ apt-get install screen\n```\nThese packages can improve your effective.\n***htop:*** [htop][htop] command like [top][top] command, both of these are interactive process viewer for Unix systems. Its help you manage process and monitor resource easy. But [htop][htop] is more convenient than [top][top].\n> - In 'htop' you can scroll the list vertically and horizontally to see all processes and complete command lines.\n- In 'top' you are subject to a delay for each unassigned key you press (especially annoying when multi-key escape sequences are triggered by accident).\n- 'htop' starts faster ('top' seems to collect data for a while before displaying anything).\n- In 'htop' you don't need to type the process number to kill a process, in 'top' you do.\n- In 'htop' you don't need to type the process number or the priority value to renice a process, in 'top' you do.\n- 'htop' supports mouse operation, 'top' doesn't\n- 'top' is older, hence, more used and tested.\nFrom http://hisham.hm/htop/index.php?page=comparison\n\n***vim:*** [vim][vim] is almost a proper superset of [vi][vi], everything that is in vi is available in vim.\n\n***screen:***\n> 1. use multiple shell window from a single SSH session\n2. Keep a shell active even through network disruptions\n3. Disconnect and re-connect to a shell sessions from multiple locations\n4. Run a long running process without maintaining an active shell session\n\n**Usage**\nscreen uses the command `ctrl-a` that's the control key and a lowercase \"a\" as a signal to send commands to screen instead of the shell.\n*start*: `screen`\n*creating*: `Ctrl-a c`\n*switch*: `Ctrl-a n` for the next window or `Ctrl-a p` for the previous window.\n*detach*: `Ctrl-a d`\n*reattach*: `Ctrl-a r`\n*logging*: `Ctrl-a h`\n*lock*: `Ctrl-a x`\n*stop*: `Ctrl-a k`\n\n## Group & User\n``` bash\n$ groupadd\n$ groupdel\n$ useradd\n$ passwd\n$ usermod\n$ userdel\n```\n\n### useradd\nuser add will auto create group that the name same as user\n``` bash\n$ useradd chang # craete user \"chang\"\n$ useradd -d /data/projects chang # create user \"chang\" into /data/projects\n$ useradd -u 999 -g 998 chang # create user with 999 for user id and 998 for group id\n$ useradd -G admings,webadmin,developers chang #\n$ useradd -M chang # add user \"chang\" without home directory\n$ useradd -e 2017-01-01 chang # add user \"chang\" expire at 2017-01-02\n$ chage -l chang # show/change user or password expire date\n$ useradd -e 2017-01-01 -f 45 chang # password expire after 2017-01-01\n$ useradd -c \"Yuchang Wu\" chang # add user with \"Yuchang Wu\" infomation\n$ tail -1 /etc/passwd # print last 1 line of the file \"/etc/passwd\"\n```\n\n### the meaning of files that user and group saved\n- /etc/passwd – User account information.\n- /etc/shadow – Secure account information.\n- /etc/group – Group account information.\n- /etc/gshadow – Secure group account information.\n- /etc/login.defs – Shadow password suite configuration..\n\n/etc/passwd format:\nusername:password:uid:gid:userInfo:homeDirectory:shell\n\n/etc/group format:\ngroupname:password:gidd:groupMembers\n\n### usermod\nfor more detail, to below to see\n```bash\n$ usermod --help\n```\n``` bash\n$ usermod -G www chang # add www group to chang, Be careful, it will remove all existing groups that user belongs, so always add the '-a' with '-G' to append new groups\n$ usermod -G www -a chang\n```\n\n### chown\nchange file owner\n``` bash\n$ chown -hR www:www /home/www # chang the owner of /homw/www to www user and www group\n```\n\n## Nginx Install\nAs you know, you can install an application with few different methods, below we introduce three common methods to install Nginx.\n### Install from Debian repository\n``` bash\n$ apt-get install nginx\n```\nyou can verify the installation through:\n``` bash\n$ nginx -v\n```\nand you can verify which module you are install through:\n``` bash\n$ nginx -V  # Capital\n```\nand you will get the default configuration like:\n``` bash\nnginx version: nginx/1.6.2\nTLS SNI support enabled\nconfigure arguments: --with-cc-opt='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2' --with-ld-opt=-Wl,-z,relro --prefix=/usr/share/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/log/nginx/access.log --error-log-path=/var/log/nginx/error.log --lock-path=/var/lock/nginx.lock --pid-path=/run/nginx.pid --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-debug --with-pcre-jit --with-ipv6 --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --with-http_addition_module --with-http_dav_module --with-http_geoip_module --with-http_gzip_static_module --with-http_image_filter_module --with-http_spdy_module --with-http_sub_module --with-http_xslt_module --with-mail --with-mail_ssl_module --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-auth-pam --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-dav-ext-module --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-echo --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-upstream-fair --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/ngx_http_substitutions_filter_module\n```\n\n> Note: this type can not get the latest version of the NGINX.\n\n### Install from Nginx repository\n1. Download the key used to sign NGINX packages and repository to the apt program keyring and add it:\n``` bash\n$ wget http://nginx.org/keys/nginx_signing.key\n$ apt-key add nginx_signing.key\n```\n2. Add the \"sources\" from which NGINX Open Source packages can be obtained: open the */etc/apt/sources.list* file in any text editor, for example, vim:\n``` bash\n$ vim /etc/apt/sources.list\n```\n3. Append the lines to the file:\n``` bash\ndeb http://nginx.org/packages/mainline/debian/ codename nginx\ndeb-src http://nginx.org/packages/mainline/debian/ codename nginx\n```\n where:\n codename is a codename of a Debian release:\n<table> <thead> <tr> <th>Version</th> <th>Codename</th> <th>Supported Platforms</th> </tr> </thead> <tbody> <tr> <td>7.x</td> <td>wheezy</td> <td>x86_64,i386</td> </tr> <tr> <td>8.x</td> <td>jessie</td> <td>x86_64,i386</td> </tr> </tbody> </table>\n4. Install\n``` bash\n$ apt-get remove nginx-common\n$ apt-get update\n$ apt-get install nginx\n```\n5. list the default module that nginx installed\n``` bash\n$ nginx -V\n```\n ``` bash\nnginx version: nginx/1.11.6\nbuilt by gcc 4.9.2 (Debian 4.9.2-10)\nbuilt with OpenSSL 1.0.1t  3 May 2016\nTLS SNI support enabled\nconfigure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2' --with-ld-opt='-Wl,-z,relro -Wl,-z,now -Wl,--as-needed'\n\n```\nYou can see the latest version of the NGINX installed to your system.\n\n### Install from open sources\nAs you see, these above two types to install NGINX is non-configurable, these are pre-build, so they already configure with default value. you can't add or remove module and configure it. So if you want to add module or 3rd party module and apply latest security patches, I suggest you use this type to install NGINX.\n1. the PCRE lirary - required by NGINX core and Rewrite modules and provides support for regular expressions.\n``` bash\n$ wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.39.tar.gz\n$ tar -zxf pcre-8.39.tar.gz\n$ cd pcre-8.39\n$ ./configure\n$ make\n$ sudo make install\n```\n2. the zlib library - required by NGINX Gzip module for headers compression.\n``` bash\n$ wget http://zlib.net/zlib-1.2.8.tar.gz\n$ tar -zxf zlib-1.2.8.tar.gz\n$ cd zlib-1.2.8\n$ ./configure\n$ make\n$ sudo make install\n```\n3. the OpenSSL library - required by NGINX SSL modules to support the HTTPS protocol.\n``` bash\n$ wget http://www.openssl.org/source/openssl-1.0.2f.tar.gz\n$ tar -zxf openssl-1.0.2f.tar.gz\n$ cd openssl-1.0.2f\n$ ./configure darwin64-x86_64-cc --prefix=/usr\n$ make\n$ sudo make install\n```\n4. The header more nginx library - required by NGINX header more nginx module to change the response header information.\n``` bash\n$ wget https://codeload.github.com/openresty/headers-more-nginx-module/tar.gz/v0.32\n$ tar -zxf v0.32\n```\n5. download the NGINX sources\n``` bash\n$ wget http://nginx.org/download/nginx-1.10.2.tar.gz\n$ tar zxf nginx-1.10.2.tar.gz\n$ cd nginx-1.10.2\n```\n6. configure NGINX\nAdd above that you download module to NGINX, so you can use the module in NGINX.\n``` bash\n$ ./configure --prefix=/usr/local/nginx --sbin-path=/usr/local/nginx/nginx --conf-path=/usr/local/nginx/nginx.conf --pid-path=/usr/local/nginx/nginx.pid --with-pcre=../pcre-8.39 --with-zlib=../zlib-1.2.8 --with-http_ssl_module --add-module=../headers-more-nginx-module-0.32 --with-debug\n```\n7. link NGINX\nNow, you can run nginx with full path -- */usr/local/nginx/nginx*, and you can browse it with localhost in any browser. But seems not convenient to run nginx with full path every time, so we link the nginx from local to sbin that you can run it without fullpath, just run *nginx*.\n``` bash\n$ ln -s /usr/local/nginx/nginx /usr/sbin/nginx\n```\nNow you can run nginx with *nginx* command without fullpath.\n``` bash\n$ nginx -V\n```\n\n## Configure web\nNow, you can access webpage in browser with default page in NGINX via localhost. So, the nginx.conf path is put in where we set during we configure NGINX -- */usr/local/nginx/nginx.conf*.\nLet's look at the file via vim.\n``` bash\n$ cd /usr/local/nginx\n$ vim nginx.conf\n```\ngo to 35 line through `35 G`\n{% asset_img default_server.png NGINX default server %}\n\nWe drop the unnecessary code, and simplify the code and explain the meaning of the code to below:\n``` NGINX\nserver {\n    listen       80;                  # listening the port, so you access the server with 80 port, this is the default port, so you can access the web server without append :80\n    server_name  localhost;           # domain\n\n    location / {                      # route, NGINX will receive the URL path, and adapt it with the route, if the path is same with route, then go into the brace block\n        root   html;                  # basic directory where web server in, in this demo, it is in ./html\n        index  index.html index.htm;  # access it without append the file name if it is index.html or index.htm\n    }\n}\n```\n\nNow, we can configure a server by self, we make the root of the web server in */home/www*, and write index.html, then open the nginx.conf to configure the new web server \"Hello world\"\n``` bash\n$ mkdir /home/www\n$ echo \"Hello world\" > index.html\n$ cd /usr/local/nginx\n$ vim nginx.conf\n```\nWe append *include conf.d/&#42;.conf* into nginx.conf at last second line. so we can add the server configure without pollute the origin configure. It will auto add all of the file that have .conf extension into *nginx.conf*.\n``` nginx\nserver {\n  listen 8080;\n  server_name localhost;\n  location / {\n    root /home/www;\n    index index.html index.htm;\n  }\n}\n```\nThen we reload the nginx server with:\n``` bash\n$ nginx -s reload\n```\nNow, you can access www. *http://localhost:8080/*\n\n## change response header\nWe already install the headers-more-nginx-module, so we can configure the response header. Before we configure it, let's open the developers-tool in google-chrome, and look at the network request, we can get the response headers:\n{% asset_img response_header.png response headers %}\nFor some security reason, we don't want to show Server information to client, so we can add the configuration to *hello_world.conf*.\n``` nginx\nmore_set_headers \"Server\" \"\"; # add this\nserver {\n  listen 8080;\n  server_name localhost;\n  location / {\n    root /home/www;\n    index index.html index.htm;\n  }\n}\n```\nThen reload the nginx server:\n``` bash\n$ nginx -s reload\n```\nThen we reload the page in browser, and open the network, the Server information already drop.\n{% asset_img response_header_safe.png response headers without server information %}\n\nNow, your nginx server is more safer than before you add the server information into response headers.\n\nFor more detail about the headers-more-nginx-module, see: https://github.com/openresty/headers-more-nginx-module\n\n## add module\nIf you want to add some module into NGINX that was installed, you have to download the module, then reconfigure NGINX with the module and compile it.\n## Tip\n``` bash\n$ man order # to see detail of the order\n$ apt-cache search package # search package\n$ cat /etc/passwd # show all users\n$ getent passwd # show all users\n$ getent group # show all groups\n$ getent group | grep username\n$ id username # show username information\n$ groups username # show which groups does username have\n$ dpkg-reconfigure tzdate # change timezone\n```\n\n> Ref:\n*screen* https://www.rackaid.com/blog/linux-screen-tutorial-and-how-to/#starting\n*useradd* http://www.tecmint.com/add-users-in-linux/\n*usermod* http://www.tecmint.com/usermod-command-examples/\n*permission* http://www.tecmint.com/manage-users-and-groups-in-linux/\n*nginx* https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/\n*headers-more-nginx-module* https://github.com/openresty/headers-more-nginx-module\n[htop]: https://hisham.hm/htop/index.php\n[top]: https://linux.die.net/man/1/top\n[vim]: http://www.vim.org/\n[vi]: http://ex-vi.sourceforge.net/\n","source":"_posts/web-server.md","raw":"---\ntitle: Config web server with Nginx in Linux for beginner\ntags: [Linux, Nginx]\n---\n\nWe use **Debian** to finish the demo.\nBoth of below are basic command line, If you are not familiar with command line in Linux, you should learn it first.\n\n## Update & Upgrade\n``` bash\n$ apt-get update\n$ apt-get upgrade\n```\nYou must curious what's difference between [update][apt-get] and [upgrade][apt-get].\n> **update**\nUsed to re-synchronize the package index files from their sources. The indexes of available packages are fetched from the location(s) specified in /etc/apt/sources.list(5). An update should always be performed before an upgrade or dist-upgrade.\n**upgrade**\nUsed to install the newest versions of all packages currently installed on the system from the sources enumerated in /etc/apt/sources.list(5). Packages currently installed with new versions available are retrieved and upgraded; under no circumstances are currently installed packages removed, nor are packages that are not already installed retrieved and installed. New versions of currently installed packages that cannot be upgraded without changing the install status of another package will be left at their current version. An update must be performed first so that apt-get knows that new versions of packages are available.\n\n[apt-get]: https://linux.die.net/man/8/apt-get\n\n## Htop, Vim & Screen\n``` bash\n$ apt-get install htop\n$ apt-get install vim\n$ apt-get install screen\n```\nThese packages can improve your effective.\n***htop:*** [htop][htop] command like [top][top] command, both of these are interactive process viewer for Unix systems. Its help you manage process and monitor resource easy. But [htop][htop] is more convenient than [top][top].\n> - In 'htop' you can scroll the list vertically and horizontally to see all processes and complete command lines.\n- In 'top' you are subject to a delay for each unassigned key you press (especially annoying when multi-key escape sequences are triggered by accident).\n- 'htop' starts faster ('top' seems to collect data for a while before displaying anything).\n- In 'htop' you don't need to type the process number to kill a process, in 'top' you do.\n- In 'htop' you don't need to type the process number or the priority value to renice a process, in 'top' you do.\n- 'htop' supports mouse operation, 'top' doesn't\n- 'top' is older, hence, more used and tested.\nFrom http://hisham.hm/htop/index.php?page=comparison\n\n***vim:*** [vim][vim] is almost a proper superset of [vi][vi], everything that is in vi is available in vim.\n\n***screen:***\n> 1. use multiple shell window from a single SSH session\n2. Keep a shell active even through network disruptions\n3. Disconnect and re-connect to a shell sessions from multiple locations\n4. Run a long running process without maintaining an active shell session\n\n**Usage**\nscreen uses the command `ctrl-a` that's the control key and a lowercase \"a\" as a signal to send commands to screen instead of the shell.\n*start*: `screen`\n*creating*: `Ctrl-a c`\n*switch*: `Ctrl-a n` for the next window or `Ctrl-a p` for the previous window.\n*detach*: `Ctrl-a d`\n*reattach*: `Ctrl-a r`\n*logging*: `Ctrl-a h`\n*lock*: `Ctrl-a x`\n*stop*: `Ctrl-a k`\n\n## Group & User\n``` bash\n$ groupadd\n$ groupdel\n$ useradd\n$ passwd\n$ usermod\n$ userdel\n```\n\n### useradd\nuser add will auto create group that the name same as user\n``` bash\n$ useradd chang # craete user \"chang\"\n$ useradd -d /data/projects chang # create user \"chang\" into /data/projects\n$ useradd -u 999 -g 998 chang # create user with 999 for user id and 998 for group id\n$ useradd -G admings,webadmin,developers chang #\n$ useradd -M chang # add user \"chang\" without home directory\n$ useradd -e 2017-01-01 chang # add user \"chang\" expire at 2017-01-02\n$ chage -l chang # show/change user or password expire date\n$ useradd -e 2017-01-01 -f 45 chang # password expire after 2017-01-01\n$ useradd -c \"Yuchang Wu\" chang # add user with \"Yuchang Wu\" infomation\n$ tail -1 /etc/passwd # print last 1 line of the file \"/etc/passwd\"\n```\n\n### the meaning of files that user and group saved\n- /etc/passwd – User account information.\n- /etc/shadow – Secure account information.\n- /etc/group – Group account information.\n- /etc/gshadow – Secure group account information.\n- /etc/login.defs – Shadow password suite configuration..\n\n/etc/passwd format:\nusername:password:uid:gid:userInfo:homeDirectory:shell\n\n/etc/group format:\ngroupname:password:gidd:groupMembers\n\n### usermod\nfor more detail, to below to see\n```bash\n$ usermod --help\n```\n``` bash\n$ usermod -G www chang # add www group to chang, Be careful, it will remove all existing groups that user belongs, so always add the '-a' with '-G' to append new groups\n$ usermod -G www -a chang\n```\n\n### chown\nchange file owner\n``` bash\n$ chown -hR www:www /home/www # chang the owner of /homw/www to www user and www group\n```\n\n## Nginx Install\nAs you know, you can install an application with few different methods, below we introduce three common methods to install Nginx.\n### Install from Debian repository\n``` bash\n$ apt-get install nginx\n```\nyou can verify the installation through:\n``` bash\n$ nginx -v\n```\nand you can verify which module you are install through:\n``` bash\n$ nginx -V  # Capital\n```\nand you will get the default configuration like:\n``` bash\nnginx version: nginx/1.6.2\nTLS SNI support enabled\nconfigure arguments: --with-cc-opt='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2' --with-ld-opt=-Wl,-z,relro --prefix=/usr/share/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/log/nginx/access.log --error-log-path=/var/log/nginx/error.log --lock-path=/var/lock/nginx.lock --pid-path=/run/nginx.pid --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-debug --with-pcre-jit --with-ipv6 --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --with-http_addition_module --with-http_dav_module --with-http_geoip_module --with-http_gzip_static_module --with-http_image_filter_module --with-http_spdy_module --with-http_sub_module --with-http_xslt_module --with-mail --with-mail_ssl_module --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-auth-pam --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-dav-ext-module --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-echo --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-upstream-fair --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/ngx_http_substitutions_filter_module\n```\n\n> Note: this type can not get the latest version of the NGINX.\n\n### Install from Nginx repository\n1. Download the key used to sign NGINX packages and repository to the apt program keyring and add it:\n``` bash\n$ wget http://nginx.org/keys/nginx_signing.key\n$ apt-key add nginx_signing.key\n```\n2. Add the \"sources\" from which NGINX Open Source packages can be obtained: open the */etc/apt/sources.list* file in any text editor, for example, vim:\n``` bash\n$ vim /etc/apt/sources.list\n```\n3. Append the lines to the file:\n``` bash\ndeb http://nginx.org/packages/mainline/debian/ codename nginx\ndeb-src http://nginx.org/packages/mainline/debian/ codename nginx\n```\n where:\n codename is a codename of a Debian release:\n<table> <thead> <tr> <th>Version</th> <th>Codename</th> <th>Supported Platforms</th> </tr> </thead> <tbody> <tr> <td>7.x</td> <td>wheezy</td> <td>x86_64,i386</td> </tr> <tr> <td>8.x</td> <td>jessie</td> <td>x86_64,i386</td> </tr> </tbody> </table>\n4. Install\n``` bash\n$ apt-get remove nginx-common\n$ apt-get update\n$ apt-get install nginx\n```\n5. list the default module that nginx installed\n``` bash\n$ nginx -V\n```\n ``` bash\nnginx version: nginx/1.11.6\nbuilt by gcc 4.9.2 (Debian 4.9.2-10)\nbuilt with OpenSSL 1.0.1t  3 May 2016\nTLS SNI support enabled\nconfigure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2' --with-ld-opt='-Wl,-z,relro -Wl,-z,now -Wl,--as-needed'\n\n```\nYou can see the latest version of the NGINX installed to your system.\n\n### Install from open sources\nAs you see, these above two types to install NGINX is non-configurable, these are pre-build, so they already configure with default value. you can't add or remove module and configure it. So if you want to add module or 3rd party module and apply latest security patches, I suggest you use this type to install NGINX.\n1. the PCRE lirary - required by NGINX core and Rewrite modules and provides support for regular expressions.\n``` bash\n$ wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.39.tar.gz\n$ tar -zxf pcre-8.39.tar.gz\n$ cd pcre-8.39\n$ ./configure\n$ make\n$ sudo make install\n```\n2. the zlib library - required by NGINX Gzip module for headers compression.\n``` bash\n$ wget http://zlib.net/zlib-1.2.8.tar.gz\n$ tar -zxf zlib-1.2.8.tar.gz\n$ cd zlib-1.2.8\n$ ./configure\n$ make\n$ sudo make install\n```\n3. the OpenSSL library - required by NGINX SSL modules to support the HTTPS protocol.\n``` bash\n$ wget http://www.openssl.org/source/openssl-1.0.2f.tar.gz\n$ tar -zxf openssl-1.0.2f.tar.gz\n$ cd openssl-1.0.2f\n$ ./configure darwin64-x86_64-cc --prefix=/usr\n$ make\n$ sudo make install\n```\n4. The header more nginx library - required by NGINX header more nginx module to change the response header information.\n``` bash\n$ wget https://codeload.github.com/openresty/headers-more-nginx-module/tar.gz/v0.32\n$ tar -zxf v0.32\n```\n5. download the NGINX sources\n``` bash\n$ wget http://nginx.org/download/nginx-1.10.2.tar.gz\n$ tar zxf nginx-1.10.2.tar.gz\n$ cd nginx-1.10.2\n```\n6. configure NGINX\nAdd above that you download module to NGINX, so you can use the module in NGINX.\n``` bash\n$ ./configure --prefix=/usr/local/nginx --sbin-path=/usr/local/nginx/nginx --conf-path=/usr/local/nginx/nginx.conf --pid-path=/usr/local/nginx/nginx.pid --with-pcre=../pcre-8.39 --with-zlib=../zlib-1.2.8 --with-http_ssl_module --add-module=../headers-more-nginx-module-0.32 --with-debug\n```\n7. link NGINX\nNow, you can run nginx with full path -- */usr/local/nginx/nginx*, and you can browse it with localhost in any browser. But seems not convenient to run nginx with full path every time, so we link the nginx from local to sbin that you can run it without fullpath, just run *nginx*.\n``` bash\n$ ln -s /usr/local/nginx/nginx /usr/sbin/nginx\n```\nNow you can run nginx with *nginx* command without fullpath.\n``` bash\n$ nginx -V\n```\n\n## Configure web\nNow, you can access webpage in browser with default page in NGINX via localhost. So, the nginx.conf path is put in where we set during we configure NGINX -- */usr/local/nginx/nginx.conf*.\nLet's look at the file via vim.\n``` bash\n$ cd /usr/local/nginx\n$ vim nginx.conf\n```\ngo to 35 line through `35 G`\n{% asset_img default_server.png NGINX default server %}\n\nWe drop the unnecessary code, and simplify the code and explain the meaning of the code to below:\n``` NGINX\nserver {\n    listen       80;                  # listening the port, so you access the server with 80 port, this is the default port, so you can access the web server without append :80\n    server_name  localhost;           # domain\n\n    location / {                      # route, NGINX will receive the URL path, and adapt it with the route, if the path is same with route, then go into the brace block\n        root   html;                  # basic directory where web server in, in this demo, it is in ./html\n        index  index.html index.htm;  # access it without append the file name if it is index.html or index.htm\n    }\n}\n```\n\nNow, we can configure a server by self, we make the root of the web server in */home/www*, and write index.html, then open the nginx.conf to configure the new web server \"Hello world\"\n``` bash\n$ mkdir /home/www\n$ echo \"Hello world\" > index.html\n$ cd /usr/local/nginx\n$ vim nginx.conf\n```\nWe append *include conf.d/&#42;.conf* into nginx.conf at last second line. so we can add the server configure without pollute the origin configure. It will auto add all of the file that have .conf extension into *nginx.conf*.\n``` nginx\nserver {\n  listen 8080;\n  server_name localhost;\n  location / {\n    root /home/www;\n    index index.html index.htm;\n  }\n}\n```\nThen we reload the nginx server with:\n``` bash\n$ nginx -s reload\n```\nNow, you can access www. *http://localhost:8080/*\n\n## change response header\nWe already install the headers-more-nginx-module, so we can configure the response header. Before we configure it, let's open the developers-tool in google-chrome, and look at the network request, we can get the response headers:\n{% asset_img response_header.png response headers %}\nFor some security reason, we don't want to show Server information to client, so we can add the configuration to *hello_world.conf*.\n``` nginx\nmore_set_headers \"Server\" \"\"; # add this\nserver {\n  listen 8080;\n  server_name localhost;\n  location / {\n    root /home/www;\n    index index.html index.htm;\n  }\n}\n```\nThen reload the nginx server:\n``` bash\n$ nginx -s reload\n```\nThen we reload the page in browser, and open the network, the Server information already drop.\n{% asset_img response_header_safe.png response headers without server information %}\n\nNow, your nginx server is more safer than before you add the server information into response headers.\n\nFor more detail about the headers-more-nginx-module, see: https://github.com/openresty/headers-more-nginx-module\n\n## add module\nIf you want to add some module into NGINX that was installed, you have to download the module, then reconfigure NGINX with the module and compile it.\n## Tip\n``` bash\n$ man order # to see detail of the order\n$ apt-cache search package # search package\n$ cat /etc/passwd # show all users\n$ getent passwd # show all users\n$ getent group # show all groups\n$ getent group | grep username\n$ id username # show username information\n$ groups username # show which groups does username have\n$ dpkg-reconfigure tzdate # change timezone\n```\n\n> Ref:\n*screen* https://www.rackaid.com/blog/linux-screen-tutorial-and-how-to/#starting\n*useradd* http://www.tecmint.com/add-users-in-linux/\n*usermod* http://www.tecmint.com/usermod-command-examples/\n*permission* http://www.tecmint.com/manage-users-and-groups-in-linux/\n*nginx* https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/\n*headers-more-nginx-module* https://github.com/openresty/headers-more-nginx-module\n[htop]: https://hisham.hm/htop/index.php\n[top]: https://linux.die.net/man/1/top\n[vim]: http://www.vim.org/\n[vi]: http://ex-vi.sourceforge.net/\n","slug":"web-server","published":1,"date":"2017-05-23T03:08:22.349Z","updated":"2017-05-25T09:46:38.934Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj526dkbn0007gkle2oc1kh6i","content":"<p>We use <strong>Debian</strong> to finish the demo.<br>Both of below are basic command line, If you are not familiar with command line in Linux, you should learn it first.</p>\n<h2 id=\"Update-amp-Upgrade\"><a href=\"#Update-amp-Upgrade\" class=\"headerlink\" title=\"Update &amp; Upgrade\"></a>Update &amp; Upgrade</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apt-get update</div><div class=\"line\">$ apt-get upgrade</div></pre></td></tr></table></figure>\n<p>You must curious what’s difference between <a href=\"https://linux.die.net/man/8/apt-get\" target=\"_blank\" rel=\"external\">update</a> and <a href=\"https://linux.die.net/man/8/apt-get\" target=\"_blank\" rel=\"external\">upgrade</a>.</p>\n<blockquote>\n<p><strong>update</strong><br>Used to re-synchronize the package index files from their sources. The indexes of available packages are fetched from the location(s) specified in /etc/apt/sources.list(5). An update should always be performed before an upgrade or dist-upgrade.<br><strong>upgrade</strong><br>Used to install the newest versions of all packages currently installed on the system from the sources enumerated in /etc/apt/sources.list(5). Packages currently installed with new versions available are retrieved and upgraded; under no circumstances are currently installed packages removed, nor are packages that are not already installed retrieved and installed. New versions of currently installed packages that cannot be upgraded without changing the install status of another package will be left at their current version. An update must be performed first so that apt-get knows that new versions of packages are available.</p>\n</blockquote>\n<h2 id=\"Htop-Vim-amp-Screen\"><a href=\"#Htop-Vim-amp-Screen\" class=\"headerlink\" title=\"Htop, Vim &amp; Screen\"></a>Htop, Vim &amp; Screen</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apt-get install htop</div><div class=\"line\">$ apt-get install vim</div><div class=\"line\">$ apt-get install screen</div></pre></td></tr></table></figure>\n<p>These packages can improve your effective.<br><strong><em>htop:</em></strong> <a href=\"https://hisham.hm/htop/index.php\" target=\"_blank\" rel=\"external\">htop</a> command like <a href=\"https://linux.die.net/man/1/top\" target=\"_blank\" rel=\"external\">top</a> command, both of these are interactive process viewer for Unix systems. Its help you manage process and monitor resource easy. But <a href=\"https://hisham.hm/htop/index.php\" target=\"_blank\" rel=\"external\">htop</a> is more convenient than <a href=\"https://linux.die.net/man/1/top\" target=\"_blank\" rel=\"external\">top</a>.</p>\n<blockquote>\n<ul>\n<li>In ‘htop’ you can scroll the list vertically and horizontally to see all processes and complete command lines.</li>\n<li>In ‘top’ you are subject to a delay for each unassigned key you press (especially annoying when multi-key escape sequences are triggered by accident).</li>\n<li>‘htop’ starts faster (‘top’ seems to collect data for a while before displaying anything).</li>\n<li>In ‘htop’ you don’t need to type the process number to kill a process, in ‘top’ you do.</li>\n<li>In ‘htop’ you don’t need to type the process number or the priority value to renice a process, in ‘top’ you do.</li>\n<li>‘htop’ supports mouse operation, ‘top’ doesn’t</li>\n<li>‘top’ is older, hence, more used and tested.<br>From <a href=\"http://hisham.hm/htop/index.php?page=comparison\" target=\"_blank\" rel=\"external\">http://hisham.hm/htop/index.php?page=comparison</a></li>\n</ul>\n</blockquote>\n<p><strong><em>vim:</em></strong> <a href=\"http://www.vim.org/\" target=\"_blank\" rel=\"external\">vim</a> is almost a proper superset of <a href=\"http://ex-vi.sourceforge.net/\" target=\"_blank\" rel=\"external\">vi</a>, everything that is in vi is available in vim.</p>\n<p><strong><em>screen:</em></strong></p>\n<blockquote>\n<ol>\n<li>use multiple shell window from a single SSH session</li>\n<li>Keep a shell active even through network disruptions</li>\n<li>Disconnect and re-connect to a shell sessions from multiple locations</li>\n<li>Run a long running process without maintaining an active shell session</li>\n</ol>\n</blockquote>\n<p><strong>Usage</strong><br>screen uses the command <code>ctrl-a</code> that’s the control key and a lowercase “a” as a signal to send commands to screen instead of the shell.<br><em>start</em>: <code>screen</code><br><em>creating</em>: <code>Ctrl-a c</code><br><em>switch</em>: <code>Ctrl-a n</code> for the next window or <code>Ctrl-a p</code> for the previous window.<br><em>detach</em>: <code>Ctrl-a d</code><br><em>reattach</em>: <code>Ctrl-a r</code><br><em>logging</em>: <code>Ctrl-a h</code><br><em>lock</em>: <code>Ctrl-a x</code><br><em>stop</em>: <code>Ctrl-a k</code></p>\n<h2 id=\"Group-amp-User\"><a href=\"#Group-amp-User\" class=\"headerlink\" title=\"Group &amp; User\"></a>Group &amp; User</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ groupadd</div><div class=\"line\">$ groupdel</div><div class=\"line\">$ useradd</div><div class=\"line\">$ passwd</div><div class=\"line\">$ usermod</div><div class=\"line\">$ userdel</div></pre></td></tr></table></figure>\n<h3 id=\"useradd\"><a href=\"#useradd\" class=\"headerlink\" title=\"useradd\"></a>useradd</h3><p>user add will auto create group that the name same as user<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ useradd chang <span class=\"comment\"># craete user \"chang\"</span></div><div class=\"line\">$ useradd <span class=\"_\">-d</span> /data/projects chang <span class=\"comment\"># create user \"chang\" into /data/projects</span></div><div class=\"line\">$ useradd -u 999 -g 998 chang <span class=\"comment\"># create user with 999 for user id and 998 for group id</span></div><div class=\"line\">$ useradd -G admings,webadmin,developers chang <span class=\"comment\">#</span></div><div class=\"line\">$ useradd -M chang <span class=\"comment\"># add user \"chang\" without home directory</span></div><div class=\"line\">$ useradd <span class=\"_\">-e</span> 2017-01-01 chang <span class=\"comment\"># add user \"chang\" expire at 2017-01-02</span></div><div class=\"line\">$ chage <span class=\"_\">-l</span> chang <span class=\"comment\"># show/change user or password expire date</span></div><div class=\"line\">$ useradd <span class=\"_\">-e</span> 2017-01-01 <span class=\"_\">-f</span> 45 chang <span class=\"comment\"># password expire after 2017-01-01</span></div><div class=\"line\">$ useradd -c <span class=\"string\">\"Yuchang Wu\"</span> chang <span class=\"comment\"># add user with \"Yuchang Wu\" infomation</span></div><div class=\"line\">$ tail -1 /etc/passwd <span class=\"comment\"># print last 1 line of the file \"/etc/passwd\"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"the-meaning-of-files-that-user-and-group-saved\"><a href=\"#the-meaning-of-files-that-user-and-group-saved\" class=\"headerlink\" title=\"the meaning of files that user and group saved\"></a>the meaning of files that user and group saved</h3><ul>\n<li>/etc/passwd – User account information.</li>\n<li>/etc/shadow – Secure account information.</li>\n<li>/etc/group – Group account information.</li>\n<li>/etc/gshadow – Secure group account information.</li>\n<li>/etc/login.defs – Shadow password suite configuration..</li>\n</ul>\n<p>/etc/passwd format:<br>username:password:uid:gid:userInfo:homeDirectory:shell</p>\n<p>/etc/group format:<br>groupname:password:gidd:groupMembers</p>\n<h3 id=\"usermod\"><a href=\"#usermod\" class=\"headerlink\" title=\"usermod\"></a>usermod</h3><p>for more detail, to below to see<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ usermod --help</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ usermod -G www chang <span class=\"comment\"># add www group to chang, Be careful, it will remove all existing groups that user belongs, so always add the '-a' with '-G' to append new groups</span></div><div class=\"line\">$ usermod -G www <span class=\"_\">-a</span> chang</div></pre></td></tr></table></figure>\n<h3 id=\"chown\"><a href=\"#chown\" class=\"headerlink\" title=\"chown\"></a>chown</h3><p>change file owner<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chown -hR www:www /home/www <span class=\"comment\"># chang the owner of /homw/www to www user and www group</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Nginx-Install\"><a href=\"#Nginx-Install\" class=\"headerlink\" title=\"Nginx Install\"></a>Nginx Install</h2><p>As you know, you can install an application with few different methods, below we introduce three common methods to install Nginx.</p>\n<h3 id=\"Install-from-Debian-repository\"><a href=\"#Install-from-Debian-repository\" class=\"headerlink\" title=\"Install from Debian repository\"></a>Install from Debian repository</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apt-get install nginx</div></pre></td></tr></table></figure>\n<p>you can verify the installation through:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nginx -v</div></pre></td></tr></table></figure></p>\n<p>and you can verify which module you are install through:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nginx -V  <span class=\"comment\"># Capital</span></div></pre></td></tr></table></figure></p>\n<p>and you will get the default configuration like:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx version: nginx/1.6.2</div><div class=\"line\">TLS SNI support enabled</div><div class=\"line\">configure arguments: --with-cc-opt=<span class=\"string\">'-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2'</span> --with-ld-opt=-Wl,-z,relro --prefix=/usr/share/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/<span class=\"built_in\">log</span>/nginx/access.log --error-log-path=/var/<span class=\"built_in\">log</span>/nginx/error.log --lock-path=/var/lock/nginx.lock --pid-path=/run/nginx.pid --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-debug --with-pcre-jit --with-ipv6 --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --with-http_addition_module --with-http_dav_module --with-http_geoip_module --with-http_gzip_static_module --with-http_image_filter_module --with-http_spdy_module --with-http_sub_module --with-http_xslt_module --with-mail --with-mail_ssl_module --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-auth-pam --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-dav-ext-module --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-echo --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-upstream-fair --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/ngx_http_substitutions_filter_module</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Note: this type can not get the latest version of the NGINX.</p>\n</blockquote>\n<h3 id=\"Install-from-Nginx-repository\"><a href=\"#Install-from-Nginx-repository\" class=\"headerlink\" title=\"Install from Nginx repository\"></a>Install from Nginx repository</h3><ol>\n<li><p>Download the key used to sign NGINX packages and repository to the apt program keyring and add it:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget http://nginx.org/keys/nginx_signing.key</div><div class=\"line\">$ apt-key add nginx_signing.key</div></pre></td></tr></table></figure>\n</li>\n<li><p>Add the “sources” from which NGINX Open Source packages can be obtained: open the <em>/etc/apt/sources.list</em> file in any text editor, for example, vim:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vim /etc/apt/sources.list</div></pre></td></tr></table></figure>\n</li>\n<li><p>Append the lines to the file:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">deb http://nginx.org/packages/mainline/debian/ codename nginx</div><div class=\"line\">deb-src http://nginx.org/packages/mainline/debian/ codename nginx</div></pre></td></tr></table></figure>\n<p>where:<br>codename is a codename of a Debian release:</p>\n<table> <thead> <tr> <th>Version</th> <th>Codename</th> <th>Supported Platforms</th> </tr> </thead> <tbody> <tr> <td>7.x</td> <td>wheezy</td> <td>x86_64,i386</td> </tr> <tr> <td>8.x</td> <td>jessie</td> <td>x86_64,i386</td> </tr> </tbody> </table></li>\n<li><p>Install</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apt-get remove nginx-common</div><div class=\"line\">$ apt-get update</div><div class=\"line\">$ apt-get install nginx</div></pre></td></tr></table></figure>\n</li>\n<li><p>list the default module that nginx installed</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nginx -V</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx version: nginx/1.11.6</div><div class=\"line\">built by gcc 4.9.2 (Debian 4.9.2-10)</div><div class=\"line\">built with OpenSSL 1.0.1t  3 May 2016</div><div class=\"line\">TLS SNI support enabled</div><div class=\"line\">configure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/<span class=\"built_in\">log</span>/nginx/error.log --http-log-path=/var/<span class=\"built_in\">log</span>/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt=<span class=\"string\">'-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2'</span> --with-ld-opt=<span class=\"string\">'-Wl,-z,relro -Wl,-z,now -Wl,--as-needed'</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>You can see the latest version of the NGINX installed to your system.</p>\n<h3 id=\"Install-from-open-sources\"><a href=\"#Install-from-open-sources\" class=\"headerlink\" title=\"Install from open sources\"></a>Install from open sources</h3><p>As you see, these above two types to install NGINX is non-configurable, these are pre-build, so they already configure with default value. you can’t add or remove module and configure it. So if you want to add module or 3rd party module and apply latest security patches, I suggest you use this type to install NGINX.</p>\n<ol>\n<li><p>the PCRE lirary - required by NGINX core and Rewrite modules and provides support for regular expressions.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.39.tar.gz</div><div class=\"line\">$ tar -zxf pcre-8.39.tar.gz</div><div class=\"line\">$ <span class=\"built_in\">cd</span> pcre-8.39</div><div class=\"line\">$ ./configure</div><div class=\"line\">$ make</div><div class=\"line\">$ sudo make install</div></pre></td></tr></table></figure>\n</li>\n<li><p>the zlib library - required by NGINX Gzip module for headers compression.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget http://zlib.net/zlib-1.2.8.tar.gz</div><div class=\"line\">$ tar -zxf zlib-1.2.8.tar.gz</div><div class=\"line\">$ <span class=\"built_in\">cd</span> zlib-1.2.8</div><div class=\"line\">$ ./configure</div><div class=\"line\">$ make</div><div class=\"line\">$ sudo make install</div></pre></td></tr></table></figure>\n</li>\n<li><p>the OpenSSL library - required by NGINX SSL modules to support the HTTPS protocol.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget http://www.openssl.org/<span class=\"built_in\">source</span>/openssl-1.0.2f.tar.gz</div><div class=\"line\">$ tar -zxf openssl-1.0.2f.tar.gz</div><div class=\"line\">$ <span class=\"built_in\">cd</span> openssl-1.0.2f</div><div class=\"line\">$ ./configure darwin64-x86_64-cc --prefix=/usr</div><div class=\"line\">$ make</div><div class=\"line\">$ sudo make install</div></pre></td></tr></table></figure>\n</li>\n<li><p>The header more nginx library - required by NGINX header more nginx module to change the response header information.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget https://codeload.github.com/openresty/headers-more-nginx-module/tar.gz/v0.32</div><div class=\"line\">$ tar -zxf v0.32</div></pre></td></tr></table></figure>\n</li>\n<li><p>download the NGINX sources</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget http://nginx.org/download/nginx-1.10.2.tar.gz</div><div class=\"line\">$ tar zxf nginx-1.10.2.tar.gz</div><div class=\"line\">$ <span class=\"built_in\">cd</span> nginx-1.10.2</div></pre></td></tr></table></figure>\n</li>\n<li><p>configure NGINX<br>Add above that you download module to NGINX, so you can use the module in NGINX.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ./configure --prefix=/usr/<span class=\"built_in\">local</span>/nginx --sbin-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx --conf-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx.conf --pid-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx.pid --with-pcre=../pcre-8.39 --with-zlib=../zlib-1.2.8 --with-http_ssl_module --add-module=../headers-more-nginx-module-0.32 --with-debug</div></pre></td></tr></table></figure>\n</li>\n<li><p>link NGINX<br>Now, you can run nginx with full path – <em>/usr/local/nginx/nginx</em>, and you can browse it with localhost in any browser. But seems not convenient to run nginx with full path every time, so we link the nginx from local to sbin that you can run it without fullpath, just run <em>nginx</em>.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ln <span class=\"_\">-s</span> /usr/<span class=\"built_in\">local</span>/nginx/nginx /usr/sbin/nginx</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>Now you can run nginx with <em>nginx</em> command without fullpath.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nginx -V</div></pre></td></tr></table></figure></p>\n<h2 id=\"Configure-web\"><a href=\"#Configure-web\" class=\"headerlink\" title=\"Configure web\"></a>Configure web</h2><p>Now, you can access webpage in browser with default page in NGINX via localhost. So, the nginx.conf path is put in where we set during we configure NGINX – <em>/usr/local/nginx/nginx.conf</em>.<br>Let’s look at the file via vim.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx</div><div class=\"line\">$ vim nginx.conf</div></pre></td></tr></table></figure></p>\n<p>go to 35 line through <code>35 G</code><br><img src=\"/2017/05/23/web-server/default_server.png\" alt=\"NGINX default server\" title=\"NGINX default server\"></p>\n<p>We drop the unnecessary code, and simplify the code and explain the meaning of the code to below:<br><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;                  <span class=\"comment\"># listening the port, so you access the server with 80 port, this is the default port, so you can access the web server without append :80</span></div><div class=\"line\">    <span class=\"attribute\">server_name</span>  localhost;           <span class=\"comment\"># domain</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"attribute\">location</span> / &#123;                      <span class=\"comment\"># route, NGINX will receive the URL path, and adapt it with the route, if the path is same with route, then go into the brace block</span></div><div class=\"line\">        <span class=\"attribute\">root</span>   html;                  <span class=\"comment\"># basic directory where web server in, in this demo, it is in ./html</span></div><div class=\"line\">        <span class=\"attribute\">index</span>  index.html index.htm;  <span class=\"comment\"># access it without append the file name if it is index.html or index.htm</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Now, we can configure a server by self, we make the root of the web server in <em>/home/www</em>, and write index.html, then open the nginx.conf to configure the new web server “Hello world”<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir /home/www</div><div class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"Hello world\"</span> &gt; index.html</div><div class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx</div><div class=\"line\">$ vim nginx.conf</div></pre></td></tr></table></figure></p>\n<p>We append <em>include conf.d/&#42;.conf</em> into nginx.conf at last second line. so we can add the server configure without pollute the origin configure. It will auto add all of the file that have .conf extension into <em>nginx.conf</em>.<br><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">8080</span>;</div><div class=\"line\">  <span class=\"attribute\">server_name</span> localhost;</div><div class=\"line\">  <span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">    <span class=\"attribute\">root</span> /home/www;</div><div class=\"line\">    <span class=\"attribute\">index</span> index.html index.htm;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Then we reload the nginx server with:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nginx <span class=\"_\">-s</span> reload</div></pre></td></tr></table></figure></p>\n<p>Now, you can access www. <em><a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"external\">http://localhost:8080/</a></em></p>\n<h2 id=\"change-response-header\"><a href=\"#change-response-header\" class=\"headerlink\" title=\"change response header\"></a>change response header</h2><p>We already install the headers-more-nginx-module, so we can configure the response header. Before we configure it, let’s open the developers-tool in google-chrome, and look at the network request, we can get the response headers:<br><img src=\"/2017/05/23/web-server/response_header.png\" alt=\"response headers\" title=\"response headers\"><br>For some security reason, we don’t want to show Server information to client, so we can add the configuration to <em>hello_world.conf</em>.<br><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">more_set_headers</span> <span class=\"string\">\"Server\"</span> <span class=\"string\">\"\"</span>; <span class=\"comment\"># add this</span></div><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">8080</span>;</div><div class=\"line\">  <span class=\"attribute\">server_name</span> localhost;</div><div class=\"line\">  <span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">    <span class=\"attribute\">root</span> /home/www;</div><div class=\"line\">    <span class=\"attribute\">index</span> index.html index.htm;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Then reload the nginx server:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nginx <span class=\"_\">-s</span> reload</div></pre></td></tr></table></figure></p>\n<p>Then we reload the page in browser, and open the network, the Server information already drop.<br><img src=\"/2017/05/23/web-server/response_header_safe.png\" alt=\"response headers without server information\" title=\"response headers without server information\"></p>\n<p>Now, your nginx server is more safer than before you add the server information into response headers.</p>\n<p>For more detail about the headers-more-nginx-module, see: <a href=\"https://github.com/openresty/headers-more-nginx-module\" target=\"_blank\" rel=\"external\">https://github.com/openresty/headers-more-nginx-module</a></p>\n<h2 id=\"add-module\"><a href=\"#add-module\" class=\"headerlink\" title=\"add module\"></a>add module</h2><p>If you want to add some module into NGINX that was installed, you have to download the module, then reconfigure NGINX with the module and compile it.</p>\n<h2 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ man order <span class=\"comment\"># to see detail of the order</span></div><div class=\"line\">$ apt-cache search package <span class=\"comment\"># search package</span></div><div class=\"line\">$ cat /etc/passwd <span class=\"comment\"># show all users</span></div><div class=\"line\">$ getent passwd <span class=\"comment\"># show all users</span></div><div class=\"line\">$ getent group <span class=\"comment\"># show all groups</span></div><div class=\"line\">$ getent group | grep username</div><div class=\"line\">$ id username <span class=\"comment\"># show username information</span></div><div class=\"line\">$ groups username <span class=\"comment\"># show which groups does username have</span></div><div class=\"line\">$ dpkg-reconfigure tzdate <span class=\"comment\"># change timezone</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>Ref:<br><em>screen</em> <a href=\"https://www.rackaid.com/blog/linux-screen-tutorial-and-how-to/#starting\" target=\"_blank\" rel=\"external\">https://www.rackaid.com/blog/linux-screen-tutorial-and-how-to/#starting</a><br><em>useradd</em> <a href=\"http://www.tecmint.com/add-users-in-linux/\" target=\"_blank\" rel=\"external\">http://www.tecmint.com/add-users-in-linux/</a><br><em>usermod</em> <a href=\"http://www.tecmint.com/usermod-command-examples/\" target=\"_blank\" rel=\"external\">http://www.tecmint.com/usermod-command-examples/</a><br><em>permission</em> <a href=\"http://www.tecmint.com/manage-users-and-groups-in-linux/\" target=\"_blank\" rel=\"external\">http://www.tecmint.com/manage-users-and-groups-in-linux/</a><br><em>nginx</em> <a href=\"https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/\" target=\"_blank\" rel=\"external\">https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/</a><br><em>headers-more-nginx-module</em> <a href=\"https://github.com/openresty/headers-more-nginx-module\" target=\"_blank\" rel=\"external\">https://github.com/openresty/headers-more-nginx-module</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>We use <strong>Debian</strong> to finish the demo.<br>Both of below are basic command line, If you are not familiar with command line in Linux, you should learn it first.</p>\n<h2 id=\"Update-amp-Upgrade\"><a href=\"#Update-amp-Upgrade\" class=\"headerlink\" title=\"Update &amp; Upgrade\"></a>Update &amp; Upgrade</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apt-get update</div><div class=\"line\">$ apt-get upgrade</div></pre></td></tr></table></figure>\n<p>You must curious what’s difference between <a href=\"https://linux.die.net/man/8/apt-get\" target=\"_blank\" rel=\"external\">update</a> and <a href=\"https://linux.die.net/man/8/apt-get\" target=\"_blank\" rel=\"external\">upgrade</a>.</p>\n<blockquote>\n<p><strong>update</strong><br>Used to re-synchronize the package index files from their sources. The indexes of available packages are fetched from the location(s) specified in /etc/apt/sources.list(5). An update should always be performed before an upgrade or dist-upgrade.<br><strong>upgrade</strong><br>Used to install the newest versions of all packages currently installed on the system from the sources enumerated in /etc/apt/sources.list(5). Packages currently installed with new versions available are retrieved and upgraded; under no circumstances are currently installed packages removed, nor are packages that are not already installed retrieved and installed. New versions of currently installed packages that cannot be upgraded without changing the install status of another package will be left at their current version. An update must be performed first so that apt-get knows that new versions of packages are available.</p>\n</blockquote>\n<h2 id=\"Htop-Vim-amp-Screen\"><a href=\"#Htop-Vim-amp-Screen\" class=\"headerlink\" title=\"Htop, Vim &amp; Screen\"></a>Htop, Vim &amp; Screen</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apt-get install htop</div><div class=\"line\">$ apt-get install vim</div><div class=\"line\">$ apt-get install screen</div></pre></td></tr></table></figure>\n<p>These packages can improve your effective.<br><strong><em>htop:</em></strong> <a href=\"https://hisham.hm/htop/index.php\" target=\"_blank\" rel=\"external\">htop</a> command like <a href=\"https://linux.die.net/man/1/top\" target=\"_blank\" rel=\"external\">top</a> command, both of these are interactive process viewer for Unix systems. Its help you manage process and monitor resource easy. But <a href=\"https://hisham.hm/htop/index.php\" target=\"_blank\" rel=\"external\">htop</a> is more convenient than <a href=\"https://linux.die.net/man/1/top\" target=\"_blank\" rel=\"external\">top</a>.</p>\n<blockquote>\n<ul>\n<li>In ‘htop’ you can scroll the list vertically and horizontally to see all processes and complete command lines.</li>\n<li>In ‘top’ you are subject to a delay for each unassigned key you press (especially annoying when multi-key escape sequences are triggered by accident).</li>\n<li>‘htop’ starts faster (‘top’ seems to collect data for a while before displaying anything).</li>\n<li>In ‘htop’ you don’t need to type the process number to kill a process, in ‘top’ you do.</li>\n<li>In ‘htop’ you don’t need to type the process number or the priority value to renice a process, in ‘top’ you do.</li>\n<li>‘htop’ supports mouse operation, ‘top’ doesn’t</li>\n<li>‘top’ is older, hence, more used and tested.<br>From <a href=\"http://hisham.hm/htop/index.php?page=comparison\" target=\"_blank\" rel=\"external\">http://hisham.hm/htop/index.php?page=comparison</a></li>\n</ul>\n</blockquote>\n<p><strong><em>vim:</em></strong> <a href=\"http://www.vim.org/\" target=\"_blank\" rel=\"external\">vim</a> is almost a proper superset of <a href=\"http://ex-vi.sourceforge.net/\" target=\"_blank\" rel=\"external\">vi</a>, everything that is in vi is available in vim.</p>\n<p><strong><em>screen:</em></strong></p>\n<blockquote>\n<ol>\n<li>use multiple shell window from a single SSH session</li>\n<li>Keep a shell active even through network disruptions</li>\n<li>Disconnect and re-connect to a shell sessions from multiple locations</li>\n<li>Run a long running process without maintaining an active shell session</li>\n</ol>\n</blockquote>\n<p><strong>Usage</strong><br>screen uses the command <code>ctrl-a</code> that’s the control key and a lowercase “a” as a signal to send commands to screen instead of the shell.<br><em>start</em>: <code>screen</code><br><em>creating</em>: <code>Ctrl-a c</code><br><em>switch</em>: <code>Ctrl-a n</code> for the next window or <code>Ctrl-a p</code> for the previous window.<br><em>detach</em>: <code>Ctrl-a d</code><br><em>reattach</em>: <code>Ctrl-a r</code><br><em>logging</em>: <code>Ctrl-a h</code><br><em>lock</em>: <code>Ctrl-a x</code><br><em>stop</em>: <code>Ctrl-a k</code></p>\n<h2 id=\"Group-amp-User\"><a href=\"#Group-amp-User\" class=\"headerlink\" title=\"Group &amp; User\"></a>Group &amp; User</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ groupadd</div><div class=\"line\">$ groupdel</div><div class=\"line\">$ useradd</div><div class=\"line\">$ passwd</div><div class=\"line\">$ usermod</div><div class=\"line\">$ userdel</div></pre></td></tr></table></figure>\n<h3 id=\"useradd\"><a href=\"#useradd\" class=\"headerlink\" title=\"useradd\"></a>useradd</h3><p>user add will auto create group that the name same as user<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ useradd chang <span class=\"comment\"># craete user \"chang\"</span></div><div class=\"line\">$ useradd <span class=\"_\">-d</span> /data/projects chang <span class=\"comment\"># create user \"chang\" into /data/projects</span></div><div class=\"line\">$ useradd -u 999 -g 998 chang <span class=\"comment\"># create user with 999 for user id and 998 for group id</span></div><div class=\"line\">$ useradd -G admings,webadmin,developers chang <span class=\"comment\">#</span></div><div class=\"line\">$ useradd -M chang <span class=\"comment\"># add user \"chang\" without home directory</span></div><div class=\"line\">$ useradd <span class=\"_\">-e</span> 2017-01-01 chang <span class=\"comment\"># add user \"chang\" expire at 2017-01-02</span></div><div class=\"line\">$ chage <span class=\"_\">-l</span> chang <span class=\"comment\"># show/change user or password expire date</span></div><div class=\"line\">$ useradd <span class=\"_\">-e</span> 2017-01-01 <span class=\"_\">-f</span> 45 chang <span class=\"comment\"># password expire after 2017-01-01</span></div><div class=\"line\">$ useradd -c <span class=\"string\">\"Yuchang Wu\"</span> chang <span class=\"comment\"># add user with \"Yuchang Wu\" infomation</span></div><div class=\"line\">$ tail -1 /etc/passwd <span class=\"comment\"># print last 1 line of the file \"/etc/passwd\"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"the-meaning-of-files-that-user-and-group-saved\"><a href=\"#the-meaning-of-files-that-user-and-group-saved\" class=\"headerlink\" title=\"the meaning of files that user and group saved\"></a>the meaning of files that user and group saved</h3><ul>\n<li>/etc/passwd – User account information.</li>\n<li>/etc/shadow – Secure account information.</li>\n<li>/etc/group – Group account information.</li>\n<li>/etc/gshadow – Secure group account information.</li>\n<li>/etc/login.defs – Shadow password suite configuration..</li>\n</ul>\n<p>/etc/passwd format:<br>username:password:uid:gid:userInfo:homeDirectory:shell</p>\n<p>/etc/group format:<br>groupname:password:gidd:groupMembers</p>\n<h3 id=\"usermod\"><a href=\"#usermod\" class=\"headerlink\" title=\"usermod\"></a>usermod</h3><p>for more detail, to below to see<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ usermod --help</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ usermod -G www chang <span class=\"comment\"># add www group to chang, Be careful, it will remove all existing groups that user belongs, so always add the '-a' with '-G' to append new groups</span></div><div class=\"line\">$ usermod -G www <span class=\"_\">-a</span> chang</div></pre></td></tr></table></figure>\n<h3 id=\"chown\"><a href=\"#chown\" class=\"headerlink\" title=\"chown\"></a>chown</h3><p>change file owner<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chown -hR www:www /home/www <span class=\"comment\"># chang the owner of /homw/www to www user and www group</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Nginx-Install\"><a href=\"#Nginx-Install\" class=\"headerlink\" title=\"Nginx Install\"></a>Nginx Install</h2><p>As you know, you can install an application with few different methods, below we introduce three common methods to install Nginx.</p>\n<h3 id=\"Install-from-Debian-repository\"><a href=\"#Install-from-Debian-repository\" class=\"headerlink\" title=\"Install from Debian repository\"></a>Install from Debian repository</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apt-get install nginx</div></pre></td></tr></table></figure>\n<p>you can verify the installation through:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nginx -v</div></pre></td></tr></table></figure></p>\n<p>and you can verify which module you are install through:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nginx -V  <span class=\"comment\"># Capital</span></div></pre></td></tr></table></figure></p>\n<p>and you will get the default configuration like:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx version: nginx/1.6.2</div><div class=\"line\">TLS SNI support enabled</div><div class=\"line\">configure arguments: --with-cc-opt=<span class=\"string\">'-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2'</span> --with-ld-opt=-Wl,-z,relro --prefix=/usr/share/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/<span class=\"built_in\">log</span>/nginx/access.log --error-log-path=/var/<span class=\"built_in\">log</span>/nginx/error.log --lock-path=/var/lock/nginx.lock --pid-path=/run/nginx.pid --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-debug --with-pcre-jit --with-ipv6 --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --with-http_addition_module --with-http_dav_module --with-http_geoip_module --with-http_gzip_static_module --with-http_image_filter_module --with-http_spdy_module --with-http_sub_module --with-http_xslt_module --with-mail --with-mail_ssl_module --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-auth-pam --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-dav-ext-module --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-echo --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-upstream-fair --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/ngx_http_substitutions_filter_module</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Note: this type can not get the latest version of the NGINX.</p>\n</blockquote>\n<h3 id=\"Install-from-Nginx-repository\"><a href=\"#Install-from-Nginx-repository\" class=\"headerlink\" title=\"Install from Nginx repository\"></a>Install from Nginx repository</h3><ol>\n<li><p>Download the key used to sign NGINX packages and repository to the apt program keyring and add it:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget http://nginx.org/keys/nginx_signing.key</div><div class=\"line\">$ apt-key add nginx_signing.key</div></pre></td></tr></table></figure>\n</li>\n<li><p>Add the “sources” from which NGINX Open Source packages can be obtained: open the <em>/etc/apt/sources.list</em> file in any text editor, for example, vim:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vim /etc/apt/sources.list</div></pre></td></tr></table></figure>\n</li>\n<li><p>Append the lines to the file:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">deb http://nginx.org/packages/mainline/debian/ codename nginx</div><div class=\"line\">deb-src http://nginx.org/packages/mainline/debian/ codename nginx</div></pre></td></tr></table></figure>\n<p>where:<br>codename is a codename of a Debian release:</p>\n<table> <thead> <tr> <th>Version</th> <th>Codename</th> <th>Supported Platforms</th> </tr> </thead> <tbody> <tr> <td>7.x</td> <td>wheezy</td> <td>x86_64,i386</td> </tr> <tr> <td>8.x</td> <td>jessie</td> <td>x86_64,i386</td> </tr> </tbody> </table></li>\n<li><p>Install</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apt-get remove nginx-common</div><div class=\"line\">$ apt-get update</div><div class=\"line\">$ apt-get install nginx</div></pre></td></tr></table></figure>\n</li>\n<li><p>list the default module that nginx installed</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nginx -V</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx version: nginx/1.11.6</div><div class=\"line\">built by gcc 4.9.2 (Debian 4.9.2-10)</div><div class=\"line\">built with OpenSSL 1.0.1t  3 May 2016</div><div class=\"line\">TLS SNI support enabled</div><div class=\"line\">configure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/<span class=\"built_in\">log</span>/nginx/error.log --http-log-path=/var/<span class=\"built_in\">log</span>/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt=<span class=\"string\">'-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2'</span> --with-ld-opt=<span class=\"string\">'-Wl,-z,relro -Wl,-z,now -Wl,--as-needed'</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>You can see the latest version of the NGINX installed to your system.</p>\n<h3 id=\"Install-from-open-sources\"><a href=\"#Install-from-open-sources\" class=\"headerlink\" title=\"Install from open sources\"></a>Install from open sources</h3><p>As you see, these above two types to install NGINX is non-configurable, these are pre-build, so they already configure with default value. you can’t add or remove module and configure it. So if you want to add module or 3rd party module and apply latest security patches, I suggest you use this type to install NGINX.</p>\n<ol>\n<li><p>the PCRE lirary - required by NGINX core and Rewrite modules and provides support for regular expressions.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.39.tar.gz</div><div class=\"line\">$ tar -zxf pcre-8.39.tar.gz</div><div class=\"line\">$ <span class=\"built_in\">cd</span> pcre-8.39</div><div class=\"line\">$ ./configure</div><div class=\"line\">$ make</div><div class=\"line\">$ sudo make install</div></pre></td></tr></table></figure>\n</li>\n<li><p>the zlib library - required by NGINX Gzip module for headers compression.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget http://zlib.net/zlib-1.2.8.tar.gz</div><div class=\"line\">$ tar -zxf zlib-1.2.8.tar.gz</div><div class=\"line\">$ <span class=\"built_in\">cd</span> zlib-1.2.8</div><div class=\"line\">$ ./configure</div><div class=\"line\">$ make</div><div class=\"line\">$ sudo make install</div></pre></td></tr></table></figure>\n</li>\n<li><p>the OpenSSL library - required by NGINX SSL modules to support the HTTPS protocol.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget http://www.openssl.org/<span class=\"built_in\">source</span>/openssl-1.0.2f.tar.gz</div><div class=\"line\">$ tar -zxf openssl-1.0.2f.tar.gz</div><div class=\"line\">$ <span class=\"built_in\">cd</span> openssl-1.0.2f</div><div class=\"line\">$ ./configure darwin64-x86_64-cc --prefix=/usr</div><div class=\"line\">$ make</div><div class=\"line\">$ sudo make install</div></pre></td></tr></table></figure>\n</li>\n<li><p>The header more nginx library - required by NGINX header more nginx module to change the response header information.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget https://codeload.github.com/openresty/headers-more-nginx-module/tar.gz/v0.32</div><div class=\"line\">$ tar -zxf v0.32</div></pre></td></tr></table></figure>\n</li>\n<li><p>download the NGINX sources</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget http://nginx.org/download/nginx-1.10.2.tar.gz</div><div class=\"line\">$ tar zxf nginx-1.10.2.tar.gz</div><div class=\"line\">$ <span class=\"built_in\">cd</span> nginx-1.10.2</div></pre></td></tr></table></figure>\n</li>\n<li><p>configure NGINX<br>Add above that you download module to NGINX, so you can use the module in NGINX.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ./configure --prefix=/usr/<span class=\"built_in\">local</span>/nginx --sbin-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx --conf-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx.conf --pid-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx.pid --with-pcre=../pcre-8.39 --with-zlib=../zlib-1.2.8 --with-http_ssl_module --add-module=../headers-more-nginx-module-0.32 --with-debug</div></pre></td></tr></table></figure>\n</li>\n<li><p>link NGINX<br>Now, you can run nginx with full path – <em>/usr/local/nginx/nginx</em>, and you can browse it with localhost in any browser. But seems not convenient to run nginx with full path every time, so we link the nginx from local to sbin that you can run it without fullpath, just run <em>nginx</em>.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ln <span class=\"_\">-s</span> /usr/<span class=\"built_in\">local</span>/nginx/nginx /usr/sbin/nginx</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>Now you can run nginx with <em>nginx</em> command without fullpath.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nginx -V</div></pre></td></tr></table></figure></p>\n<h2 id=\"Configure-web\"><a href=\"#Configure-web\" class=\"headerlink\" title=\"Configure web\"></a>Configure web</h2><p>Now, you can access webpage in browser with default page in NGINX via localhost. So, the nginx.conf path is put in where we set during we configure NGINX – <em>/usr/local/nginx/nginx.conf</em>.<br>Let’s look at the file via vim.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx</div><div class=\"line\">$ vim nginx.conf</div></pre></td></tr></table></figure></p>\n<p>go to 35 line through <code>35 G</code><br><img src=\"/2017/05/23/web-server/default_server.png\" alt=\"NGINX default server\" title=\"NGINX default server\"></p>\n<p>We drop the unnecessary code, and simplify the code and explain the meaning of the code to below:<br><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;                  <span class=\"comment\"># listening the port, so you access the server with 80 port, this is the default port, so you can access the web server without append :80</span></div><div class=\"line\">    <span class=\"attribute\">server_name</span>  localhost;           <span class=\"comment\"># domain</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"attribute\">location</span> / &#123;                      <span class=\"comment\"># route, NGINX will receive the URL path, and adapt it with the route, if the path is same with route, then go into the brace block</span></div><div class=\"line\">        <span class=\"attribute\">root</span>   html;                  <span class=\"comment\"># basic directory where web server in, in this demo, it is in ./html</span></div><div class=\"line\">        <span class=\"attribute\">index</span>  index.html index.htm;  <span class=\"comment\"># access it without append the file name if it is index.html or index.htm</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Now, we can configure a server by self, we make the root of the web server in <em>/home/www</em>, and write index.html, then open the nginx.conf to configure the new web server “Hello world”<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir /home/www</div><div class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"Hello world\"</span> &gt; index.html</div><div class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx</div><div class=\"line\">$ vim nginx.conf</div></pre></td></tr></table></figure></p>\n<p>We append <em>include conf.d/&#42;.conf</em> into nginx.conf at last second line. so we can add the server configure without pollute the origin configure. It will auto add all of the file that have .conf extension into <em>nginx.conf</em>.<br><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">8080</span>;</div><div class=\"line\">  <span class=\"attribute\">server_name</span> localhost;</div><div class=\"line\">  <span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">    <span class=\"attribute\">root</span> /home/www;</div><div class=\"line\">    <span class=\"attribute\">index</span> index.html index.htm;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Then we reload the nginx server with:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nginx <span class=\"_\">-s</span> reload</div></pre></td></tr></table></figure></p>\n<p>Now, you can access www. <em><a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"external\">http://localhost:8080/</a></em></p>\n<h2 id=\"change-response-header\"><a href=\"#change-response-header\" class=\"headerlink\" title=\"change response header\"></a>change response header</h2><p>We already install the headers-more-nginx-module, so we can configure the response header. Before we configure it, let’s open the developers-tool in google-chrome, and look at the network request, we can get the response headers:<br><img src=\"/2017/05/23/web-server/response_header.png\" alt=\"response headers\" title=\"response headers\"><br>For some security reason, we don’t want to show Server information to client, so we can add the configuration to <em>hello_world.conf</em>.<br><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">more_set_headers</span> <span class=\"string\">\"Server\"</span> <span class=\"string\">\"\"</span>; <span class=\"comment\"># add this</span></div><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">8080</span>;</div><div class=\"line\">  <span class=\"attribute\">server_name</span> localhost;</div><div class=\"line\">  <span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">    <span class=\"attribute\">root</span> /home/www;</div><div class=\"line\">    <span class=\"attribute\">index</span> index.html index.htm;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Then reload the nginx server:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nginx <span class=\"_\">-s</span> reload</div></pre></td></tr></table></figure></p>\n<p>Then we reload the page in browser, and open the network, the Server information already drop.<br><img src=\"/2017/05/23/web-server/response_header_safe.png\" alt=\"response headers without server information\" title=\"response headers without server information\"></p>\n<p>Now, your nginx server is more safer than before you add the server information into response headers.</p>\n<p>For more detail about the headers-more-nginx-module, see: <a href=\"https://github.com/openresty/headers-more-nginx-module\" target=\"_blank\" rel=\"external\">https://github.com/openresty/headers-more-nginx-module</a></p>\n<h2 id=\"add-module\"><a href=\"#add-module\" class=\"headerlink\" title=\"add module\"></a>add module</h2><p>If you want to add some module into NGINX that was installed, you have to download the module, then reconfigure NGINX with the module and compile it.</p>\n<h2 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ man order <span class=\"comment\"># to see detail of the order</span></div><div class=\"line\">$ apt-cache search package <span class=\"comment\"># search package</span></div><div class=\"line\">$ cat /etc/passwd <span class=\"comment\"># show all users</span></div><div class=\"line\">$ getent passwd <span class=\"comment\"># show all users</span></div><div class=\"line\">$ getent group <span class=\"comment\"># show all groups</span></div><div class=\"line\">$ getent group | grep username</div><div class=\"line\">$ id username <span class=\"comment\"># show username information</span></div><div class=\"line\">$ groups username <span class=\"comment\"># show which groups does username have</span></div><div class=\"line\">$ dpkg-reconfigure tzdate <span class=\"comment\"># change timezone</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>Ref:<br><em>screen</em> <a href=\"https://www.rackaid.com/blog/linux-screen-tutorial-and-how-to/#starting\" target=\"_blank\" rel=\"external\">https://www.rackaid.com/blog/linux-screen-tutorial-and-how-to/#starting</a><br><em>useradd</em> <a href=\"http://www.tecmint.com/add-users-in-linux/\" target=\"_blank\" rel=\"external\">http://www.tecmint.com/add-users-in-linux/</a><br><em>usermod</em> <a href=\"http://www.tecmint.com/usermod-command-examples/\" target=\"_blank\" rel=\"external\">http://www.tecmint.com/usermod-command-examples/</a><br><em>permission</em> <a href=\"http://www.tecmint.com/manage-users-and-groups-in-linux/\" target=\"_blank\" rel=\"external\">http://www.tecmint.com/manage-users-and-groups-in-linux/</a><br><em>nginx</em> <a href=\"https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/\" target=\"_blank\" rel=\"external\">https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/</a><br><em>headers-more-nginx-module</em> <a href=\"https://github.com/openresty/headers-more-nginx-module\" target=\"_blank\" rel=\"external\">https://github.com/openresty/headers-more-nginx-module</a></p>\n</blockquote>\n"},{"title":"微信JSSDK测试接口的Node实现","date":"2017-07-13T08:30:56.000Z","_content":"\n做了一个网站，放到线上，用微信打开，点击分享，可是分享后发给朋友的链接卡片是微信默认自带的，如下：\n{% asset_img default_share.png 默认分享 %}\n<br/>\n这标题，描述以及图片是默认自带的，丑不说，分享给别人还以为是盗号网站呢，而接入微信的JSSDK后，分享可以自定义内容，如下：\n{% asset_img jssdk_share.png 接口分享 %}\n<br/>\n我承认，虽然这分享的标题和内容也并不正经，但这不妨碍我表达**我们可以通过微信JSSDK定义分享内容**，接下来我们将一步一步从零实现JSSDK从后端Node.js的接入。\n\n## 成为测试公众号开发者\n### 登录测试公众号后台\n首先我们需要在[微信公众平台](https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login)申请测试接口，地址：https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login\n使用微信扫描登录后，即可来微信公众平台测试账号系统。\n\n### 成为测试公众号开发者\n其次在微信公众平台测试账号中，扫描测试号二维码，成为测试公众号的开发者\n\n\n## 接口配置信息\n### 修改接口配置信息\n1. URL地址必须是你服务器上的地址，此地址要能通过浏览器的地址栏访问到（没有服务器？没关系，一会儿我们搭建一个）\n假设我这里填写的服务器地址是\"http://www.your_server_name.com/wxJssdk\"\n2. Token你可以随意填写，用作生成签名，（不知道签名？没关系，一会儿会用到这东西的）\n假设我这里填写的Token是\"[jegfjaeghfuccawegfgjdbh]()\"\n\n此时点击提交是会提示配置失败的，因为在提交的时候，微信是会请求你的服务器地址，而你的当前配置的地址并不能访问，所以会提示配置失败。不过别急，我们先来搭建一个简单的Node服务器，让微信能够访问该服务器。\n\n### 搭建简单的Node服务器\n我们需要在http://www.your_server_name.com 这个域名上搭建一个服务器，并且曝出一个接口为`/wxJssdk`\n``` javascript\nconst express = require('express')\nconst app = express()\n\napp.get('/wxJssdk', (req, res) => {\n  res.send('请求成功了了了了')\n})\n\napp.listen(80, err => {\n  if(!err) console.log('connect succeed')\n})\n```\n现在我们在地址栏中访问http://www.your_server_name.com/wxJssdk ，如果页面显示“请求成功了了了了”，则进入到下一步，如果没有成功的话，检查一下你的服务器是否开启Node服务器，如：`node index.js`\n\n此时保存微信测试公众号后台的接口配置信息，仍然会提示配置失败，这是因为我们没有按照它的要求返回。\n\n### 根据微信测试公众号请求信息返回对应内容\n根据[微信公众号开发文档接入指南](https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421135319)，微信在请求我们配置的接口时，会带上如下信息\n\n| 参数 | 描述 |\n| :--- | :--- |\n|signature|微信加密签名，signature结合了开发者填写的token参数和请求中的timestamp参数、nonce参数。|\n|timestamp|时间戳|\n|nonce|随机数|\n|echostr|随机字符串|\n微信服务器会通过GET请求，来请求我们所配置的接口，并带上以上表格的信息，而我们必须按照以下要求，将微信发送的信息进行要求校验，以确保是微信发送的信息，其中校验流程如下：\n  > 1）将token、timestamp、nonce三个参数进行字典序排序\n2）将三个参数字符串拼接成一个字符串进行sha1加密\n3）开发者获得加密后的字符串可与signature对比，标识该请求来源于微信\n\n``` javascript\nconst express = require('express')\nconst app = express()\nconst sha1 = require('sha1')\n\napp.get('/wxJssdk', (req, res) => {\n  let wx = req.query\n\n  let token = 'jegfjaeghfuccawegfgjdbh'\n  let timestamp = wx.timestamp\n  let nonce = wx.nonce\n\n  // 1）将token、timestamp、nonce三个参数进行字典序排序\n  let list = [token, timestamp, nonce].sort()\n\n  // 2）将三个参数字符串拼接成一个字符串进行sha1加密\n  let str = list.join('')\n  let result = sha1(str)\n\n  // 3）开发者获得加密后的字符串可与signature对比，标识该请求来源于微信\n  if (result === wx.signature) {\n    res.send(wx.echostr) // 返回微信传来的echostr，表示校验成功，此处不能返回其它\n  } else {\n    res.send(false)\n  }\n})\n```\n此时我们重启Node服务器，再次保存接口配置信息即可配置成功。\n\n## 微信JSSDK使用步骤\n根据[微信JSSDK说明文档](https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421141115)，我们需要完成如下：\n### 填写安全域名\n登录微信公众平台进入“公众号设置”的“功能设置”里填写“JS接口安全域名”，即要调用接口的域名，不包含协议\n### 前端引入JS\n在需要调用JS接口的页面引入此JS文件，（支持https）：http://res.wx.qq.com/open/js/jweixin-1.2.0.js\n### 填写接口的配置信息\n``` javascript\nwx.config({\n  debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。\n  appId: '', // 必填，公众号的唯一标识\n  timestamp: , // 必填，生成签名的时间戳\n  nonceStr: '', // 必填，生成签名的随机串\n  signature: '',// 必填，签名\n  jsApiList: [] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2\n});\n```\n### 调用接口\n做你前端该做的，调用微信分享接口，或微信提供的其它接口，whatever you need，当然，这并不是我们所要讲的重点，我们接下来要看一下微信的配置信息从哪获取\n\n## 在Node服务器中生成jssdk所需要的配置信息\n从上一节可以看到，调用微信JSSDK需要以下信息\n1. appId\n2. timestamp\n3. nonceStr\n4. signature\n5. jsApiList\n\n其中：\n1. 第1项appId是测试公众号后台的appId，我们已知\n2. 第2项时间戳我们也可以自己生成\n3. 第3项nonceStr可以随意填写，你可以理解为密钥\n4. 第4项signature则需要我们按要求生成\n5. 第5项是所需要接口的接口名\n\n### 生成signature\n> 生成签名之前必须先了解一下jsapi_ticket，jsapi_ticket是公众号用于调用微信JS接口的临时票据。正常情况下，jsapi_ticket的有效期为7200秒，通过access_token来获取。由于获取jsapi_ticket的api调用次数非常有限，频繁刷新jsapi_ticket会导致api调用受限，影响自身业务，开发者必须在自己的服务全局缓存jsapi_ticket 。\n\n为了保证我们appid，appsecret，nonceStr等信息不在前端曝露，我们以下步骤将在服务器上进行操作，以免他人盗用信息获取（注：微信请求有每日次数限制，一旦超出，则无法使用，具体请求次数限制在微信公众号后台中可查看）\n\n#### 生成access_token\n根据微信开发文档[获取access_token文档说明]，我们需要将微信测试公众号后台的appid和和appsecret以GET的请求方式向https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=APPID&secret=APPSECRET 发起请求获取token，请求成功后我们会获得下返回JSON转化的字符串\n``` JSON\n{\"access_token\":\"ACCESS_TOKEN\",\"expires_in\":7200}\n```\n具体请求代码如下：\n``` javascript\nconst request = require('request')\n\nconst grant_type = 'client_credential'\nconst appid = 'your app id'\nconst secret = 'your app secret'\n\nrequest('https://api.weixin.qq.com/cgi-bin/token?grant_type=' + grant_type + '&appid=' + appid + '&secret=' + secret, (err, response, body) => {\n  let access_toekn = JSON.parse(body).access_token\n})\n```\n#### 获取jsapi_ticket\n``` javascript\nconst request = require('request')\n\nconst grant_type = 'client_credential'\nconst appid = 'your app id'\nconst secret = 'your app secret'\n\nrequest('https://api.weixin.qq.com/cgi-bin/token?grant_type=' + grant_type + '&appid=' + appid + '&secret=' + secret, (err, response, body) => {\n  let access_toekn = JSON.parse(body).access_token\n\n  request('https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=' + access_token + '&type=jsapi', (err, response, body) => {\n     let jsapi_ticket = JSON.parse(body).ticket\n  })\n})\n```\n\n#### 生成签名\n生成签名的步骤和最开始的`/wxJssdk`的算法是一致的，具体如下：\n``` javascript\nlet jsapi_ticket = jsapi_ticket  // 上一步从获取的jsapi_ticket\nlet nonce_str = '123456'    // 密钥，字符串任意，可以随机生成\nlet timestamp = new Date().getTime()  // 时间戳\nlet url = req.query.url   // 使用接口的url链接，不包含#后的内容\n\n// 将请求以上字符串，先按字典排序，再以'&'拼接，如下：其中j > n > t > u，此处直接手动排序\nlet str = 'jsapi_ticket=' + jsapi_ticket + '&noncestr=' + nonce_str + '&timestamp=' + timestamp + '&url=' + url\n\n// 用sha1加密\nlet signature = sha1(str)\n```\n\n连接后的代码为：\n``` javascript\nconst request = require('request')\n\nconst grant_type = 'client_credential'\nconst appid = 'your app id'\nconst secret = 'your app secret'\n\nrequest('https://api.weixin.qq.com/cgi-bin/token?grant_type=' + grant_type + '&appid=' + appid + '&secret=' + secret, (err, response, body) => {\n  let access_toekn = JSON.parse(body).access_token\n\n  request('https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=' + access_token + '&type=jsapi', (err, response, body) => {\n     let jsapi_ticket = JSON.parse(body).ticket\n     let nonce_str = '123456'    // 密钥，字符串任意，可以随机生成\n     let timestamp = new Date().getTime()  // 时间戳\n     let url = req.query.url   // 使用接口的url链接，不包含#后的内容\n\n     // 将请求以上字符串，先按字典排序，再以'&'拼接，如下：其中j > n > t > u，此处直接手动排序\n     let str = 'jsapi_ticket=' + jsapi_ticket + '&noncestr=' + nonce_str + '&timestamp=' + timestamp + '&url=' + url\n\n     // 用sha1加密\n     let signature = sha1(str)\n  })\n})\n```\n\n### 曝露接口，返回给前端\n``` javascript\napp.post('/wxJssdk/getJssdk', (req, res) => {\n  const request = require('request')\n\n  const grant_type = 'client_credential'\n  const appid = 'your app id'\n  const secret = 'your app secret'\n\n  request('https://api.weixin.qq.com/cgi-bin/token?grant_type=' + grant_type + '&appid=' + appid + '&secret=' + secret, (err, response, body) => {\n    let access_toekn = JSON.parse(body).access_token\n\n    request('https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=' + access_token + '&type=jsapi', (err, response, body) => {\n       let jsapi_ticket = JSON.parse(body).ticket\n       let nonce_str = '123456'    // 密钥，字符串任意，可以随机生成\n       let timestamp = new Date().getTime()  // 时间戳\n       let url = req.query.url   // 使用接口的url链接，不包含#后的内容\n\n       // 将请求以上字符串，先按字典排序，再以'&'拼接，如下：其中j > n > t > u，此处直接手动排序\n       let str = 'jsapi_ticket=' + jsapi_ticket + '&noncestr=' + nonce_str + '&timestamp=' + timestamp + '&url=' + url\n\n       // 用sha1加密\n       let signature = sha1(str)\n\n       res.send({\n         appId: appid,\n         timestamp: timpstamp,\n         nonceStr: nonce_str,\n         signature: signature,\n       })\n    })\n  })\n})\n```\n\n## 前端请求后端接口，获取配置信息\n### 获取配置\n``` javascript\naxios.post('/wxJssdk/getJssdk', {url: location.href}).then((response) => {\n  var data = response.data\n\n  wx.config({\n    debug: false, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。\n    appId: data.appId, // 必填，公众号的唯一标识\n    timestamp: data.timestamp, // 必填，生成签名的时间戳\n    nonceStr: data.nonceStr, // 必填，生成签名的随机串\n    signature: data.signature,// 必填，签名，见附录1\n    jsApiList: ['onMenuShareTimeline', 'onMenuShareAppMessage'] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2\n  });\n\n})\n\n```\n### 做你想做的，比如，自定义分享\n``` javascript\nif (wx) {\n  axios.post('/wxJssdk/getJssdk', {url: location.href}).then((response) => {\n    var data = response.data\n\n    wx.config({\n      debug: false, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。\n      appId: data.appId, // 必填，公众号的唯一标识\n      timestamp: data.timestamp, // 必填，生成签名的时间戳\n      nonceStr: data.nonceStr, // 必填，生成签名的随机串\n      signature: data.signature,// 必填，签名，见附录1\n      jsApiList: ['onMenuShareTimeline', 'onMenuShareAppMessage'] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2\n    });\n\n    wx.ready(function () {\n      wx.onMenuShareTimeline({\n      title: wxShare.title,\n      desc: wxShare.desc,\n      link: wxShare.link,\n      imgUrl: wxShare.imgUrl\n      });\n\n      wx.onMenuShareAppMessage({\n      title: wxShare.title,\n      desc: wxShare.desc,\n      link: wxShare.link,\n      imgUrl: wxShare.imgUrl\n    });\n  })\n\n    wx.error(function (res) {\n       // config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。\n    })\n  })\n\n}\n\n```\n至此，后端配置好了，我们已经能够正常使用微信的接口了，但是微信每日接口请求是有上限的，通过2000次/天，因此如果网站上线后，一量当天访问量超过2000次你的接口将失效，而且每次都请求微信接口两次，造成请求时间浪费，所以我们需要将以上获取信息缓存在后端，避免造成接口失效以及多次请求微信后台。\n\n## 缓存access_token及jsapi_ticket\n此处直接上代码，利用node_cache包进行缓存\n``` javascript\nconst request = require('request')\nconst express = require('express')\nconst app = express()\nconst sha1 = require('sha1')\nconst waterfall = require('async/waterfall')\nconst NodeCache = require('node-cache')\nconst cache = new NodeCache({stdTTL: 3600, checkperiod: 3600}) //3600秒后过过期\n\napp.get('/wxJssdk', (req, res) => {\n  let wx = req.query\n\n  // 1）将token、timestamp、nonce三个参数进行字典序排序\n  let token = 'jegfjaeghfuyawegfgjdbh'\n  let timestamp = wx.timestamp\n  let nonce = wx.nonce\n\n  // 2）将三个参数字符串拼接成一个字符串进行sha1加密\n  let list = [token, timestamp, nonce]\n  let result = sha1(list.sort().join(''))\n\n  // 3）开发者获得加密后的字符串可与signature对比，标识该请求来源于微信\n  if (result === wx.signature) {\n    res.send(wx.echostr)\n  } else {\n    res.send(false)\n  }\n})\n\napp.get('/wxJssdk/getJssdk', (req, res) => {\n  let grant_type = 'client_credential'\n  let appid = 'your app id'\n  let secret = 'your app secret' // appscret\n\n  let steps = []\n\n  // 第一步，获取access_token\n  steps.push((cb) => {\n\n  let steps1 = []\n\n    // 第1.1步，从缓存中读取access_token\n    steps1.push((cb1) => {\n      let access_token = cache.get('access_token', (err, access_token) => {\n        cb1(err, access_token)\n      })\n    })\n\n    // 第1.2步，缓存中有access_token则直接返回，如果没有，则从服务器中读取access_token\n    steps1.push((access_token, cb1) => {\n      if (access_token) {\n        cb1(null, access_token, 'from_cache')\n      } else {\n        request('https://api.weixin.qq.com/cgi-bin/token?grant_type=' + grant_type + '&appid=' + appid + '&secret=' + secret, (err, response, body) => {\n          cb1(err, JSON.parse(body).access_token, 'from_server')\n        })\n      }\n    })\n\n    // 第1.3步，如果是新从服务器取的access_token，则缓存起来，否则直接返回\n    steps1.push((access_token, from_where, cb1) => {\n      if (from_where === 'from_cache') {\n        console.log(' === 成功从缓存中读取access_token: ' + access_token + ' ===')\n        cb1(null, access_token)\n      } else if (from_where === 'from_server') {\n        cache.set('access_token', access_token, (err, success) => {\n          if (!err && success) {\n            console.log(' === 缓存已过期，从服务器中读取access_token: ' + access_token + ' ===')\n            cb1(null, access_token)\n          } else {\n            cb1(err || 'cache设置access_token时，出现未知错误')\n          }\n        })\n      } else {\n        cb1('1.3获取from_where时，from_where值为空')\n      }\n    })\n\n\n\n    waterfall(steps1, (err, access_token) => {\n      cb(err, access_token)\n    })\n  })\n\n\n  // 第二步，获取ticket\n  steps.push((access_token, cb) => {\n    let steps1 = []\n\n    // 第2.1步，从缓存中读取ticket\n    steps1.push((cb1) => {\n      let ticket = cache.get('ticket', (err, ticket) => {\n        cb1(err, ticket)\n      })\n    })\n\n    // 第2.2步，缓存中有ticket则直接返回，如果没有，则从服务器中读取ticket\n    steps1.push((ticket, cb1) => {\n      if (ticket) {\n        cb1(null, ticket, 'from_cache')\n      } else {\n        request('https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=' + access_token + '&type=jsapi', (err, response, body) => {\n          cb1(err, JSON.parse(body).ticket, 'from_server')\n        })\n      }\n    })\n\n    // 第2.3步，如果新从服务器取的ticket，则缓存起来，否则直接返回\n    steps1.push((ticket, from_where, cb1) => {\n      if (from_where === 'from_cache') {\n        console.log(' === 成功从缓存中读取ticket: ' + ticket + ' ===')\n        cb1(null, ticket)\n      } else if (from_where === 'from_server') {\n        cache.set('ticket', ticket, (err, success) => {\n          if (!err && success) {\n            console.log(' === 缓存已过期，从服务器中读取ticket: ' + ticket + ' ===');\n            cb1(null, ticket)\n          } else {\n            cb1(err || 'cache设置ticket时，出现未知错误')\n          }\n        })\n      } else {\n        cb1('2.3获取from_where时，from_where值为空')\n      }\n    })\n\n    waterfall(steps1, (err, ticket) => {\n      cb(err, ticket)\n    })\n  })\n\n\n  // 第三步，生成签名\n  steps.push((ticket, cb) => {\n    let jsapi_ticket = ticket\n    let nonce_str = '123456'\n    let timestamp = new Date().getTime()\n    let url = req.query.url\n\n    let str = 'jsapi_ticket=' + jsapi_ticket + '&noncestr=' + nonce_str + '&timestamp=' + timestamp + '&url=' + url\n    let signature = sha1(str)\n\n    cb(null, {\n      appId: appid,\n      timestamp: timestamp,\n      nonceStr: nonce_str,\n      signature: signature,\n      ticket: ticket\n    })\n  })\n\n  waterfall(steps, (err, data) => {\n    if (err) {\n      res.send({status: 'error', data: err})\n    } else {\n      res.send({status: 'success', data: data})\n    }\n  })\n})\n\napp.use('/wxJssdk/public', express.static('public'))\n\napp.listen(80, err => {\n  if(!err) console.log('connect succeed')\n})\n\n```\n","source":"_posts/wechat-jssdk.md","raw":"---\ntitle: 微信JSSDK测试接口的Node实现\ndate: 2017-07-13 16:30:56\ntags: [Wechat, JSSDK, Node.js, Chinese]\n---\n\n做了一个网站，放到线上，用微信打开，点击分享，可是分享后发给朋友的链接卡片是微信默认自带的，如下：\n{% asset_img default_share.png 默认分享 %}\n<br/>\n这标题，描述以及图片是默认自带的，丑不说，分享给别人还以为是盗号网站呢，而接入微信的JSSDK后，分享可以自定义内容，如下：\n{% asset_img jssdk_share.png 接口分享 %}\n<br/>\n我承认，虽然这分享的标题和内容也并不正经，但这不妨碍我表达**我们可以通过微信JSSDK定义分享内容**，接下来我们将一步一步从零实现JSSDK从后端Node.js的接入。\n\n## 成为测试公众号开发者\n### 登录测试公众号后台\n首先我们需要在[微信公众平台](https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login)申请测试接口，地址：https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login\n使用微信扫描登录后，即可来微信公众平台测试账号系统。\n\n### 成为测试公众号开发者\n其次在微信公众平台测试账号中，扫描测试号二维码，成为测试公众号的开发者\n\n\n## 接口配置信息\n### 修改接口配置信息\n1. URL地址必须是你服务器上的地址，此地址要能通过浏览器的地址栏访问到（没有服务器？没关系，一会儿我们搭建一个）\n假设我这里填写的服务器地址是\"http://www.your_server_name.com/wxJssdk\"\n2. Token你可以随意填写，用作生成签名，（不知道签名？没关系，一会儿会用到这东西的）\n假设我这里填写的Token是\"[jegfjaeghfuccawegfgjdbh]()\"\n\n此时点击提交是会提示配置失败的，因为在提交的时候，微信是会请求你的服务器地址，而你的当前配置的地址并不能访问，所以会提示配置失败。不过别急，我们先来搭建一个简单的Node服务器，让微信能够访问该服务器。\n\n### 搭建简单的Node服务器\n我们需要在http://www.your_server_name.com 这个域名上搭建一个服务器，并且曝出一个接口为`/wxJssdk`\n``` javascript\nconst express = require('express')\nconst app = express()\n\napp.get('/wxJssdk', (req, res) => {\n  res.send('请求成功了了了了')\n})\n\napp.listen(80, err => {\n  if(!err) console.log('connect succeed')\n})\n```\n现在我们在地址栏中访问http://www.your_server_name.com/wxJssdk ，如果页面显示“请求成功了了了了”，则进入到下一步，如果没有成功的话，检查一下你的服务器是否开启Node服务器，如：`node index.js`\n\n此时保存微信测试公众号后台的接口配置信息，仍然会提示配置失败，这是因为我们没有按照它的要求返回。\n\n### 根据微信测试公众号请求信息返回对应内容\n根据[微信公众号开发文档接入指南](https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421135319)，微信在请求我们配置的接口时，会带上如下信息\n\n| 参数 | 描述 |\n| :--- | :--- |\n|signature|微信加密签名，signature结合了开发者填写的token参数和请求中的timestamp参数、nonce参数。|\n|timestamp|时间戳|\n|nonce|随机数|\n|echostr|随机字符串|\n微信服务器会通过GET请求，来请求我们所配置的接口，并带上以上表格的信息，而我们必须按照以下要求，将微信发送的信息进行要求校验，以确保是微信发送的信息，其中校验流程如下：\n  > 1）将token、timestamp、nonce三个参数进行字典序排序\n2）将三个参数字符串拼接成一个字符串进行sha1加密\n3）开发者获得加密后的字符串可与signature对比，标识该请求来源于微信\n\n``` javascript\nconst express = require('express')\nconst app = express()\nconst sha1 = require('sha1')\n\napp.get('/wxJssdk', (req, res) => {\n  let wx = req.query\n\n  let token = 'jegfjaeghfuccawegfgjdbh'\n  let timestamp = wx.timestamp\n  let nonce = wx.nonce\n\n  // 1）将token、timestamp、nonce三个参数进行字典序排序\n  let list = [token, timestamp, nonce].sort()\n\n  // 2）将三个参数字符串拼接成一个字符串进行sha1加密\n  let str = list.join('')\n  let result = sha1(str)\n\n  // 3）开发者获得加密后的字符串可与signature对比，标识该请求来源于微信\n  if (result === wx.signature) {\n    res.send(wx.echostr) // 返回微信传来的echostr，表示校验成功，此处不能返回其它\n  } else {\n    res.send(false)\n  }\n})\n```\n此时我们重启Node服务器，再次保存接口配置信息即可配置成功。\n\n## 微信JSSDK使用步骤\n根据[微信JSSDK说明文档](https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421141115)，我们需要完成如下：\n### 填写安全域名\n登录微信公众平台进入“公众号设置”的“功能设置”里填写“JS接口安全域名”，即要调用接口的域名，不包含协议\n### 前端引入JS\n在需要调用JS接口的页面引入此JS文件，（支持https）：http://res.wx.qq.com/open/js/jweixin-1.2.0.js\n### 填写接口的配置信息\n``` javascript\nwx.config({\n  debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。\n  appId: '', // 必填，公众号的唯一标识\n  timestamp: , // 必填，生成签名的时间戳\n  nonceStr: '', // 必填，生成签名的随机串\n  signature: '',// 必填，签名\n  jsApiList: [] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2\n});\n```\n### 调用接口\n做你前端该做的，调用微信分享接口，或微信提供的其它接口，whatever you need，当然，这并不是我们所要讲的重点，我们接下来要看一下微信的配置信息从哪获取\n\n## 在Node服务器中生成jssdk所需要的配置信息\n从上一节可以看到，调用微信JSSDK需要以下信息\n1. appId\n2. timestamp\n3. nonceStr\n4. signature\n5. jsApiList\n\n其中：\n1. 第1项appId是测试公众号后台的appId，我们已知\n2. 第2项时间戳我们也可以自己生成\n3. 第3项nonceStr可以随意填写，你可以理解为密钥\n4. 第4项signature则需要我们按要求生成\n5. 第5项是所需要接口的接口名\n\n### 生成signature\n> 生成签名之前必须先了解一下jsapi_ticket，jsapi_ticket是公众号用于调用微信JS接口的临时票据。正常情况下，jsapi_ticket的有效期为7200秒，通过access_token来获取。由于获取jsapi_ticket的api调用次数非常有限，频繁刷新jsapi_ticket会导致api调用受限，影响自身业务，开发者必须在自己的服务全局缓存jsapi_ticket 。\n\n为了保证我们appid，appsecret，nonceStr等信息不在前端曝露，我们以下步骤将在服务器上进行操作，以免他人盗用信息获取（注：微信请求有每日次数限制，一旦超出，则无法使用，具体请求次数限制在微信公众号后台中可查看）\n\n#### 生成access_token\n根据微信开发文档[获取access_token文档说明]，我们需要将微信测试公众号后台的appid和和appsecret以GET的请求方式向https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=APPID&secret=APPSECRET 发起请求获取token，请求成功后我们会获得下返回JSON转化的字符串\n``` JSON\n{\"access_token\":\"ACCESS_TOKEN\",\"expires_in\":7200}\n```\n具体请求代码如下：\n``` javascript\nconst request = require('request')\n\nconst grant_type = 'client_credential'\nconst appid = 'your app id'\nconst secret = 'your app secret'\n\nrequest('https://api.weixin.qq.com/cgi-bin/token?grant_type=' + grant_type + '&appid=' + appid + '&secret=' + secret, (err, response, body) => {\n  let access_toekn = JSON.parse(body).access_token\n})\n```\n#### 获取jsapi_ticket\n``` javascript\nconst request = require('request')\n\nconst grant_type = 'client_credential'\nconst appid = 'your app id'\nconst secret = 'your app secret'\n\nrequest('https://api.weixin.qq.com/cgi-bin/token?grant_type=' + grant_type + '&appid=' + appid + '&secret=' + secret, (err, response, body) => {\n  let access_toekn = JSON.parse(body).access_token\n\n  request('https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=' + access_token + '&type=jsapi', (err, response, body) => {\n     let jsapi_ticket = JSON.parse(body).ticket\n  })\n})\n```\n\n#### 生成签名\n生成签名的步骤和最开始的`/wxJssdk`的算法是一致的，具体如下：\n``` javascript\nlet jsapi_ticket = jsapi_ticket  // 上一步从获取的jsapi_ticket\nlet nonce_str = '123456'    // 密钥，字符串任意，可以随机生成\nlet timestamp = new Date().getTime()  // 时间戳\nlet url = req.query.url   // 使用接口的url链接，不包含#后的内容\n\n// 将请求以上字符串，先按字典排序，再以'&'拼接，如下：其中j > n > t > u，此处直接手动排序\nlet str = 'jsapi_ticket=' + jsapi_ticket + '&noncestr=' + nonce_str + '&timestamp=' + timestamp + '&url=' + url\n\n// 用sha1加密\nlet signature = sha1(str)\n```\n\n连接后的代码为：\n``` javascript\nconst request = require('request')\n\nconst grant_type = 'client_credential'\nconst appid = 'your app id'\nconst secret = 'your app secret'\n\nrequest('https://api.weixin.qq.com/cgi-bin/token?grant_type=' + grant_type + '&appid=' + appid + '&secret=' + secret, (err, response, body) => {\n  let access_toekn = JSON.parse(body).access_token\n\n  request('https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=' + access_token + '&type=jsapi', (err, response, body) => {\n     let jsapi_ticket = JSON.parse(body).ticket\n     let nonce_str = '123456'    // 密钥，字符串任意，可以随机生成\n     let timestamp = new Date().getTime()  // 时间戳\n     let url = req.query.url   // 使用接口的url链接，不包含#后的内容\n\n     // 将请求以上字符串，先按字典排序，再以'&'拼接，如下：其中j > n > t > u，此处直接手动排序\n     let str = 'jsapi_ticket=' + jsapi_ticket + '&noncestr=' + nonce_str + '&timestamp=' + timestamp + '&url=' + url\n\n     // 用sha1加密\n     let signature = sha1(str)\n  })\n})\n```\n\n### 曝露接口，返回给前端\n``` javascript\napp.post('/wxJssdk/getJssdk', (req, res) => {\n  const request = require('request')\n\n  const grant_type = 'client_credential'\n  const appid = 'your app id'\n  const secret = 'your app secret'\n\n  request('https://api.weixin.qq.com/cgi-bin/token?grant_type=' + grant_type + '&appid=' + appid + '&secret=' + secret, (err, response, body) => {\n    let access_toekn = JSON.parse(body).access_token\n\n    request('https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=' + access_token + '&type=jsapi', (err, response, body) => {\n       let jsapi_ticket = JSON.parse(body).ticket\n       let nonce_str = '123456'    // 密钥，字符串任意，可以随机生成\n       let timestamp = new Date().getTime()  // 时间戳\n       let url = req.query.url   // 使用接口的url链接，不包含#后的内容\n\n       // 将请求以上字符串，先按字典排序，再以'&'拼接，如下：其中j > n > t > u，此处直接手动排序\n       let str = 'jsapi_ticket=' + jsapi_ticket + '&noncestr=' + nonce_str + '&timestamp=' + timestamp + '&url=' + url\n\n       // 用sha1加密\n       let signature = sha1(str)\n\n       res.send({\n         appId: appid,\n         timestamp: timpstamp,\n         nonceStr: nonce_str,\n         signature: signature,\n       })\n    })\n  })\n})\n```\n\n## 前端请求后端接口，获取配置信息\n### 获取配置\n``` javascript\naxios.post('/wxJssdk/getJssdk', {url: location.href}).then((response) => {\n  var data = response.data\n\n  wx.config({\n    debug: false, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。\n    appId: data.appId, // 必填，公众号的唯一标识\n    timestamp: data.timestamp, // 必填，生成签名的时间戳\n    nonceStr: data.nonceStr, // 必填，生成签名的随机串\n    signature: data.signature,// 必填，签名，见附录1\n    jsApiList: ['onMenuShareTimeline', 'onMenuShareAppMessage'] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2\n  });\n\n})\n\n```\n### 做你想做的，比如，自定义分享\n``` javascript\nif (wx) {\n  axios.post('/wxJssdk/getJssdk', {url: location.href}).then((response) => {\n    var data = response.data\n\n    wx.config({\n      debug: false, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。\n      appId: data.appId, // 必填，公众号的唯一标识\n      timestamp: data.timestamp, // 必填，生成签名的时间戳\n      nonceStr: data.nonceStr, // 必填，生成签名的随机串\n      signature: data.signature,// 必填，签名，见附录1\n      jsApiList: ['onMenuShareTimeline', 'onMenuShareAppMessage'] // 必填，需要使用的JS接口列表，所有JS接口列表见附录2\n    });\n\n    wx.ready(function () {\n      wx.onMenuShareTimeline({\n      title: wxShare.title,\n      desc: wxShare.desc,\n      link: wxShare.link,\n      imgUrl: wxShare.imgUrl\n      });\n\n      wx.onMenuShareAppMessage({\n      title: wxShare.title,\n      desc: wxShare.desc,\n      link: wxShare.link,\n      imgUrl: wxShare.imgUrl\n    });\n  })\n\n    wx.error(function (res) {\n       // config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。\n    })\n  })\n\n}\n\n```\n至此，后端配置好了，我们已经能够正常使用微信的接口了，但是微信每日接口请求是有上限的，通过2000次/天，因此如果网站上线后，一量当天访问量超过2000次你的接口将失效，而且每次都请求微信接口两次，造成请求时间浪费，所以我们需要将以上获取信息缓存在后端，避免造成接口失效以及多次请求微信后台。\n\n## 缓存access_token及jsapi_ticket\n此处直接上代码，利用node_cache包进行缓存\n``` javascript\nconst request = require('request')\nconst express = require('express')\nconst app = express()\nconst sha1 = require('sha1')\nconst waterfall = require('async/waterfall')\nconst NodeCache = require('node-cache')\nconst cache = new NodeCache({stdTTL: 3600, checkperiod: 3600}) //3600秒后过过期\n\napp.get('/wxJssdk', (req, res) => {\n  let wx = req.query\n\n  // 1）将token、timestamp、nonce三个参数进行字典序排序\n  let token = 'jegfjaeghfuyawegfgjdbh'\n  let timestamp = wx.timestamp\n  let nonce = wx.nonce\n\n  // 2）将三个参数字符串拼接成一个字符串进行sha1加密\n  let list = [token, timestamp, nonce]\n  let result = sha1(list.sort().join(''))\n\n  // 3）开发者获得加密后的字符串可与signature对比，标识该请求来源于微信\n  if (result === wx.signature) {\n    res.send(wx.echostr)\n  } else {\n    res.send(false)\n  }\n})\n\napp.get('/wxJssdk/getJssdk', (req, res) => {\n  let grant_type = 'client_credential'\n  let appid = 'your app id'\n  let secret = 'your app secret' // appscret\n\n  let steps = []\n\n  // 第一步，获取access_token\n  steps.push((cb) => {\n\n  let steps1 = []\n\n    // 第1.1步，从缓存中读取access_token\n    steps1.push((cb1) => {\n      let access_token = cache.get('access_token', (err, access_token) => {\n        cb1(err, access_token)\n      })\n    })\n\n    // 第1.2步，缓存中有access_token则直接返回，如果没有，则从服务器中读取access_token\n    steps1.push((access_token, cb1) => {\n      if (access_token) {\n        cb1(null, access_token, 'from_cache')\n      } else {\n        request('https://api.weixin.qq.com/cgi-bin/token?grant_type=' + grant_type + '&appid=' + appid + '&secret=' + secret, (err, response, body) => {\n          cb1(err, JSON.parse(body).access_token, 'from_server')\n        })\n      }\n    })\n\n    // 第1.3步，如果是新从服务器取的access_token，则缓存起来，否则直接返回\n    steps1.push((access_token, from_where, cb1) => {\n      if (from_where === 'from_cache') {\n        console.log(' === 成功从缓存中读取access_token: ' + access_token + ' ===')\n        cb1(null, access_token)\n      } else if (from_where === 'from_server') {\n        cache.set('access_token', access_token, (err, success) => {\n          if (!err && success) {\n            console.log(' === 缓存已过期，从服务器中读取access_token: ' + access_token + ' ===')\n            cb1(null, access_token)\n          } else {\n            cb1(err || 'cache设置access_token时，出现未知错误')\n          }\n        })\n      } else {\n        cb1('1.3获取from_where时，from_where值为空')\n      }\n    })\n\n\n\n    waterfall(steps1, (err, access_token) => {\n      cb(err, access_token)\n    })\n  })\n\n\n  // 第二步，获取ticket\n  steps.push((access_token, cb) => {\n    let steps1 = []\n\n    // 第2.1步，从缓存中读取ticket\n    steps1.push((cb1) => {\n      let ticket = cache.get('ticket', (err, ticket) => {\n        cb1(err, ticket)\n      })\n    })\n\n    // 第2.2步，缓存中有ticket则直接返回，如果没有，则从服务器中读取ticket\n    steps1.push((ticket, cb1) => {\n      if (ticket) {\n        cb1(null, ticket, 'from_cache')\n      } else {\n        request('https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=' + access_token + '&type=jsapi', (err, response, body) => {\n          cb1(err, JSON.parse(body).ticket, 'from_server')\n        })\n      }\n    })\n\n    // 第2.3步，如果新从服务器取的ticket，则缓存起来，否则直接返回\n    steps1.push((ticket, from_where, cb1) => {\n      if (from_where === 'from_cache') {\n        console.log(' === 成功从缓存中读取ticket: ' + ticket + ' ===')\n        cb1(null, ticket)\n      } else if (from_where === 'from_server') {\n        cache.set('ticket', ticket, (err, success) => {\n          if (!err && success) {\n            console.log(' === 缓存已过期，从服务器中读取ticket: ' + ticket + ' ===');\n            cb1(null, ticket)\n          } else {\n            cb1(err || 'cache设置ticket时，出现未知错误')\n          }\n        })\n      } else {\n        cb1('2.3获取from_where时，from_where值为空')\n      }\n    })\n\n    waterfall(steps1, (err, ticket) => {\n      cb(err, ticket)\n    })\n  })\n\n\n  // 第三步，生成签名\n  steps.push((ticket, cb) => {\n    let jsapi_ticket = ticket\n    let nonce_str = '123456'\n    let timestamp = new Date().getTime()\n    let url = req.query.url\n\n    let str = 'jsapi_ticket=' + jsapi_ticket + '&noncestr=' + nonce_str + '&timestamp=' + timestamp + '&url=' + url\n    let signature = sha1(str)\n\n    cb(null, {\n      appId: appid,\n      timestamp: timestamp,\n      nonceStr: nonce_str,\n      signature: signature,\n      ticket: ticket\n    })\n  })\n\n  waterfall(steps, (err, data) => {\n    if (err) {\n      res.send({status: 'error', data: err})\n    } else {\n      res.send({status: 'success', data: data})\n    }\n  })\n})\n\napp.use('/wxJssdk/public', express.static('public'))\n\napp.listen(80, err => {\n  if(!err) console.log('connect succeed')\n})\n\n```\n","slug":"wechat-jssdk","published":1,"updated":"2017-07-14T08:15:38.929Z","_id":"cj526dkby000agklemorpp0wc","comments":1,"layout":"post","photos":[],"link":"","content":"<p>做了一个网站，放到线上，用微信打开，点击分享，可是分享后发给朋友的链接卡片是微信默认自带的，如下：<br><img src=\"/2017/07/13/wechat-jssdk/default_share.png\" alt=\"默认分享\" title=\"默认分享\"><br><br><br>这标题，描述以及图片是默认自带的，丑不说，分享给别人还以为是盗号网站呢，而接入微信的JSSDK后，分享可以自定义内容，如下：<br><img src=\"/2017/07/13/wechat-jssdk/jssdk_share.png\" alt=\"接口分享\" title=\"接口分享\"><br><br><br>我承认，虽然这分享的标题和内容也并不正经，但这不妨碍我表达<strong>我们可以通过微信JSSDK定义分享内容</strong>，接下来我们将一步一步从零实现JSSDK从后端Node.js的接入。</p>\n<h2 id=\"成为测试公众号开发者\"><a href=\"#成为测试公众号开发者\" class=\"headerlink\" title=\"成为测试公众号开发者\"></a>成为测试公众号开发者</h2><h3 id=\"登录测试公众号后台\"><a href=\"#登录测试公众号后台\" class=\"headerlink\" title=\"登录测试公众号后台\"></a>登录测试公众号后台</h3><p>首先我们需要在<a href=\"https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login\" target=\"_blank\" rel=\"external\">微信公众平台</a>申请测试接口，地址：<a href=\"https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login\" target=\"_blank\" rel=\"external\">https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login</a><br>使用微信扫描登录后，即可来微信公众平台测试账号系统。</p>\n<h3 id=\"成为测试公众号开发者-1\"><a href=\"#成为测试公众号开发者-1\" class=\"headerlink\" title=\"成为测试公众号开发者\"></a>成为测试公众号开发者</h3><p>其次在微信公众平台测试账号中，扫描测试号二维码，成为测试公众号的开发者</p>\n<h2 id=\"接口配置信息\"><a href=\"#接口配置信息\" class=\"headerlink\" title=\"接口配置信息\"></a>接口配置信息</h2><h3 id=\"修改接口配置信息\"><a href=\"#修改接口配置信息\" class=\"headerlink\" title=\"修改接口配置信息\"></a>修改接口配置信息</h3><ol>\n<li>URL地址必须是你服务器上的地址，此地址要能通过浏览器的地址栏访问到（没有服务器？没关系，一会儿我们搭建一个）<br>假设我这里填写的服务器地址是”<a href=\"http://www.your_server_name.com/wxJssdk\" target=\"_blank\" rel=\"external\">http://www.your_server_name.com/wxJssdk</a>“</li>\n<li>Token你可以随意填写，用作生成签名，（不知道签名？没关系，一会儿会用到这东西的）<br>假设我这里填写的Token是”<a href=\"\">jegfjaeghfuccawegfgjdbh</a>“</li>\n</ol>\n<p>此时点击提交是会提示配置失败的，因为在提交的时候，微信是会请求你的服务器地址，而你的当前配置的地址并不能访问，所以会提示配置失败。不过别急，我们先来搭建一个简单的Node服务器，让微信能够访问该服务器。</p>\n<h3 id=\"搭建简单的Node服务器\"><a href=\"#搭建简单的Node服务器\" class=\"headerlink\" title=\"搭建简单的Node服务器\"></a>搭建简单的Node服务器</h3><p>我们需要在<a href=\"http://www.your_server_name.com\" target=\"_blank\" rel=\"external\">http://www.your_server_name.com</a> 这个域名上搭建一个服务器，并且曝出一个接口为<code>/wxJssdk</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> app = express()</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/wxJssdk'</span>, (req, res) =&gt; &#123;</div><div class=\"line\">  res.send(<span class=\"string\">'请求成功了了了了'</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">app.listen(<span class=\"number\">80</span>, err =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(!err) <span class=\"built_in\">console</span>.log(<span class=\"string\">'connect succeed'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>现在我们在地址栏中访问<a href=\"http://www.your_server_name.com/wxJssdk\" target=\"_blank\" rel=\"external\">http://www.your_server_name.com/wxJssdk</a> ，如果页面显示“请求成功了了了了”，则进入到下一步，如果没有成功的话，检查一下你的服务器是否开启Node服务器，如：<code>node index.js</code></p>\n<p>此时保存微信测试公众号后台的接口配置信息，仍然会提示配置失败，这是因为我们没有按照它的要求返回。</p>\n<h3 id=\"根据微信测试公众号请求信息返回对应内容\"><a href=\"#根据微信测试公众号请求信息返回对应内容\" class=\"headerlink\" title=\"根据微信测试公众号请求信息返回对应内容\"></a>根据微信测试公众号请求信息返回对应内容</h3><p>根据<a href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421135319\" target=\"_blank\" rel=\"external\">微信公众号开发文档接入指南</a>，微信在请求我们配置的接口时，会带上如下信息</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">signature</td>\n<td style=\"text-align:left\">微信加密签名，signature结合了开发者填写的token参数和请求中的timestamp参数、nonce参数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">timestamp</td>\n<td style=\"text-align:left\">时间戳</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">nonce</td>\n<td style=\"text-align:left\">随机数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">echostr</td>\n<td style=\"text-align:left\">随机字符串</td>\n</tr>\n</tbody>\n</table>\n<p>微信服务器会通过GET请求，来请求我们所配置的接口，并带上以上表格的信息，而我们必须按照以下要求，将微信发送的信息进行要求校验，以确保是微信发送的信息，其中校验流程如下：</p>\n<blockquote>\n<p>1）将token、timestamp、nonce三个参数进行字典序排序<br>2）将三个参数字符串拼接成一个字符串进行sha1加密<br>3）开发者获得加密后的字符串可与signature对比，标识该请求来源于微信</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> app = express()</div><div class=\"line\"><span class=\"keyword\">const</span> sha1 = <span class=\"built_in\">require</span>(<span class=\"string\">'sha1'</span>)</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/wxJssdk'</span>, (req, res) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> wx = req.query</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> token = <span class=\"string\">'jegfjaeghfuccawegfgjdbh'</span></div><div class=\"line\">  <span class=\"keyword\">let</span> timestamp = wx.timestamp</div><div class=\"line\">  <span class=\"keyword\">let</span> nonce = wx.nonce</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 1）将token、timestamp、nonce三个参数进行字典序排序</span></div><div class=\"line\">  <span class=\"keyword\">let</span> list = [token, timestamp, nonce].sort()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 2）将三个参数字符串拼接成一个字符串进行sha1加密</span></div><div class=\"line\">  <span class=\"keyword\">let</span> str = list.join(<span class=\"string\">''</span>)</div><div class=\"line\">  <span class=\"keyword\">let</span> result = sha1(str)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 3）开发者获得加密后的字符串可与signature对比，标识该请求来源于微信</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (result === wx.signature) &#123;</div><div class=\"line\">    res.send(wx.echostr) <span class=\"comment\">// 返回微信传来的echostr，表示校验成功，此处不能返回其它</span></div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    res.send(<span class=\"literal\">false</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>此时我们重启Node服务器，再次保存接口配置信息即可配置成功。</p>\n<h2 id=\"微信JSSDK使用步骤\"><a href=\"#微信JSSDK使用步骤\" class=\"headerlink\" title=\"微信JSSDK使用步骤\"></a>微信JSSDK使用步骤</h2><p>根据<a href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115\" target=\"_blank\" rel=\"external\">微信JSSDK说明文档</a>，我们需要完成如下：</p>\n<h3 id=\"填写安全域名\"><a href=\"#填写安全域名\" class=\"headerlink\" title=\"填写安全域名\"></a>填写安全域名</h3><p>登录微信公众平台进入“公众号设置”的“功能设置”里填写“JS接口安全域名”，即要调用接口的域名，不包含协议</p>\n<h3 id=\"前端引入JS\"><a href=\"#前端引入JS\" class=\"headerlink\" title=\"前端引入JS\"></a>前端引入JS</h3><p>在需要调用JS接口的页面引入此JS文件，（支持https）：<a href=\"http://res.wx.qq.com/open/js/jweixin-1.2.0.js\" target=\"_blank\" rel=\"external\">http://res.wx.qq.com/open/js/jweixin-1.2.0.js</a></p>\n<h3 id=\"填写接口的配置信息\"><a href=\"#填写接口的配置信息\" class=\"headerlink\" title=\"填写接口的配置信息\"></a>填写接口的配置信息</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">wx.config(&#123;</div><div class=\"line\">  <span class=\"attr\">debug</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></div><div class=\"line\">  appId: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，公众号的唯一标识</span></div><div class=\"line\">  timestamp: , <span class=\"comment\">// 必填，生成签名的时间戳</span></div><div class=\"line\">  nonceStr: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，生成签名的随机串</span></div><div class=\"line\">  signature: <span class=\"string\">''</span>,<span class=\"comment\">// 必填，签名</span></div><div class=\"line\">  jsApiList: [] <span class=\"comment\">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"调用接口\"><a href=\"#调用接口\" class=\"headerlink\" title=\"调用接口\"></a>调用接口</h3><p>做你前端该做的，调用微信分享接口，或微信提供的其它接口，whatever you need，当然，这并不是我们所要讲的重点，我们接下来要看一下微信的配置信息从哪获取</p>\n<h2 id=\"在Node服务器中生成jssdk所需要的配置信息\"><a href=\"#在Node服务器中生成jssdk所需要的配置信息\" class=\"headerlink\" title=\"在Node服务器中生成jssdk所需要的配置信息\"></a>在Node服务器中生成jssdk所需要的配置信息</h2><p>从上一节可以看到，调用微信JSSDK需要以下信息</p>\n<ol>\n<li>appId</li>\n<li>timestamp</li>\n<li>nonceStr</li>\n<li>signature</li>\n<li>jsApiList</li>\n</ol>\n<p>其中：</p>\n<ol>\n<li>第1项appId是测试公众号后台的appId，我们已知</li>\n<li>第2项时间戳我们也可以自己生成</li>\n<li>第3项nonceStr可以随意填写，你可以理解为密钥</li>\n<li>第4项signature则需要我们按要求生成</li>\n<li>第5项是所需要接口的接口名</li>\n</ol>\n<h3 id=\"生成signature\"><a href=\"#生成signature\" class=\"headerlink\" title=\"生成signature\"></a>生成signature</h3><blockquote>\n<p>生成签名之前必须先了解一下jsapi_ticket，jsapi_ticket是公众号用于调用微信JS接口的临时票据。正常情况下，jsapi_ticket的有效期为7200秒，通过access_token来获取。由于获取jsapi_ticket的api调用次数非常有限，频繁刷新jsapi_ticket会导致api调用受限，影响自身业务，开发者必须在自己的服务全局缓存jsapi_ticket 。</p>\n</blockquote>\n<p>为了保证我们appid，appsecret，nonceStr等信息不在前端曝露，我们以下步骤将在服务器上进行操作，以免他人盗用信息获取（注：微信请求有每日次数限制，一旦超出，则无法使用，具体请求次数限制在微信公众号后台中可查看）</p>\n<h4 id=\"生成access-token\"><a href=\"#生成access-token\" class=\"headerlink\" title=\"生成access_token\"></a>生成access_token</h4><p>根据微信开发文档[获取access_token文档说明]，我们需要将微信测试公众号后台的appid和和appsecret以GET的请求方式向<a href=\"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET\" target=\"_blank\" rel=\"external\">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET</a> 发起请求获取token，请求成功后我们会获得下返回JSON转化的字符串<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;<span class=\"attr\">\"access_token\"</span>:<span class=\"string\">\"ACCESS_TOKEN\"</span>,<span class=\"attr\">\"expires_in\"</span>:<span class=\"number\">7200</span>&#125;</div></pre></td></tr></table></figure></p>\n<p>具体请求代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> grant_type = <span class=\"string\">'client_credential'</span></div><div class=\"line\"><span class=\"keyword\">const</span> appid = <span class=\"string\">'your app id'</span></div><div class=\"line\"><span class=\"keyword\">const</span> secret = <span class=\"string\">'your app secret'</span></div><div class=\"line\"></div><div class=\"line\">request(<span class=\"string\">'https://api.weixin.qq.com/cgi-bin/token?grant_type='</span> + grant_type + <span class=\"string\">'&amp;appid='</span> + appid + <span class=\"string\">'&amp;secret='</span> + secret, (err, response, body) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> access_toekn = <span class=\"built_in\">JSON</span>.parse(body).access_token</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h4 id=\"获取jsapi-ticket\"><a href=\"#获取jsapi-ticket\" class=\"headerlink\" title=\"获取jsapi_ticket\"></a>获取jsapi_ticket</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> grant_type = <span class=\"string\">'client_credential'</span></div><div class=\"line\"><span class=\"keyword\">const</span> appid = <span class=\"string\">'your app id'</span></div><div class=\"line\"><span class=\"keyword\">const</span> secret = <span class=\"string\">'your app secret'</span></div><div class=\"line\"></div><div class=\"line\">request(<span class=\"string\">'https://api.weixin.qq.com/cgi-bin/token?grant_type='</span> + grant_type + <span class=\"string\">'&amp;appid='</span> + appid + <span class=\"string\">'&amp;secret='</span> + secret, (err, response, body) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> access_toekn = <span class=\"built_in\">JSON</span>.parse(body).access_token</div><div class=\"line\"></div><div class=\"line\">  request(<span class=\"string\">'https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token='</span> + access_token + <span class=\"string\">'&amp;type=jsapi'</span>, (err, response, body) =&gt; &#123;</div><div class=\"line\">     <span class=\"keyword\">let</span> jsapi_ticket = <span class=\"built_in\">JSON</span>.parse(body).ticket</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"生成签名\"><a href=\"#生成签名\" class=\"headerlink\" title=\"生成签名\"></a>生成签名</h4><p>生成签名的步骤和最开始的<code>/wxJssdk</code>的算法是一致的，具体如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> jsapi_ticket = jsapi_ticket  <span class=\"comment\">// 上一步从获取的jsapi_ticket</span></div><div class=\"line\"><span class=\"keyword\">let</span> nonce_str = <span class=\"string\">'123456'</span>    <span class=\"comment\">// 密钥，字符串任意，可以随机生成</span></div><div class=\"line\"><span class=\"keyword\">let</span> timestamp = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()  <span class=\"comment\">// 时间戳</span></div><div class=\"line\"><span class=\"keyword\">let</span> url = req.query.url   <span class=\"comment\">// 使用接口的url链接，不包含#后的内容</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将请求以上字符串，先按字典排序，再以'&amp;'拼接，如下：其中j &gt; n &gt; t &gt; u，此处直接手动排序</span></div><div class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'jsapi_ticket='</span> + jsapi_ticket + <span class=\"string\">'&amp;noncestr='</span> + nonce_str + <span class=\"string\">'&amp;timestamp='</span> + timestamp + <span class=\"string\">'&amp;url='</span> + url</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 用sha1加密</span></div><div class=\"line\"><span class=\"keyword\">let</span> signature = sha1(str)</div></pre></td></tr></table></figure></p>\n<p>连接后的代码为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> grant_type = <span class=\"string\">'client_credential'</span></div><div class=\"line\"><span class=\"keyword\">const</span> appid = <span class=\"string\">'your app id'</span></div><div class=\"line\"><span class=\"keyword\">const</span> secret = <span class=\"string\">'your app secret'</span></div><div class=\"line\"></div><div class=\"line\">request(<span class=\"string\">'https://api.weixin.qq.com/cgi-bin/token?grant_type='</span> + grant_type + <span class=\"string\">'&amp;appid='</span> + appid + <span class=\"string\">'&amp;secret='</span> + secret, (err, response, body) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> access_toekn = <span class=\"built_in\">JSON</span>.parse(body).access_token</div><div class=\"line\"></div><div class=\"line\">  request(<span class=\"string\">'https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token='</span> + access_token + <span class=\"string\">'&amp;type=jsapi'</span>, (err, response, body) =&gt; &#123;</div><div class=\"line\">     <span class=\"keyword\">let</span> jsapi_ticket = <span class=\"built_in\">JSON</span>.parse(body).ticket</div><div class=\"line\">     <span class=\"keyword\">let</span> nonce_str = <span class=\"string\">'123456'</span>    <span class=\"comment\">// 密钥，字符串任意，可以随机生成</span></div><div class=\"line\">     <span class=\"keyword\">let</span> timestamp = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()  <span class=\"comment\">// 时间戳</span></div><div class=\"line\">     <span class=\"keyword\">let</span> url = req.query.url   <span class=\"comment\">// 使用接口的url链接，不包含#后的内容</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// 将请求以上字符串，先按字典排序，再以'&amp;'拼接，如下：其中j &gt; n &gt; t &gt; u，此处直接手动排序</span></div><div class=\"line\">     <span class=\"keyword\">let</span> str = <span class=\"string\">'jsapi_ticket='</span> + jsapi_ticket + <span class=\"string\">'&amp;noncestr='</span> + nonce_str + <span class=\"string\">'&amp;timestamp='</span> + timestamp + <span class=\"string\">'&amp;url='</span> + url</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// 用sha1加密</span></div><div class=\"line\">     <span class=\"keyword\">let</span> signature = sha1(str)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"曝露接口，返回给前端\"><a href=\"#曝露接口，返回给前端\" class=\"headerlink\" title=\"曝露接口，返回给前端\"></a>曝露接口，返回给前端</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.post(<span class=\"string\">'/wxJssdk/getJssdk'</span>, (req, res) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">const</span> grant_type = <span class=\"string\">'client_credential'</span></div><div class=\"line\">  <span class=\"keyword\">const</span> appid = <span class=\"string\">'your app id'</span></div><div class=\"line\">  <span class=\"keyword\">const</span> secret = <span class=\"string\">'your app secret'</span></div><div class=\"line\"></div><div class=\"line\">  request(<span class=\"string\">'https://api.weixin.qq.com/cgi-bin/token?grant_type='</span> + grant_type + <span class=\"string\">'&amp;appid='</span> + appid + <span class=\"string\">'&amp;secret='</span> + secret, (err, response, body) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> access_toekn = <span class=\"built_in\">JSON</span>.parse(body).access_token</div><div class=\"line\"></div><div class=\"line\">    request(<span class=\"string\">'https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token='</span> + access_token + <span class=\"string\">'&amp;type=jsapi'</span>, (err, response, body) =&gt; &#123;</div><div class=\"line\">       <span class=\"keyword\">let</span> jsapi_ticket = <span class=\"built_in\">JSON</span>.parse(body).ticket</div><div class=\"line\">       <span class=\"keyword\">let</span> nonce_str = <span class=\"string\">'123456'</span>    <span class=\"comment\">// 密钥，字符串任意，可以随机生成</span></div><div class=\"line\">       <span class=\"keyword\">let</span> timestamp = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()  <span class=\"comment\">// 时间戳</span></div><div class=\"line\">       <span class=\"keyword\">let</span> url = req.query.url   <span class=\"comment\">// 使用接口的url链接，不包含#后的内容</span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// 将请求以上字符串，先按字典排序，再以'&amp;'拼接，如下：其中j &gt; n &gt; t &gt; u，此处直接手动排序</span></div><div class=\"line\">       <span class=\"keyword\">let</span> str = <span class=\"string\">'jsapi_ticket='</span> + jsapi_ticket + <span class=\"string\">'&amp;noncestr='</span> + nonce_str + <span class=\"string\">'&amp;timestamp='</span> + timestamp + <span class=\"string\">'&amp;url='</span> + url</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// 用sha1加密</span></div><div class=\"line\">       <span class=\"keyword\">let</span> signature = sha1(str)</div><div class=\"line\"></div><div class=\"line\">       res.send(&#123;</div><div class=\"line\">         <span class=\"attr\">appId</span>: appid,</div><div class=\"line\">         <span class=\"attr\">timestamp</span>: timpstamp,</div><div class=\"line\">         <span class=\"attr\">nonceStr</span>: nonce_str,</div><div class=\"line\">         <span class=\"attr\">signature</span>: signature,</div><div class=\"line\">       &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"前端请求后端接口，获取配置信息\"><a href=\"#前端请求后端接口，获取配置信息\" class=\"headerlink\" title=\"前端请求后端接口，获取配置信息\"></a>前端请求后端接口，获取配置信息</h2><h3 id=\"获取配置\"><a href=\"#获取配置\" class=\"headerlink\" title=\"获取配置\"></a>获取配置</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">axios.post(<span class=\"string\">'/wxJssdk/getJssdk'</span>, &#123;<span class=\"attr\">url</span>: location.href&#125;).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> data = response.data</div><div class=\"line\"></div><div class=\"line\">  wx.config(&#123;</div><div class=\"line\">    <span class=\"attr\">debug</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></div><div class=\"line\">    appId: data.appId, <span class=\"comment\">// 必填，公众号的唯一标识</span></div><div class=\"line\">    timestamp: data.timestamp, <span class=\"comment\">// 必填，生成签名的时间戳</span></div><div class=\"line\">    nonceStr: data.nonceStr, <span class=\"comment\">// 必填，生成签名的随机串</span></div><div class=\"line\">    signature: data.signature,<span class=\"comment\">// 必填，签名，见附录1</span></div><div class=\"line\">    jsApiList: [<span class=\"string\">'onMenuShareTimeline'</span>, <span class=\"string\">'onMenuShareAppMessage'</span>] <span class=\"comment\">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"做你想做的，比如，自定义分享\"><a href=\"#做你想做的，比如，自定义分享\" class=\"headerlink\" title=\"做你想做的，比如，自定义分享\"></a>做你想做的，比如，自定义分享</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (wx) &#123;</div><div class=\"line\">  axios.post(<span class=\"string\">'/wxJssdk/getJssdk'</span>, &#123;<span class=\"attr\">url</span>: location.href&#125;).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> data = response.data</div><div class=\"line\"></div><div class=\"line\">    wx.config(&#123;</div><div class=\"line\">      <span class=\"attr\">debug</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></div><div class=\"line\">      appId: data.appId, <span class=\"comment\">// 必填，公众号的唯一标识</span></div><div class=\"line\">      timestamp: data.timestamp, <span class=\"comment\">// 必填，生成签名的时间戳</span></div><div class=\"line\">      nonceStr: data.nonceStr, <span class=\"comment\">// 必填，生成签名的随机串</span></div><div class=\"line\">      signature: data.signature,<span class=\"comment\">// 必填，签名，见附录1</span></div><div class=\"line\">      jsApiList: [<span class=\"string\">'onMenuShareTimeline'</span>, <span class=\"string\">'onMenuShareAppMessage'</span>] <span class=\"comment\">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    wx.ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      wx.onMenuShareTimeline(&#123;</div><div class=\"line\">      <span class=\"attr\">title</span>: wxShare.title,</div><div class=\"line\">      <span class=\"attr\">desc</span>: wxShare.desc,</div><div class=\"line\">      <span class=\"attr\">link</span>: wxShare.link,</div><div class=\"line\">      <span class=\"attr\">imgUrl</span>: wxShare.imgUrl</div><div class=\"line\">      &#125;);</div><div class=\"line\"></div><div class=\"line\">      wx.onMenuShareAppMessage(&#123;</div><div class=\"line\">      <span class=\"attr\">title</span>: wxShare.title,</div><div class=\"line\">      <span class=\"attr\">desc</span>: wxShare.desc,</div><div class=\"line\">      <span class=\"attr\">link</span>: wxShare.link,</div><div class=\"line\">      <span class=\"attr\">imgUrl</span>: wxShare.imgUrl</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">    wx.error(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此，后端配置好了，我们已经能够正常使用微信的接口了，但是微信每日接口请求是有上限的，通过2000次/天，因此如果网站上线后，一量当天访问量超过2000次你的接口将失效，而且每次都请求微信接口两次，造成请求时间浪费，所以我们需要将以上获取信息缓存在后端，避免造成接口失效以及多次请求微信后台。</p>\n<h2 id=\"缓存access-token及jsapi-ticket\"><a href=\"#缓存access-token及jsapi-ticket\" class=\"headerlink\" title=\"缓存access_token及jsapi_ticket\"></a>缓存access_token及jsapi_ticket</h2><p>此处直接上代码，利用node_cache包进行缓存<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> app = express()</div><div class=\"line\"><span class=\"keyword\">const</span> sha1 = <span class=\"built_in\">require</span>(<span class=\"string\">'sha1'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> waterfall = <span class=\"built_in\">require</span>(<span class=\"string\">'async/waterfall'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> NodeCache = <span class=\"built_in\">require</span>(<span class=\"string\">'node-cache'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> cache = <span class=\"keyword\">new</span> NodeCache(&#123;<span class=\"attr\">stdTTL</span>: <span class=\"number\">3600</span>, <span class=\"attr\">checkperiod</span>: <span class=\"number\">3600</span>&#125;) <span class=\"comment\">//3600秒后过过期</span></div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/wxJssdk'</span>, (req, res) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> wx = req.query</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 1）将token、timestamp、nonce三个参数进行字典序排序</span></div><div class=\"line\">  <span class=\"keyword\">let</span> token = <span class=\"string\">'jegfjaeghfuyawegfgjdbh'</span></div><div class=\"line\">  <span class=\"keyword\">let</span> timestamp = wx.timestamp</div><div class=\"line\">  <span class=\"keyword\">let</span> nonce = wx.nonce</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 2）将三个参数字符串拼接成一个字符串进行sha1加密</span></div><div class=\"line\">  <span class=\"keyword\">let</span> list = [token, timestamp, nonce]</div><div class=\"line\">  <span class=\"keyword\">let</span> result = sha1(list.sort().join(<span class=\"string\">''</span>))</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 3）开发者获得加密后的字符串可与signature对比，标识该请求来源于微信</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (result === wx.signature) &#123;</div><div class=\"line\">    res.send(wx.echostr)</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    res.send(<span class=\"literal\">false</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/wxJssdk/getJssdk'</span>, (req, res) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> grant_type = <span class=\"string\">'client_credential'</span></div><div class=\"line\">  <span class=\"keyword\">let</span> appid = <span class=\"string\">'your app id'</span></div><div class=\"line\">  <span class=\"keyword\">let</span> secret = <span class=\"string\">'your app secret'</span> <span class=\"comment\">// appscret</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> steps = []</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 第一步，获取access_token</span></div><div class=\"line\">  steps.push(<span class=\"function\">(<span class=\"params\">cb</span>) =&gt;</span> &#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> steps1 = []</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 第1.1步，从缓存中读取access_token</span></div><div class=\"line\">    steps1.push(<span class=\"function\">(<span class=\"params\">cb1</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> access_token = cache.get(<span class=\"string\">'access_token'</span>, (err, access_token) =&gt; &#123;</div><div class=\"line\">        cb1(err, access_token)</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 第1.2步，缓存中有access_token则直接返回，如果没有，则从服务器中读取access_token</span></div><div class=\"line\">    steps1.push(<span class=\"function\">(<span class=\"params\">access_token, cb1</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (access_token) &#123;</div><div class=\"line\">        cb1(<span class=\"literal\">null</span>, access_token, <span class=\"string\">'from_cache'</span>)</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        request(<span class=\"string\">'https://api.weixin.qq.com/cgi-bin/token?grant_type='</span> + grant_type + <span class=\"string\">'&amp;appid='</span> + appid + <span class=\"string\">'&amp;secret='</span> + secret, (err, response, body) =&gt; &#123;</div><div class=\"line\">          cb1(err, <span class=\"built_in\">JSON</span>.parse(body).access_token, <span class=\"string\">'from_server'</span>)</div><div class=\"line\">        &#125;)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 第1.3步，如果是新从服务器取的access_token，则缓存起来，否则直接返回</span></div><div class=\"line\">    steps1.push(<span class=\"function\">(<span class=\"params\">access_token, from_where, cb1</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (from_where === <span class=\"string\">'from_cache'</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">' === 成功从缓存中读取access_token: '</span> + access_token + <span class=\"string\">' ==='</span>)</div><div class=\"line\">        cb1(<span class=\"literal\">null</span>, access_token)</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (from_where === <span class=\"string\">'from_server'</span>) &#123;</div><div class=\"line\">        cache.set(<span class=\"string\">'access_token'</span>, access_token, (err, success) =&gt; &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!err &amp;&amp; success) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">' === 缓存已过期，从服务器中读取access_token: '</span> + access_token + <span class=\"string\">' ==='</span>)</div><div class=\"line\">            cb1(<span class=\"literal\">null</span>, access_token)</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            cb1(err || <span class=\"string\">'cache设置access_token时，出现未知错误'</span>)</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        cb1(<span class=\"string\">'1.3获取from_where时，from_where值为空'</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    waterfall(steps1, (err, access_token) =&gt; &#123;</div><div class=\"line\">      cb(err, access_token)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 第二步，获取ticket</span></div><div class=\"line\">  steps.push(<span class=\"function\">(<span class=\"params\">access_token, cb</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> steps1 = []</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 第2.1步，从缓存中读取ticket</span></div><div class=\"line\">    steps1.push(<span class=\"function\">(<span class=\"params\">cb1</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> ticket = cache.get(<span class=\"string\">'ticket'</span>, (err, ticket) =&gt; &#123;</div><div class=\"line\">        cb1(err, ticket)</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 第2.2步，缓存中有ticket则直接返回，如果没有，则从服务器中读取ticket</span></div><div class=\"line\">    steps1.push(<span class=\"function\">(<span class=\"params\">ticket, cb1</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (ticket) &#123;</div><div class=\"line\">        cb1(<span class=\"literal\">null</span>, ticket, <span class=\"string\">'from_cache'</span>)</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        request(<span class=\"string\">'https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token='</span> + access_token + <span class=\"string\">'&amp;type=jsapi'</span>, (err, response, body) =&gt; &#123;</div><div class=\"line\">          cb1(err, <span class=\"built_in\">JSON</span>.parse(body).ticket, <span class=\"string\">'from_server'</span>)</div><div class=\"line\">        &#125;)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 第2.3步，如果新从服务器取的ticket，则缓存起来，否则直接返回</span></div><div class=\"line\">    steps1.push(<span class=\"function\">(<span class=\"params\">ticket, from_where, cb1</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (from_where === <span class=\"string\">'from_cache'</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">' === 成功从缓存中读取ticket: '</span> + ticket + <span class=\"string\">' ==='</span>)</div><div class=\"line\">        cb1(<span class=\"literal\">null</span>, ticket)</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (from_where === <span class=\"string\">'from_server'</span>) &#123;</div><div class=\"line\">        cache.set(<span class=\"string\">'ticket'</span>, ticket, (err, success) =&gt; &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!err &amp;&amp; success) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">' === 缓存已过期，从服务器中读取ticket: '</span> + ticket + <span class=\"string\">' ==='</span>);</div><div class=\"line\">            cb1(<span class=\"literal\">null</span>, ticket)</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            cb1(err || <span class=\"string\">'cache设置ticket时，出现未知错误'</span>)</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        cb1(<span class=\"string\">'2.3获取from_where时，from_where值为空'</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    waterfall(steps1, (err, ticket) =&gt; &#123;</div><div class=\"line\">      cb(err, ticket)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 第三步，生成签名</span></div><div class=\"line\">  steps.push(<span class=\"function\">(<span class=\"params\">ticket, cb</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> jsapi_ticket = ticket</div><div class=\"line\">    <span class=\"keyword\">let</span> nonce_str = <span class=\"string\">'123456'</span></div><div class=\"line\">    <span class=\"keyword\">let</span> timestamp = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()</div><div class=\"line\">    <span class=\"keyword\">let</span> url = req.query.url</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">let</span> str = <span class=\"string\">'jsapi_ticket='</span> + jsapi_ticket + <span class=\"string\">'&amp;noncestr='</span> + nonce_str + <span class=\"string\">'&amp;timestamp='</span> + timestamp + <span class=\"string\">'&amp;url='</span> + url</div><div class=\"line\">    <span class=\"keyword\">let</span> signature = sha1(str)</div><div class=\"line\"></div><div class=\"line\">    cb(<span class=\"literal\">null</span>, &#123;</div><div class=\"line\">      <span class=\"attr\">appId</span>: appid,</div><div class=\"line\">      <span class=\"attr\">timestamp</span>: timestamp,</div><div class=\"line\">      <span class=\"attr\">nonceStr</span>: nonce_str,</div><div class=\"line\">      <span class=\"attr\">signature</span>: signature,</div><div class=\"line\">      <span class=\"attr\">ticket</span>: ticket</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  waterfall(steps, (err, data) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">      res.send(&#123;<span class=\"attr\">status</span>: <span class=\"string\">'error'</span>, <span class=\"attr\">data</span>: err&#125;)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      res.send(&#123;<span class=\"attr\">status</span>: <span class=\"string\">'success'</span>, <span class=\"attr\">data</span>: data&#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"string\">'/wxJssdk/public'</span>, express.static(<span class=\"string\">'public'</span>))</div><div class=\"line\"></div><div class=\"line\">app.listen(<span class=\"number\">80</span>, err =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(!err) <span class=\"built_in\">console</span>.log(<span class=\"string\">'connect succeed'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>做了一个网站，放到线上，用微信打开，点击分享，可是分享后发给朋友的链接卡片是微信默认自带的，如下：<br><img src=\"/2017/07/13/wechat-jssdk/default_share.png\" alt=\"默认分享\" title=\"默认分享\"><br><br><br>这标题，描述以及图片是默认自带的，丑不说，分享给别人还以为是盗号网站呢，而接入微信的JSSDK后，分享可以自定义内容，如下：<br><img src=\"/2017/07/13/wechat-jssdk/jssdk_share.png\" alt=\"接口分享\" title=\"接口分享\"><br><br><br>我承认，虽然这分享的标题和内容也并不正经，但这不妨碍我表达<strong>我们可以通过微信JSSDK定义分享内容</strong>，接下来我们将一步一步从零实现JSSDK从后端Node.js的接入。</p>\n<h2 id=\"成为测试公众号开发者\"><a href=\"#成为测试公众号开发者\" class=\"headerlink\" title=\"成为测试公众号开发者\"></a>成为测试公众号开发者</h2><h3 id=\"登录测试公众号后台\"><a href=\"#登录测试公众号后台\" class=\"headerlink\" title=\"登录测试公众号后台\"></a>登录测试公众号后台</h3><p>首先我们需要在<a href=\"https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login\" target=\"_blank\" rel=\"external\">微信公众平台</a>申请测试接口，地址：<a href=\"https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login\" target=\"_blank\" rel=\"external\">https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login</a><br>使用微信扫描登录后，即可来微信公众平台测试账号系统。</p>\n<h3 id=\"成为测试公众号开发者-1\"><a href=\"#成为测试公众号开发者-1\" class=\"headerlink\" title=\"成为测试公众号开发者\"></a>成为测试公众号开发者</h3><p>其次在微信公众平台测试账号中，扫描测试号二维码，成为测试公众号的开发者</p>\n<h2 id=\"接口配置信息\"><a href=\"#接口配置信息\" class=\"headerlink\" title=\"接口配置信息\"></a>接口配置信息</h2><h3 id=\"修改接口配置信息\"><a href=\"#修改接口配置信息\" class=\"headerlink\" title=\"修改接口配置信息\"></a>修改接口配置信息</h3><ol>\n<li>URL地址必须是你服务器上的地址，此地址要能通过浏览器的地址栏访问到（没有服务器？没关系，一会儿我们搭建一个）<br>假设我这里填写的服务器地址是”<a href=\"http://www.your_server_name.com/wxJssdk\" target=\"_blank\" rel=\"external\">http://www.your_server_name.com/wxJssdk</a>“</li>\n<li>Token你可以随意填写，用作生成签名，（不知道签名？没关系，一会儿会用到这东西的）<br>假设我这里填写的Token是”<a href=\"\">jegfjaeghfuccawegfgjdbh</a>“</li>\n</ol>\n<p>此时点击提交是会提示配置失败的，因为在提交的时候，微信是会请求你的服务器地址，而你的当前配置的地址并不能访问，所以会提示配置失败。不过别急，我们先来搭建一个简单的Node服务器，让微信能够访问该服务器。</p>\n<h3 id=\"搭建简单的Node服务器\"><a href=\"#搭建简单的Node服务器\" class=\"headerlink\" title=\"搭建简单的Node服务器\"></a>搭建简单的Node服务器</h3><p>我们需要在<a href=\"http://www.your_server_name.com\" target=\"_blank\" rel=\"external\">http://www.your_server_name.com</a> 这个域名上搭建一个服务器，并且曝出一个接口为<code>/wxJssdk</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> app = express()</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/wxJssdk'</span>, (req, res) =&gt; &#123;</div><div class=\"line\">  res.send(<span class=\"string\">'请求成功了了了了'</span>)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">app.listen(<span class=\"number\">80</span>, err =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(!err) <span class=\"built_in\">console</span>.log(<span class=\"string\">'connect succeed'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>现在我们在地址栏中访问<a href=\"http://www.your_server_name.com/wxJssdk\" target=\"_blank\" rel=\"external\">http://www.your_server_name.com/wxJssdk</a> ，如果页面显示“请求成功了了了了”，则进入到下一步，如果没有成功的话，检查一下你的服务器是否开启Node服务器，如：<code>node index.js</code></p>\n<p>此时保存微信测试公众号后台的接口配置信息，仍然会提示配置失败，这是因为我们没有按照它的要求返回。</p>\n<h3 id=\"根据微信测试公众号请求信息返回对应内容\"><a href=\"#根据微信测试公众号请求信息返回对应内容\" class=\"headerlink\" title=\"根据微信测试公众号请求信息返回对应内容\"></a>根据微信测试公众号请求信息返回对应内容</h3><p>根据<a href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421135319\" target=\"_blank\" rel=\"external\">微信公众号开发文档接入指南</a>，微信在请求我们配置的接口时，会带上如下信息</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">signature</td>\n<td style=\"text-align:left\">微信加密签名，signature结合了开发者填写的token参数和请求中的timestamp参数、nonce参数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">timestamp</td>\n<td style=\"text-align:left\">时间戳</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">nonce</td>\n<td style=\"text-align:left\">随机数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">echostr</td>\n<td style=\"text-align:left\">随机字符串</td>\n</tr>\n</tbody>\n</table>\n<p>微信服务器会通过GET请求，来请求我们所配置的接口，并带上以上表格的信息，而我们必须按照以下要求，将微信发送的信息进行要求校验，以确保是微信发送的信息，其中校验流程如下：</p>\n<blockquote>\n<p>1）将token、timestamp、nonce三个参数进行字典序排序<br>2）将三个参数字符串拼接成一个字符串进行sha1加密<br>3）开发者获得加密后的字符串可与signature对比，标识该请求来源于微信</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> app = express()</div><div class=\"line\"><span class=\"keyword\">const</span> sha1 = <span class=\"built_in\">require</span>(<span class=\"string\">'sha1'</span>)</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/wxJssdk'</span>, (req, res) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> wx = req.query</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> token = <span class=\"string\">'jegfjaeghfuccawegfgjdbh'</span></div><div class=\"line\">  <span class=\"keyword\">let</span> timestamp = wx.timestamp</div><div class=\"line\">  <span class=\"keyword\">let</span> nonce = wx.nonce</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 1）将token、timestamp、nonce三个参数进行字典序排序</span></div><div class=\"line\">  <span class=\"keyword\">let</span> list = [token, timestamp, nonce].sort()</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 2）将三个参数字符串拼接成一个字符串进行sha1加密</span></div><div class=\"line\">  <span class=\"keyword\">let</span> str = list.join(<span class=\"string\">''</span>)</div><div class=\"line\">  <span class=\"keyword\">let</span> result = sha1(str)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 3）开发者获得加密后的字符串可与signature对比，标识该请求来源于微信</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (result === wx.signature) &#123;</div><div class=\"line\">    res.send(wx.echostr) <span class=\"comment\">// 返回微信传来的echostr，表示校验成功，此处不能返回其它</span></div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    res.send(<span class=\"literal\">false</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>此时我们重启Node服务器，再次保存接口配置信息即可配置成功。</p>\n<h2 id=\"微信JSSDK使用步骤\"><a href=\"#微信JSSDK使用步骤\" class=\"headerlink\" title=\"微信JSSDK使用步骤\"></a>微信JSSDK使用步骤</h2><p>根据<a href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115\" target=\"_blank\" rel=\"external\">微信JSSDK说明文档</a>，我们需要完成如下：</p>\n<h3 id=\"填写安全域名\"><a href=\"#填写安全域名\" class=\"headerlink\" title=\"填写安全域名\"></a>填写安全域名</h3><p>登录微信公众平台进入“公众号设置”的“功能设置”里填写“JS接口安全域名”，即要调用接口的域名，不包含协议</p>\n<h3 id=\"前端引入JS\"><a href=\"#前端引入JS\" class=\"headerlink\" title=\"前端引入JS\"></a>前端引入JS</h3><p>在需要调用JS接口的页面引入此JS文件，（支持https）：<a href=\"http://res.wx.qq.com/open/js/jweixin-1.2.0.js\" target=\"_blank\" rel=\"external\">http://res.wx.qq.com/open/js/jweixin-1.2.0.js</a></p>\n<h3 id=\"填写接口的配置信息\"><a href=\"#填写接口的配置信息\" class=\"headerlink\" title=\"填写接口的配置信息\"></a>填写接口的配置信息</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">wx.config(&#123;</div><div class=\"line\">  <span class=\"attr\">debug</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></div><div class=\"line\">  appId: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，公众号的唯一标识</span></div><div class=\"line\">  timestamp: , <span class=\"comment\">// 必填，生成签名的时间戳</span></div><div class=\"line\">  nonceStr: <span class=\"string\">''</span>, <span class=\"comment\">// 必填，生成签名的随机串</span></div><div class=\"line\">  signature: <span class=\"string\">''</span>,<span class=\"comment\">// 必填，签名</span></div><div class=\"line\">  jsApiList: [] <span class=\"comment\">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h3 id=\"调用接口\"><a href=\"#调用接口\" class=\"headerlink\" title=\"调用接口\"></a>调用接口</h3><p>做你前端该做的，调用微信分享接口，或微信提供的其它接口，whatever you need，当然，这并不是我们所要讲的重点，我们接下来要看一下微信的配置信息从哪获取</p>\n<h2 id=\"在Node服务器中生成jssdk所需要的配置信息\"><a href=\"#在Node服务器中生成jssdk所需要的配置信息\" class=\"headerlink\" title=\"在Node服务器中生成jssdk所需要的配置信息\"></a>在Node服务器中生成jssdk所需要的配置信息</h2><p>从上一节可以看到，调用微信JSSDK需要以下信息</p>\n<ol>\n<li>appId</li>\n<li>timestamp</li>\n<li>nonceStr</li>\n<li>signature</li>\n<li>jsApiList</li>\n</ol>\n<p>其中：</p>\n<ol>\n<li>第1项appId是测试公众号后台的appId，我们已知</li>\n<li>第2项时间戳我们也可以自己生成</li>\n<li>第3项nonceStr可以随意填写，你可以理解为密钥</li>\n<li>第4项signature则需要我们按要求生成</li>\n<li>第5项是所需要接口的接口名</li>\n</ol>\n<h3 id=\"生成signature\"><a href=\"#生成signature\" class=\"headerlink\" title=\"生成signature\"></a>生成signature</h3><blockquote>\n<p>生成签名之前必须先了解一下jsapi_ticket，jsapi_ticket是公众号用于调用微信JS接口的临时票据。正常情况下，jsapi_ticket的有效期为7200秒，通过access_token来获取。由于获取jsapi_ticket的api调用次数非常有限，频繁刷新jsapi_ticket会导致api调用受限，影响自身业务，开发者必须在自己的服务全局缓存jsapi_ticket 。</p>\n</blockquote>\n<p>为了保证我们appid，appsecret，nonceStr等信息不在前端曝露，我们以下步骤将在服务器上进行操作，以免他人盗用信息获取（注：微信请求有每日次数限制，一旦超出，则无法使用，具体请求次数限制在微信公众号后台中可查看）</p>\n<h4 id=\"生成access-token\"><a href=\"#生成access-token\" class=\"headerlink\" title=\"生成access_token\"></a>生成access_token</h4><p>根据微信开发文档[获取access_token文档说明]，我们需要将微信测试公众号后台的appid和和appsecret以GET的请求方式向<a href=\"https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET\" target=\"_blank\" rel=\"external\">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET</a> 发起请求获取token，请求成功后我们会获得下返回JSON转化的字符串<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;<span class=\"attr\">\"access_token\"</span>:<span class=\"string\">\"ACCESS_TOKEN\"</span>,<span class=\"attr\">\"expires_in\"</span>:<span class=\"number\">7200</span>&#125;</div></pre></td></tr></table></figure></p>\n<p>具体请求代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> grant_type = <span class=\"string\">'client_credential'</span></div><div class=\"line\"><span class=\"keyword\">const</span> appid = <span class=\"string\">'your app id'</span></div><div class=\"line\"><span class=\"keyword\">const</span> secret = <span class=\"string\">'your app secret'</span></div><div class=\"line\"></div><div class=\"line\">request(<span class=\"string\">'https://api.weixin.qq.com/cgi-bin/token?grant_type='</span> + grant_type + <span class=\"string\">'&amp;appid='</span> + appid + <span class=\"string\">'&amp;secret='</span> + secret, (err, response, body) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> access_toekn = <span class=\"built_in\">JSON</span>.parse(body).access_token</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h4 id=\"获取jsapi-ticket\"><a href=\"#获取jsapi-ticket\" class=\"headerlink\" title=\"获取jsapi_ticket\"></a>获取jsapi_ticket</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> grant_type = <span class=\"string\">'client_credential'</span></div><div class=\"line\"><span class=\"keyword\">const</span> appid = <span class=\"string\">'your app id'</span></div><div class=\"line\"><span class=\"keyword\">const</span> secret = <span class=\"string\">'your app secret'</span></div><div class=\"line\"></div><div class=\"line\">request(<span class=\"string\">'https://api.weixin.qq.com/cgi-bin/token?grant_type='</span> + grant_type + <span class=\"string\">'&amp;appid='</span> + appid + <span class=\"string\">'&amp;secret='</span> + secret, (err, response, body) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> access_toekn = <span class=\"built_in\">JSON</span>.parse(body).access_token</div><div class=\"line\"></div><div class=\"line\">  request(<span class=\"string\">'https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token='</span> + access_token + <span class=\"string\">'&amp;type=jsapi'</span>, (err, response, body) =&gt; &#123;</div><div class=\"line\">     <span class=\"keyword\">let</span> jsapi_ticket = <span class=\"built_in\">JSON</span>.parse(body).ticket</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"生成签名\"><a href=\"#生成签名\" class=\"headerlink\" title=\"生成签名\"></a>生成签名</h4><p>生成签名的步骤和最开始的<code>/wxJssdk</code>的算法是一致的，具体如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> jsapi_ticket = jsapi_ticket  <span class=\"comment\">// 上一步从获取的jsapi_ticket</span></div><div class=\"line\"><span class=\"keyword\">let</span> nonce_str = <span class=\"string\">'123456'</span>    <span class=\"comment\">// 密钥，字符串任意，可以随机生成</span></div><div class=\"line\"><span class=\"keyword\">let</span> timestamp = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()  <span class=\"comment\">// 时间戳</span></div><div class=\"line\"><span class=\"keyword\">let</span> url = req.query.url   <span class=\"comment\">// 使用接口的url链接，不包含#后的内容</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 将请求以上字符串，先按字典排序，再以'&amp;'拼接，如下：其中j &gt; n &gt; t &gt; u，此处直接手动排序</span></div><div class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">'jsapi_ticket='</span> + jsapi_ticket + <span class=\"string\">'&amp;noncestr='</span> + nonce_str + <span class=\"string\">'&amp;timestamp='</span> + timestamp + <span class=\"string\">'&amp;url='</span> + url</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 用sha1加密</span></div><div class=\"line\"><span class=\"keyword\">let</span> signature = sha1(str)</div></pre></td></tr></table></figure></p>\n<p>连接后的代码为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> grant_type = <span class=\"string\">'client_credential'</span></div><div class=\"line\"><span class=\"keyword\">const</span> appid = <span class=\"string\">'your app id'</span></div><div class=\"line\"><span class=\"keyword\">const</span> secret = <span class=\"string\">'your app secret'</span></div><div class=\"line\"></div><div class=\"line\">request(<span class=\"string\">'https://api.weixin.qq.com/cgi-bin/token?grant_type='</span> + grant_type + <span class=\"string\">'&amp;appid='</span> + appid + <span class=\"string\">'&amp;secret='</span> + secret, (err, response, body) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> access_toekn = <span class=\"built_in\">JSON</span>.parse(body).access_token</div><div class=\"line\"></div><div class=\"line\">  request(<span class=\"string\">'https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token='</span> + access_token + <span class=\"string\">'&amp;type=jsapi'</span>, (err, response, body) =&gt; &#123;</div><div class=\"line\">     <span class=\"keyword\">let</span> jsapi_ticket = <span class=\"built_in\">JSON</span>.parse(body).ticket</div><div class=\"line\">     <span class=\"keyword\">let</span> nonce_str = <span class=\"string\">'123456'</span>    <span class=\"comment\">// 密钥，字符串任意，可以随机生成</span></div><div class=\"line\">     <span class=\"keyword\">let</span> timestamp = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()  <span class=\"comment\">// 时间戳</span></div><div class=\"line\">     <span class=\"keyword\">let</span> url = req.query.url   <span class=\"comment\">// 使用接口的url链接，不包含#后的内容</span></div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// 将请求以上字符串，先按字典排序，再以'&amp;'拼接，如下：其中j &gt; n &gt; t &gt; u，此处直接手动排序</span></div><div class=\"line\">     <span class=\"keyword\">let</span> str = <span class=\"string\">'jsapi_ticket='</span> + jsapi_ticket + <span class=\"string\">'&amp;noncestr='</span> + nonce_str + <span class=\"string\">'&amp;timestamp='</span> + timestamp + <span class=\"string\">'&amp;url='</span> + url</div><div class=\"line\"></div><div class=\"line\">     <span class=\"comment\">// 用sha1加密</span></div><div class=\"line\">     <span class=\"keyword\">let</span> signature = sha1(str)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h3 id=\"曝露接口，返回给前端\"><a href=\"#曝露接口，返回给前端\" class=\"headerlink\" title=\"曝露接口，返回给前端\"></a>曝露接口，返回给前端</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">app.post(<span class=\"string\">'/wxJssdk/getJssdk'</span>, (req, res) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">const</span> grant_type = <span class=\"string\">'client_credential'</span></div><div class=\"line\">  <span class=\"keyword\">const</span> appid = <span class=\"string\">'your app id'</span></div><div class=\"line\">  <span class=\"keyword\">const</span> secret = <span class=\"string\">'your app secret'</span></div><div class=\"line\"></div><div class=\"line\">  request(<span class=\"string\">'https://api.weixin.qq.com/cgi-bin/token?grant_type='</span> + grant_type + <span class=\"string\">'&amp;appid='</span> + appid + <span class=\"string\">'&amp;secret='</span> + secret, (err, response, body) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> access_toekn = <span class=\"built_in\">JSON</span>.parse(body).access_token</div><div class=\"line\"></div><div class=\"line\">    request(<span class=\"string\">'https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token='</span> + access_token + <span class=\"string\">'&amp;type=jsapi'</span>, (err, response, body) =&gt; &#123;</div><div class=\"line\">       <span class=\"keyword\">let</span> jsapi_ticket = <span class=\"built_in\">JSON</span>.parse(body).ticket</div><div class=\"line\">       <span class=\"keyword\">let</span> nonce_str = <span class=\"string\">'123456'</span>    <span class=\"comment\">// 密钥，字符串任意，可以随机生成</span></div><div class=\"line\">       <span class=\"keyword\">let</span> timestamp = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()  <span class=\"comment\">// 时间戳</span></div><div class=\"line\">       <span class=\"keyword\">let</span> url = req.query.url   <span class=\"comment\">// 使用接口的url链接，不包含#后的内容</span></div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// 将请求以上字符串，先按字典排序，再以'&amp;'拼接，如下：其中j &gt; n &gt; t &gt; u，此处直接手动排序</span></div><div class=\"line\">       <span class=\"keyword\">let</span> str = <span class=\"string\">'jsapi_ticket='</span> + jsapi_ticket + <span class=\"string\">'&amp;noncestr='</span> + nonce_str + <span class=\"string\">'&amp;timestamp='</span> + timestamp + <span class=\"string\">'&amp;url='</span> + url</div><div class=\"line\"></div><div class=\"line\">       <span class=\"comment\">// 用sha1加密</span></div><div class=\"line\">       <span class=\"keyword\">let</span> signature = sha1(str)</div><div class=\"line\"></div><div class=\"line\">       res.send(&#123;</div><div class=\"line\">         <span class=\"attr\">appId</span>: appid,</div><div class=\"line\">         <span class=\"attr\">timestamp</span>: timpstamp,</div><div class=\"line\">         <span class=\"attr\">nonceStr</span>: nonce_str,</div><div class=\"line\">         <span class=\"attr\">signature</span>: signature,</div><div class=\"line\">       &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"前端请求后端接口，获取配置信息\"><a href=\"#前端请求后端接口，获取配置信息\" class=\"headerlink\" title=\"前端请求后端接口，获取配置信息\"></a>前端请求后端接口，获取配置信息</h2><h3 id=\"获取配置\"><a href=\"#获取配置\" class=\"headerlink\" title=\"获取配置\"></a>获取配置</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">axios.post(<span class=\"string\">'/wxJssdk/getJssdk'</span>, &#123;<span class=\"attr\">url</span>: location.href&#125;).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> data = response.data</div><div class=\"line\"></div><div class=\"line\">  wx.config(&#123;</div><div class=\"line\">    <span class=\"attr\">debug</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></div><div class=\"line\">    appId: data.appId, <span class=\"comment\">// 必填，公众号的唯一标识</span></div><div class=\"line\">    timestamp: data.timestamp, <span class=\"comment\">// 必填，生成签名的时间戳</span></div><div class=\"line\">    nonceStr: data.nonceStr, <span class=\"comment\">// 必填，生成签名的随机串</span></div><div class=\"line\">    signature: data.signature,<span class=\"comment\">// 必填，签名，见附录1</span></div><div class=\"line\">    jsApiList: [<span class=\"string\">'onMenuShareTimeline'</span>, <span class=\"string\">'onMenuShareAppMessage'</span>] <span class=\"comment\">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></div><div class=\"line\">  &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"做你想做的，比如，自定义分享\"><a href=\"#做你想做的，比如，自定义分享\" class=\"headerlink\" title=\"做你想做的，比如，自定义分享\"></a>做你想做的，比如，自定义分享</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (wx) &#123;</div><div class=\"line\">  axios.post(<span class=\"string\">'/wxJssdk/getJssdk'</span>, &#123;<span class=\"attr\">url</span>: location.href&#125;).then(<span class=\"function\">(<span class=\"params\">response</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> data = response.data</div><div class=\"line\"></div><div class=\"line\">    wx.config(&#123;</div><div class=\"line\">      <span class=\"attr\">debug</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></div><div class=\"line\">      appId: data.appId, <span class=\"comment\">// 必填，公众号的唯一标识</span></div><div class=\"line\">      timestamp: data.timestamp, <span class=\"comment\">// 必填，生成签名的时间戳</span></div><div class=\"line\">      nonceStr: data.nonceStr, <span class=\"comment\">// 必填，生成签名的随机串</span></div><div class=\"line\">      signature: data.signature,<span class=\"comment\">// 必填，签名，见附录1</span></div><div class=\"line\">      jsApiList: [<span class=\"string\">'onMenuShareTimeline'</span>, <span class=\"string\">'onMenuShareAppMessage'</span>] <span class=\"comment\">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    wx.ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      wx.onMenuShareTimeline(&#123;</div><div class=\"line\">      <span class=\"attr\">title</span>: wxShare.title,</div><div class=\"line\">      <span class=\"attr\">desc</span>: wxShare.desc,</div><div class=\"line\">      <span class=\"attr\">link</span>: wxShare.link,</div><div class=\"line\">      <span class=\"attr\">imgUrl</span>: wxShare.imgUrl</div><div class=\"line\">      &#125;);</div><div class=\"line\"></div><div class=\"line\">      wx.onMenuShareAppMessage(&#123;</div><div class=\"line\">      <span class=\"attr\">title</span>: wxShare.title,</div><div class=\"line\">      <span class=\"attr\">desc</span>: wxShare.desc,</div><div class=\"line\">      <span class=\"attr\">link</span>: wxShare.link,</div><div class=\"line\">      <span class=\"attr\">imgUrl</span>: wxShare.imgUrl</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">    wx.error(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">       <span class=\"comment\">// config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>至此，后端配置好了，我们已经能够正常使用微信的接口了，但是微信每日接口请求是有上限的，通过2000次/天，因此如果网站上线后，一量当天访问量超过2000次你的接口将失效，而且每次都请求微信接口两次，造成请求时间浪费，所以我们需要将以上获取信息缓存在后端，避免造成接口失效以及多次请求微信后台。</p>\n<h2 id=\"缓存access-token及jsapi-ticket\"><a href=\"#缓存access-token及jsapi-ticket\" class=\"headerlink\" title=\"缓存access_token及jsapi_ticket\"></a>缓存access_token及jsapi_ticket</h2><p>此处直接上代码，利用node_cache包进行缓存<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> app = express()</div><div class=\"line\"><span class=\"keyword\">const</span> sha1 = <span class=\"built_in\">require</span>(<span class=\"string\">'sha1'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> waterfall = <span class=\"built_in\">require</span>(<span class=\"string\">'async/waterfall'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> NodeCache = <span class=\"built_in\">require</span>(<span class=\"string\">'node-cache'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> cache = <span class=\"keyword\">new</span> NodeCache(&#123;<span class=\"attr\">stdTTL</span>: <span class=\"number\">3600</span>, <span class=\"attr\">checkperiod</span>: <span class=\"number\">3600</span>&#125;) <span class=\"comment\">//3600秒后过过期</span></div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/wxJssdk'</span>, (req, res) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> wx = req.query</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 1）将token、timestamp、nonce三个参数进行字典序排序</span></div><div class=\"line\">  <span class=\"keyword\">let</span> token = <span class=\"string\">'jegfjaeghfuyawegfgjdbh'</span></div><div class=\"line\">  <span class=\"keyword\">let</span> timestamp = wx.timestamp</div><div class=\"line\">  <span class=\"keyword\">let</span> nonce = wx.nonce</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 2）将三个参数字符串拼接成一个字符串进行sha1加密</span></div><div class=\"line\">  <span class=\"keyword\">let</span> list = [token, timestamp, nonce]</div><div class=\"line\">  <span class=\"keyword\">let</span> result = sha1(list.sort().join(<span class=\"string\">''</span>))</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 3）开发者获得加密后的字符串可与signature对比，标识该请求来源于微信</span></div><div class=\"line\">  <span class=\"keyword\">if</span> (result === wx.signature) &#123;</div><div class=\"line\">    res.send(wx.echostr)</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    res.send(<span class=\"literal\">false</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">app.get(<span class=\"string\">'/wxJssdk/getJssdk'</span>, (req, res) =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> grant_type = <span class=\"string\">'client_credential'</span></div><div class=\"line\">  <span class=\"keyword\">let</span> appid = <span class=\"string\">'your app id'</span></div><div class=\"line\">  <span class=\"keyword\">let</span> secret = <span class=\"string\">'your app secret'</span> <span class=\"comment\">// appscret</span></div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> steps = []</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 第一步，获取access_token</span></div><div class=\"line\">  steps.push(<span class=\"function\">(<span class=\"params\">cb</span>) =&gt;</span> &#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> steps1 = []</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 第1.1步，从缓存中读取access_token</span></div><div class=\"line\">    steps1.push(<span class=\"function\">(<span class=\"params\">cb1</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> access_token = cache.get(<span class=\"string\">'access_token'</span>, (err, access_token) =&gt; &#123;</div><div class=\"line\">        cb1(err, access_token)</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 第1.2步，缓存中有access_token则直接返回，如果没有，则从服务器中读取access_token</span></div><div class=\"line\">    steps1.push(<span class=\"function\">(<span class=\"params\">access_token, cb1</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (access_token) &#123;</div><div class=\"line\">        cb1(<span class=\"literal\">null</span>, access_token, <span class=\"string\">'from_cache'</span>)</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        request(<span class=\"string\">'https://api.weixin.qq.com/cgi-bin/token?grant_type='</span> + grant_type + <span class=\"string\">'&amp;appid='</span> + appid + <span class=\"string\">'&amp;secret='</span> + secret, (err, response, body) =&gt; &#123;</div><div class=\"line\">          cb1(err, <span class=\"built_in\">JSON</span>.parse(body).access_token, <span class=\"string\">'from_server'</span>)</div><div class=\"line\">        &#125;)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 第1.3步，如果是新从服务器取的access_token，则缓存起来，否则直接返回</span></div><div class=\"line\">    steps1.push(<span class=\"function\">(<span class=\"params\">access_token, from_where, cb1</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (from_where === <span class=\"string\">'from_cache'</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">' === 成功从缓存中读取access_token: '</span> + access_token + <span class=\"string\">' ==='</span>)</div><div class=\"line\">        cb1(<span class=\"literal\">null</span>, access_token)</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (from_where === <span class=\"string\">'from_server'</span>) &#123;</div><div class=\"line\">        cache.set(<span class=\"string\">'access_token'</span>, access_token, (err, success) =&gt; &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!err &amp;&amp; success) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">' === 缓存已过期，从服务器中读取access_token: '</span> + access_token + <span class=\"string\">' ==='</span>)</div><div class=\"line\">            cb1(<span class=\"literal\">null</span>, access_token)</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            cb1(err || <span class=\"string\">'cache设置access_token时，出现未知错误'</span>)</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        cb1(<span class=\"string\">'1.3获取from_where时，from_where值为空'</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    waterfall(steps1, (err, access_token) =&gt; &#123;</div><div class=\"line\">      cb(err, access_token)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 第二步，获取ticket</span></div><div class=\"line\">  steps.push(<span class=\"function\">(<span class=\"params\">access_token, cb</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> steps1 = []</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 第2.1步，从缓存中读取ticket</span></div><div class=\"line\">    steps1.push(<span class=\"function\">(<span class=\"params\">cb1</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">let</span> ticket = cache.get(<span class=\"string\">'ticket'</span>, (err, ticket) =&gt; &#123;</div><div class=\"line\">        cb1(err, ticket)</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 第2.2步，缓存中有ticket则直接返回，如果没有，则从服务器中读取ticket</span></div><div class=\"line\">    steps1.push(<span class=\"function\">(<span class=\"params\">ticket, cb1</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (ticket) &#123;</div><div class=\"line\">        cb1(<span class=\"literal\">null</span>, ticket, <span class=\"string\">'from_cache'</span>)</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        request(<span class=\"string\">'https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token='</span> + access_token + <span class=\"string\">'&amp;type=jsapi'</span>, (err, response, body) =&gt; &#123;</div><div class=\"line\">          cb1(err, <span class=\"built_in\">JSON</span>.parse(body).ticket, <span class=\"string\">'from_server'</span>)</div><div class=\"line\">        &#125;)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 第2.3步，如果新从服务器取的ticket，则缓存起来，否则直接返回</span></div><div class=\"line\">    steps1.push(<span class=\"function\">(<span class=\"params\">ticket, from_where, cb1</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (from_where === <span class=\"string\">'from_cache'</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">' === 成功从缓存中读取ticket: '</span> + ticket + <span class=\"string\">' ==='</span>)</div><div class=\"line\">        cb1(<span class=\"literal\">null</span>, ticket)</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (from_where === <span class=\"string\">'from_server'</span>) &#123;</div><div class=\"line\">        cache.set(<span class=\"string\">'ticket'</span>, ticket, (err, success) =&gt; &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (!err &amp;&amp; success) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">' === 缓存已过期，从服务器中读取ticket: '</span> + ticket + <span class=\"string\">' ==='</span>);</div><div class=\"line\">            cb1(<span class=\"literal\">null</span>, ticket)</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            cb1(err || <span class=\"string\">'cache设置ticket时，出现未知错误'</span>)</div><div class=\"line\">          &#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        cb1(<span class=\"string\">'2.3获取from_where时，from_where值为空'</span>)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    waterfall(steps1, (err, ticket) =&gt; &#123;</div><div class=\"line\">      cb(err, ticket)</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">// 第三步，生成签名</span></div><div class=\"line\">  steps.push(<span class=\"function\">(<span class=\"params\">ticket, cb</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> jsapi_ticket = ticket</div><div class=\"line\">    <span class=\"keyword\">let</span> nonce_str = <span class=\"string\">'123456'</span></div><div class=\"line\">    <span class=\"keyword\">let</span> timestamp = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()</div><div class=\"line\">    <span class=\"keyword\">let</span> url = req.query.url</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">let</span> str = <span class=\"string\">'jsapi_ticket='</span> + jsapi_ticket + <span class=\"string\">'&amp;noncestr='</span> + nonce_str + <span class=\"string\">'&amp;timestamp='</span> + timestamp + <span class=\"string\">'&amp;url='</span> + url</div><div class=\"line\">    <span class=\"keyword\">let</span> signature = sha1(str)</div><div class=\"line\"></div><div class=\"line\">    cb(<span class=\"literal\">null</span>, &#123;</div><div class=\"line\">      <span class=\"attr\">appId</span>: appid,</div><div class=\"line\">      <span class=\"attr\">timestamp</span>: timestamp,</div><div class=\"line\">      <span class=\"attr\">nonceStr</span>: nonce_str,</div><div class=\"line\">      <span class=\"attr\">signature</span>: signature,</div><div class=\"line\">      <span class=\"attr\">ticket</span>: ticket</div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  waterfall(steps, (err, data) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">      res.send(&#123;<span class=\"attr\">status</span>: <span class=\"string\">'error'</span>, <span class=\"attr\">data</span>: err&#125;)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      res.send(&#123;<span class=\"attr\">status</span>: <span class=\"string\">'success'</span>, <span class=\"attr\">data</span>: data&#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">app.use(<span class=\"string\">'/wxJssdk/public'</span>, express.static(<span class=\"string\">'public'</span>))</div><div class=\"line\"></div><div class=\"line\">app.listen(<span class=\"number\">80</span>, err =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(!err) <span class=\"built_in\">console</span>.log(<span class=\"string\">'connect succeed'</span>)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n"}],"PostAsset":[{"_id":"source/_posts/web-server/default_server.png","slug":"default_server.png","post":"cj526dkbn0007gkle2oc1kh6i","modified":0,"renderable":0},{"_id":"source/_posts/web-server/response_header.png","slug":"response_header.png","post":"cj526dkbn0007gkle2oc1kh6i","modified":0,"renderable":0},{"_id":"source/_posts/web-server/response_header_safe.png","slug":"response_header_safe.png","post":"cj526dkbn0007gkle2oc1kh6i","modified":0,"renderable":0},{"_id":"source/_posts/wechat-jssdk/default_share.png","slug":"default_share.png","post":"cj526dkby000agklemorpp0wc","modified":0,"renderable":0},{"_id":"source/_posts/wechat-jssdk/jssdk_share.png","slug":"jssdk_share.png","post":"cj526dkby000agklemorpp0wc","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cj526dkay0000gklehkgd3230","tag_id":"cj526dkbc0004gkleaseao6rq","_id":"cj526dkby0009gkle2xgdvu8q"},{"post_id":"cj526dkb70002gklesyn5r3eq","tag_id":"cj526dkbc0004gkleaseao6rq","_id":"cj526dkc2000cgklepdp1mlqp"},{"post_id":"cj526dkbh0005gklecef8til9","tag_id":"cj526dkc1000bgkle9v8hs0jm","_id":"cj526dkc5000ggkleae2mv0hy"},{"post_id":"cj526dkbh0005gklecef8til9","tag_id":"cj526dkc2000dgkleeso0gi5m","_id":"cj526dkc6000hgkleth8wcagu"},{"post_id":"cj526dkbh0005gklecef8til9","tag_id":"cj526dkc3000egklemi9wclvg","_id":"cj526dkc7000jgklernpbmacz"},{"post_id":"cj526dkbl0006gkleuo5mcltk","tag_id":"cj526dkbc0004gkleaseao6rq","_id":"cj526dkc8000lgklew4bzrt68"},{"post_id":"cj526dkbl0006gkleuo5mcltk","tag_id":"cj526dkc4000fgkle9961hqzn","_id":"cj526dkc9000mgklefnhdpgc7"},{"post_id":"cj526dkbl0006gkleuo5mcltk","tag_id":"cj526dkc6000igkle3jfcc6k6","_id":"cj526dkcb000ogkle007jj793"},{"post_id":"cj526dkbn0007gkle2oc1kh6i","tag_id":"cj526dkc1000bgkle9v8hs0jm","_id":"cj526dkce000pgkle178ezed7"},{"post_id":"cj526dkbn0007gkle2oc1kh6i","tag_id":"cj526dkc9000ngklecwzojtbe","_id":"cj526dkcf000qgkleq8j562w9"},{"post_id":"cj526dkby000agklemorpp0wc","tag_id":"cj538hrxh00009wlelro2kjns","_id":"cj538hrxx00039wle27et8umz"},{"post_id":"cj526dkby000agklemorpp0wc","tag_id":"cj538hrxx00019wle3jdrz6f4","_id":"cj538hrxx00049wlekkxf7bzu"},{"post_id":"cj526dkby000agklemorpp0wc","tag_id":"cj526dkbc0004gkleaseao6rq","_id":"cj538hrxx00059wleq3aderj0"},{"post_id":"cj526dkby000agklemorpp0wc","tag_id":"cj538hrxx00029wlerta68hih","_id":"cj538hrxx00069wleihh2exq2"}],"Tag":[{"name":"Node.js","_id":"cj526dkbc0004gkleaseao6rq"},{"name":"Linux","_id":"cj526dkc1000bgkle9v8hs0jm"},{"name":"PHP","_id":"cj526dkc2000dgkleeso0gi5m"},{"name":"Memcache","_id":"cj526dkc3000egklemi9wclvg"},{"name":"MongoDB","_id":"cj526dkc4000fgkle9961hqzn"},{"name":"Performance","_id":"cj526dkc6000igkle3jfcc6k6"},{"name":"Nginx","_id":"cj526dkc9000ngklecwzojtbe"},{"name":"Wechat","_id":"cj538hrxh00009wlelro2kjns"},{"name":"JSSDK","_id":"cj538hrxx00019wle3jdrz6f4"},{"name":"Chinese","_id":"cj538hrxx00029wlerta68hih"}]}}