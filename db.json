{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/indigo/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/logo.jpg","path":"img/logo.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/wechat.jpg","path":"img/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/indigo/README.md","hash":"a91710ebddfcbeee28ebdccbdd2688ddff8f1560","modified":1495508902358},{"_id":"themes/indigo/_config.yml","hash":"0cc5b744f7df043fade05781427475d58136e54a","modified":1495614903402},{"_id":"themes/indigo/package.json","hash":"81879540fc3eb8012411b6355a5ec9659ce17a38","modified":1495508903057},{"_id":"source/_posts/Four-commonly-used-form-accept-type.md","hash":"f640b9f6f8dd4fcf89b2c2a3b93d2c7bafdfa39e","modified":1495508902341},{"_id":"source/_posts/Principle-of-Promise-Deferred.md","hash":"ebbafa99894fc33b4cbc7fe9f9a7101ecb480060","modified":1495508902346},{"_id":"source/_posts/config-ThinkPHP-support-memcache-in-php5.md","hash":"6b995dda96df34752b52b0bb46af51a599808919","modified":1495508902347},{"_id":"source/_posts/node-js.md","hash":"e6c81a63467cbf21026ca882f9074831de6cbdbc","modified":1495615125733},{"_id":"source/_posts/web-server.md","hash":"a157b7667dbdad2c4ded25b38170357f0902a0fc","modified":1495508902350},{"_id":"themes/indigo/layout/archive.ejs","hash":"29dd0adde8415dc56032878d3286690e4b8cee66","modified":1495508902899},{"_id":"themes/indigo/layout/category.ejs","hash":"183ec4632c44243db391b1722aec485073417690","modified":1495508902920},{"_id":"themes/indigo/layout/index.ejs","hash":"08b1dd8e53de4516ae8dcb61a8bc9155ec0cbe46","modified":1495508902936},{"_id":"themes/indigo/layout/layout.ejs","hash":"415e249dc7c9da8fe496987b024b956dbcc419cf","modified":1495508902950},{"_id":"themes/indigo/layout/page.ejs","hash":"26c42241ae442942fa78e22c99b7ee7debe512e4","modified":1495508902956},{"_id":"themes/indigo/layout/post.ejs","hash":"26c42241ae442942fa78e22c99b7ee7debe512e4","modified":1495508902958},{"_id":"themes/indigo/layout/tag.ejs","hash":"183ec4632c44243db391b1722aec485073417690","modified":1495508902961},{"_id":"themes/indigo/layout/tags.ejs","hash":"f8e019f8183fc1771f18e344029bc8ecb86272e0","modified":1495508903026},{"_id":"themes/indigo/source/favicon.ico","hash":"4eda7c0f3a36181f483dd0a14efe9f58c8b29814","modified":1495614817534},{"_id":"themes/indigo/screenshots/hexo-theme-search.png","hash":"ffa0b5e1ed0f4eea7a1e57f6779c78052df03b5c","modified":1495508903091},{"_id":"themes/indigo/screenshots/hexo-theme-pad.png","hash":"08e41f140682fbd9a78999de79823ed59b1d2232","modified":1495508903075},{"_id":"themes/indigo/screenshots/hexo-theme-phone.png","hash":"1404b4fd664a8a552eed8ab46c0fb3b281c4f007","modified":1495508903086},{"_id":"source/_posts/web-server/default_server.png","hash":"8dcf521b836f0859108f82ddad779683a1af87b2","modified":1495508902352},{"_id":"source/_posts/web-server/response_header.png","hash":"3c1da8222a689aae5158230eef0a5c15fc8792a5","modified":1495508902354},{"_id":"source/_posts/web-server/response_header_safe.png","hash":"23ab5ac44c6f04f858bd7bb9815760cc5563e694","modified":1495508902356},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"5f96bd5cfe26fe7ad476d9b58e6c2f7f5fb8e9af","modified":1495508902397},{"_id":"themes/indigo/layout/_partial/cnzz.ejs","hash":"dbee64698919aeaeb0923c44b3f8c5402c7b8fed","modified":1495508902467},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"ca6944189b24444f1b7d976c68631977cb21ff4e","modified":1495508902403},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"337e3004b99aed3dd98a83465fe75bc5ea3e219e","modified":1495508902505},{"_id":"themes/indigo/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1495508902520},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"654cfb61eb6779d7d4d2dd5b31330fb251fa273b","modified":1495508902540},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"0f353bf87a124581d6632d328a018353d4a990a1","modified":1495508902552},{"_id":"themes/indigo/layout/_partial/index-item.ejs","hash":"b0cc61079b36dc9922f7a5694b853fe4d7148959","modified":1495508902609},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"8b3e037dd5f3d4564012689c5cd6f63caf73df0f","modified":1495508902631},{"_id":"themes/indigo/layout/_partial/mathjax.ejs","hash":"b82771c359969ddf3b384ab4aacdb1bacbb53377","modified":1495508902643},{"_id":"themes/indigo/layout/_partial/menu.ejs","hash":"96d9b21c22e8c2048f2023ccbe7134031ecebdca","modified":1495508902662},{"_id":"themes/indigo/layout/_partial/post.ejs","hash":"13b8ca0a04285566b2414d5de0d6563f0f2d6de2","modified":1495508902705},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"b97fb6ee93b66a645cbddf8f14e85a03373952d1","modified":1495508902842},{"_id":"themes/indigo/layout/_partial/search.ejs","hash":"5b8d9b22a189ea0da4d2b04f409d68408712e36c","modified":1495508902849},{"_id":"themes/indigo/source/css/style.less","hash":"f3056b43159ddc24fb135089674ff823e675a4c9","modified":1495508903591},{"_id":"themes/indigo/source/img/alipay.jpg","hash":"92dda7f4318b3db3abd8cc5083178952b70c3560","modified":1495611337423},{"_id":"themes/indigo/source/img/brand.jpg","hash":"0e237f1b433851c156e1f1cdaeb044054b3b9879","modified":1495508903617},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1495508903621},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1495508903629},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1495508903632},{"_id":"themes/indigo/source/img/logo.jpg","hash":"2eda8e2bf8480d6fb56961d4d67cf8cfa8366f4b","modified":1495508903639},{"_id":"themes/indigo/source/img/wechat.jpg","hash":"beb0f7a66269172b4e32857f51d97d5595c100ae","modified":1495611344901},{"_id":"themes/indigo/source/js/main.js","hash":"8292514a9a2b8ab928871cdc1fa34e0aed6fee17","modified":1495508903647},{"_id":"themes/indigo/source/js/search.js","hash":"7b16dcdd20041944894b5419539e66ead5403c2e","modified":1495508903648},{"_id":"themes/indigo/screenshots/hexo-theme-archive.png","hash":"36fd8e55e6672aa6afbd7f88b68a532c819f4473","modified":1495508903070},{"_id":"themes/indigo/screenshots/hexo-theme-pc.png","hash":"5898394b7664bf87ec1422fe7c21e7e76fb37185","modified":1495508903083},{"_id":"themes/indigo/layout/_partial/post/comment.ejs","hash":"4d25f0bf9d7dba72908a5819f17b9edcd7361d6c","modified":1495508902748},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"c08e44cbd7315dec7afb6054b04d3c7b82c3bde8","modified":1495508902715},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"f9a8a0d99b39eec351c4effb2ad8508c8d2395ab","modified":1495508902752},{"_id":"themes/indigo/layout/_partial/post/head-meta.ejs","hash":"f137c126672769e9571be2bb0a70ea8dda644b0e","modified":1495508902773},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"fbb42e10a402555c54f94d8a7e9a03cb6a794f94","modified":1495508902784},{"_id":"themes/indigo/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1495508902761},{"_id":"themes/indigo/layout/_partial/post/reward.ejs","hash":"41a150990fda5bbd63a630b4840b56d4762b4251","modified":1495508902789},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"5728be1589a7533b10806982abe7ddb9bce23aa9","modified":1495508902815},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"60139e37b41769d218e5cf6f6040c41bd2293728","modified":1495508902823},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"eaad7af7888bddd7095243a43ff38f55ad8c494a","modified":1495508902838},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"9bf953ae16b8796291ea49b4e60a5174cd787d07","modified":1495508903099},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"804fb41d5c4c01ab452daf8429204bf8cb7944ad","modified":1495508903104},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"bad63006b3bd4849bf53ad38482af0d9971061d3","modified":1495508903126},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"439fed29b399232241b52a9c0d8464bdc21ef8c1","modified":1495508903134},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"4d225a6c7bb4bfec331893000f6a74f189d44ff9","modified":1495508903140},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"abe4f31e97397882862f82e61dd245d90ac278c7","modified":1495508903148},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"0361039b2abdeb1b41e504fa437df962cda055d2","modified":1495508903153},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"298abc4a58fbd838145d0c036b1fb007f569cf20","modified":1495508903158},{"_id":"themes/indigo/source/css/_partial/reward.less","hash":"68e21650caeffa0575b3e720da91f235453362f3","modified":1495508903175},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"3e457942995da8840e7662fa6cb551a7e12ea294","modified":1495508903182},{"_id":"themes/indigo/source/css/_partial/search.less","hash":"01bb8da651c5123ab862660b4fd79235464e31c0","modified":1495508903197},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"a57647250236ca57768bb687f20fc5f8deb55dd0","modified":1495508903213},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"36e77ccb39b080aab19d9d87fd20882d5ac84ee9","modified":1495508903219},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"6871d076083b7541c132eb54664e8d6fd80bf8e8","modified":1495508903227},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"a8b41b0b0c8ff2f6cf95f7f9784611dd8c212ffe","modified":1495508903233},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"ffafe7c70131ce66d497c23fb455abd9aa367496","modified":1495508903119},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1495508903389},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1495508903409},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1495508903418},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1495508903432},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1495508903462},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1495508903448},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1495508903482},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1495508903499},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1495508903519},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1495508903535},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1495508903541},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1495508903552},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1495508903577},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1495508903586},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1495508903505},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1495508903398},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1495508903442},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1495508903493},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1495508903529},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1495508903571},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1495508903264},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1495508903298},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1495508903349},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1495508903366},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1495508903332},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1495508903316}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Four commonly used form accept type","date":"2016-12-20T03:06:46.000Z","_content":"\nThe blog based on Node.js server.\n\nIn front-end, we have several types to send a request to server, most of the time, we use 3 commonly below:\n1. application/json\n2. application/x-www-form-urlencoded\n3. multipart/form-data\n\n## application/json\n### GET\n#### client\n``` javascript\n$.ajax({\n  url: '/upload',\n  method: 'GET',\n  contentType: 'application/json',\n  data: JSON.stringify({   // must turn to string, whether jQuery will turn to \"x-www-form-urlcoded\" format\n    username: 'username',\n    password: 'password'\n  })\n})\n```\nCheck the request header in network panel in Chrome dev-tool, you will see the request URL turn to *http://domain/upload?{\"test\":\"wuyuchang\",\"passowrd\":\"chang\"}*, it's because GET request always append data to the request URL.\n\n``` header\nRequest URL:http://domain/upload?{\"test\":\"username\",\"passowrd\":\"password\"}\nRequest Method:GET\nContent-Type:application/json\n...\n```\n#### server\nIn server side, you can read the header that client send throw req.headers, and URL throw req.url, then you just compile analysis the parameter after question mark.\n``` javascript\nhttp.createServer((req, res) => {\n  const qs = require('querystring')\n  let param = qs.unescape(req.url.split('?')[1])\n  let json = JSON.parse(param)\n  // ...\n}).listen(8080)\n```\n### POST\n#### Client\nFor client, you just change the request method from 'GET' to 'POST'.\n#### Server\nIn server side, you can't get content that client send directly, it's send throw buffer, so you have to receive it by listen it throw req.on('data')\n``` javascript\nhttp.createServer((req, res) => {\n  let chunk = ''\n  req.on('data', data => {\n    chunk += data\n  })\n  req.on('end', err => {\n    let json = JSON.parse(chunk.toString())\n    // ...\n  })\n}).listen(8080)\n```\nIt's convenient to get JSON data throw this way.\n\n## application/x-www-form-urlencoded\n### GET\n#### Client\nSame with above, just change the contenType to 'application/x-www-form-urlencoded', the jQuery wouldn't add contentType automatic if you set method as 'GET'.\n#### server\n``` javascript\nhttp.createServer((req, res) => {\n  let json = require('url').parse(req.url, true).query\n  // ...\n}).listen(8080)\n```\n### POST\njQuery set contentType as 'application/x-www-form-urlencoded' if you send request throw 'POST' method.\n#### server\n``` javascript\nhttp.createServer((req, res) => {\n  let chunk = ''\n  req.on('data', data => {\n    chunk += data\n  })\n  req.on('end', err => {\n    let qs = require('querystring')\n    let json = qs.parse(chunk.toString())\n    // ...\n  })\n}).listen(8080)\n```\n\n## multipart/form-data\n*multipart/form-data* always used to send a file, of course, you also can send form without file.\n### GET\nIt's same with below, the different is that if you send a file to server, the server can't accept it.\n\n### POST\n#### Client\n``` html\n<form action=\"/upload\" method=\"POST\" enctype=\"multipart/form-data\">\n  <input type=\"text\" name=\"test\" value=\"wuyuchang\">\n  <input type=\"password\" name=\"pwd\" value=\"chang\">\n  <input type=\"file\" multiple=\"multiple\" name=\"upload\"><br>\n  <input type=\"submit\" value=\"Upload\">\n</form>\n```\nthe request header is different\n``` text\nContent-Type:multipart/form-data; boundary=----WebKitFormBoundaryuyeyXEbnVwhZJcl6\nRequest Payload:\n  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6\n  Content-Disposition: form-data; name=\"test\"\n\n  wuyuchang\n  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6\n  Content-Disposition: form-data; name=\"pwd\"\n\n  chang\n  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6\n  Content-Disposition: form-data; name=\"upload\"; filename=\"boom.png\"\n  Content-Type: image/png\n```\n\nthe value of boundary is random.\n#### Server\nIn server side you can compile it, but it's complex, you can import a package name of 'formidable'.\n","source":"_posts/Four-commonly-used-form-accept-type.md","raw":"---\ntitle: Four commonly used form accept type\ndate: 2016-12-20 11:06:46\ntags: Node.js\n---\n\nThe blog based on Node.js server.\n\nIn front-end, we have several types to send a request to server, most of the time, we use 3 commonly below:\n1. application/json\n2. application/x-www-form-urlencoded\n3. multipart/form-data\n\n## application/json\n### GET\n#### client\n``` javascript\n$.ajax({\n  url: '/upload',\n  method: 'GET',\n  contentType: 'application/json',\n  data: JSON.stringify({   // must turn to string, whether jQuery will turn to \"x-www-form-urlcoded\" format\n    username: 'username',\n    password: 'password'\n  })\n})\n```\nCheck the request header in network panel in Chrome dev-tool, you will see the request URL turn to *http://domain/upload?{\"test\":\"wuyuchang\",\"passowrd\":\"chang\"}*, it's because GET request always append data to the request URL.\n\n``` header\nRequest URL:http://domain/upload?{\"test\":\"username\",\"passowrd\":\"password\"}\nRequest Method:GET\nContent-Type:application/json\n...\n```\n#### server\nIn server side, you can read the header that client send throw req.headers, and URL throw req.url, then you just compile analysis the parameter after question mark.\n``` javascript\nhttp.createServer((req, res) => {\n  const qs = require('querystring')\n  let param = qs.unescape(req.url.split('?')[1])\n  let json = JSON.parse(param)\n  // ...\n}).listen(8080)\n```\n### POST\n#### Client\nFor client, you just change the request method from 'GET' to 'POST'.\n#### Server\nIn server side, you can't get content that client send directly, it's send throw buffer, so you have to receive it by listen it throw req.on('data')\n``` javascript\nhttp.createServer((req, res) => {\n  let chunk = ''\n  req.on('data', data => {\n    chunk += data\n  })\n  req.on('end', err => {\n    let json = JSON.parse(chunk.toString())\n    // ...\n  })\n}).listen(8080)\n```\nIt's convenient to get JSON data throw this way.\n\n## application/x-www-form-urlencoded\n### GET\n#### Client\nSame with above, just change the contenType to 'application/x-www-form-urlencoded', the jQuery wouldn't add contentType automatic if you set method as 'GET'.\n#### server\n``` javascript\nhttp.createServer((req, res) => {\n  let json = require('url').parse(req.url, true).query\n  // ...\n}).listen(8080)\n```\n### POST\njQuery set contentType as 'application/x-www-form-urlencoded' if you send request throw 'POST' method.\n#### server\n``` javascript\nhttp.createServer((req, res) => {\n  let chunk = ''\n  req.on('data', data => {\n    chunk += data\n  })\n  req.on('end', err => {\n    let qs = require('querystring')\n    let json = qs.parse(chunk.toString())\n    // ...\n  })\n}).listen(8080)\n```\n\n## multipart/form-data\n*multipart/form-data* always used to send a file, of course, you also can send form without file.\n### GET\nIt's same with below, the different is that if you send a file to server, the server can't accept it.\n\n### POST\n#### Client\n``` html\n<form action=\"/upload\" method=\"POST\" enctype=\"multipart/form-data\">\n  <input type=\"text\" name=\"test\" value=\"wuyuchang\">\n  <input type=\"password\" name=\"pwd\" value=\"chang\">\n  <input type=\"file\" multiple=\"multiple\" name=\"upload\"><br>\n  <input type=\"submit\" value=\"Upload\">\n</form>\n```\nthe request header is different\n``` text\nContent-Type:multipart/form-data; boundary=----WebKitFormBoundaryuyeyXEbnVwhZJcl6\nRequest Payload:\n  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6\n  Content-Disposition: form-data; name=\"test\"\n\n  wuyuchang\n  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6\n  Content-Disposition: form-data; name=\"pwd\"\n\n  chang\n  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6\n  Content-Disposition: form-data; name=\"upload\"; filename=\"boom.png\"\n  Content-Type: image/png\n```\n\nthe value of boundary is random.\n#### Server\nIn server side you can compile it, but it's complex, you can import a package name of 'formidable'.\n","slug":"Four-commonly-used-form-accept-type","published":1,"updated":"2017-05-23T03:08:22.341Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj32sqk0p00001klej4ftmakb","content":"<p>The blog based on Node.js server.</p>\n<p>In front-end, we have several types to send a request to server, most of the time, we use 3 commonly below:</p>\n<ol>\n<li>application/json</li>\n<li>application/x-www-form-urlencoded</li>\n<li>multipart/form-data</li>\n</ol>\n<h2 id=\"application-json\"><a href=\"#application-json\" class=\"headerlink\" title=\"application/json\"></a>application/json</h2><h3 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h3><h4 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">'/upload'</span>,</div><div class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">'GET'</span>,</div><div class=\"line\">  <span class=\"attr\">contentType</span>: <span class=\"string\">'application/json'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"built_in\">JSON</span>.stringify(&#123;   <span class=\"comment\">// must turn to string, whether jQuery will turn to \"x-www-form-urlcoded\" format</span></div><div class=\"line\">    username: <span class=\"string\">'username'</span>,</div><div class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">'password'</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Check the request header in network panel in Chrome dev-tool, you will see the request URL turn to <em><a href=\"http://domain/upload?{&quot;test&quot;:&quot;wuyuchang&quot;,&quot;passowrd&quot;:&quot;chang&quot;}\" target=\"_blank\" rel=\"external\">http://domain/upload?{&quot;test&quot;:&quot;wuyuchang&quot;,&quot;passowrd&quot;:&quot;chang&quot;}</a></em>, it’s because GET request always append data to the request URL.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Request URL:http://domain/upload?&#123;&quot;test&quot;:&quot;username&quot;,&quot;passowrd&quot;:&quot;password&quot;&#125;</div><div class=\"line\">Request Method:GET</div><div class=\"line\">Content-Type:application/json</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<h4 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h4><p>In server side, you can read the header that client send throw req.headers, and URL throw req.url, then you just compile analysis the parameter after question mark.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> qs = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>)</div><div class=\"line\">  <span class=\"keyword\">let</span> param = qs.unescape(req.url.split(<span class=\"string\">'?'</span>)[<span class=\"number\">1</span>])</div><div class=\"line\">  <span class=\"keyword\">let</span> json = <span class=\"built_in\">JSON</span>.parse(param)</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;).listen(<span class=\"number\">8080</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h3><h4 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client\"></a>Client</h4><p>For client, you just change the request method from ‘GET’ to ‘POST’.</p>\n<h4 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h4><p>In server side, you can’t get content that client send directly, it’s send throw buffer, so you have to receive it by listen it throw req.on(‘data’)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> chunk = <span class=\"string\">''</span></div><div class=\"line\">  req.on(<span class=\"string\">'data'</span>, data =&gt; &#123;</div><div class=\"line\">    chunk += data</div><div class=\"line\">  &#125;)</div><div class=\"line\">  req.on(<span class=\"string\">'end'</span>, err =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> json = <span class=\"built_in\">JSON</span>.parse(chunk.toString())</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;).listen(<span class=\"number\">8080</span>)</div></pre></td></tr></table></figure></p>\n<p>It’s convenient to get JSON data throw this way.</p>\n<h2 id=\"application-x-www-form-urlencoded\"><a href=\"#application-x-www-form-urlencoded\" class=\"headerlink\" title=\"application/x-www-form-urlencoded\"></a>application/x-www-form-urlencoded</h2><h3 id=\"GET-1\"><a href=\"#GET-1\" class=\"headerlink\" title=\"GET\"></a>GET</h3><h4 id=\"Client-1\"><a href=\"#Client-1\" class=\"headerlink\" title=\"Client\"></a>Client</h4><p>Same with above, just change the contenType to ‘application/x-www-form-urlencoded’, the jQuery wouldn’t add contentType automatic if you set method as ‘GET’.</p>\n<h4 id=\"server-1\"><a href=\"#server-1\" class=\"headerlink\" title=\"server\"></a>server</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> json = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>).parse(req.url, <span class=\"literal\">true</span>).query</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;).listen(<span class=\"number\">8080</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"POST-1\"><a href=\"#POST-1\" class=\"headerlink\" title=\"POST\"></a>POST</h3><p>jQuery set contentType as ‘application/x-www-form-urlencoded’ if you send request throw ‘POST’ method.</p>\n<h4 id=\"server-2\"><a href=\"#server-2\" class=\"headerlink\" title=\"server\"></a>server</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> chunk = <span class=\"string\">''</span></div><div class=\"line\">  req.on(<span class=\"string\">'data'</span>, data =&gt; &#123;</div><div class=\"line\">    chunk += data</div><div class=\"line\">  &#125;)</div><div class=\"line\">  req.on(<span class=\"string\">'end'</span>, err =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> qs = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>)</div><div class=\"line\">    <span class=\"keyword\">let</span> json = qs.parse(chunk.toString())</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;).listen(<span class=\"number\">8080</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"multipart-form-data\"><a href=\"#multipart-form-data\" class=\"headerlink\" title=\"multipart/form-data\"></a>multipart/form-data</h2><p><em>multipart/form-data</em> always used to send a file, of course, you also can send form without file.</p>\n<h3 id=\"GET-2\"><a href=\"#GET-2\" class=\"headerlink\" title=\"GET\"></a>GET</h3><p>It’s same with below, the different is that if you send a file to server, the server can’t accept it.</p>\n<h3 id=\"POST-2\"><a href=\"#POST-2\" class=\"headerlink\" title=\"POST\"></a>POST</h3><h4 id=\"Client-2\"><a href=\"#Client-2\" class=\"headerlink\" title=\"Client\"></a>Client</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/upload\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"wuyuchang\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"pwd\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"chang\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">multiple</span>=<span class=\"string\">\"multiple\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"upload\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Upload\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>the request header is different<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryuyeyXEbnVwhZJcl6</div><div class=\"line\">Request Payload:</div><div class=\"line\">  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6</div><div class=\"line\">  Content-Disposition: form-data; name=&quot;test&quot;</div><div class=\"line\"></div><div class=\"line\">  wuyuchang</div><div class=\"line\">  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6</div><div class=\"line\">  Content-Disposition: form-data; name=&quot;pwd&quot;</div><div class=\"line\"></div><div class=\"line\">  chang</div><div class=\"line\">  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6</div><div class=\"line\">  Content-Disposition: form-data; name=&quot;upload&quot;; filename=&quot;boom.png&quot;</div><div class=\"line\">  Content-Type: image/png</div></pre></td></tr></table></figure></p>\n<p>the value of boundary is random.</p>\n<h4 id=\"Server-1\"><a href=\"#Server-1\" class=\"headerlink\" title=\"Server\"></a>Server</h4><p>In server side you can compile it, but it’s complex, you can import a package name of ‘formidable’.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>The blog based on Node.js server.</p>\n<p>In front-end, we have several types to send a request to server, most of the time, we use 3 commonly below:</p>\n<ol>\n<li>application/json</li>\n<li>application/x-www-form-urlencoded</li>\n<li>multipart/form-data</li>\n</ol>\n<h2 id=\"application-json\"><a href=\"#application-json\" class=\"headerlink\" title=\"application/json\"></a>application/json</h2><h3 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h3><h4 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">'/upload'</span>,</div><div class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">'GET'</span>,</div><div class=\"line\">  <span class=\"attr\">contentType</span>: <span class=\"string\">'application/json'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"built_in\">JSON</span>.stringify(&#123;   <span class=\"comment\">// must turn to string, whether jQuery will turn to \"x-www-form-urlcoded\" format</span></div><div class=\"line\">    username: <span class=\"string\">'username'</span>,</div><div class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">'password'</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Check the request header in network panel in Chrome dev-tool, you will see the request URL turn to <em><a href=\"http://domain/upload?{&quot;test&quot;:&quot;wuyuchang&quot;,&quot;passowrd&quot;:&quot;chang&quot;}\" target=\"_blank\" rel=\"external\">http://domain/upload?{&quot;test&quot;:&quot;wuyuchang&quot;,&quot;passowrd&quot;:&quot;chang&quot;}</a></em>, it’s because GET request always append data to the request URL.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Request URL:http://domain/upload?&#123;&quot;test&quot;:&quot;username&quot;,&quot;passowrd&quot;:&quot;password&quot;&#125;</div><div class=\"line\">Request Method:GET</div><div class=\"line\">Content-Type:application/json</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<h4 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h4><p>In server side, you can read the header that client send throw req.headers, and URL throw req.url, then you just compile analysis the parameter after question mark.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> qs = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>)</div><div class=\"line\">  <span class=\"keyword\">let</span> param = qs.unescape(req.url.split(<span class=\"string\">'?'</span>)[<span class=\"number\">1</span>])</div><div class=\"line\">  <span class=\"keyword\">let</span> json = <span class=\"built_in\">JSON</span>.parse(param)</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;).listen(<span class=\"number\">8080</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h3><h4 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client\"></a>Client</h4><p>For client, you just change the request method from ‘GET’ to ‘POST’.</p>\n<h4 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h4><p>In server side, you can’t get content that client send directly, it’s send throw buffer, so you have to receive it by listen it throw req.on(‘data’)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> chunk = <span class=\"string\">''</span></div><div class=\"line\">  req.on(<span class=\"string\">'data'</span>, data =&gt; &#123;</div><div class=\"line\">    chunk += data</div><div class=\"line\">  &#125;)</div><div class=\"line\">  req.on(<span class=\"string\">'end'</span>, err =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> json = <span class=\"built_in\">JSON</span>.parse(chunk.toString())</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;).listen(<span class=\"number\">8080</span>)</div></pre></td></tr></table></figure></p>\n<p>It’s convenient to get JSON data throw this way.</p>\n<h2 id=\"application-x-www-form-urlencoded\"><a href=\"#application-x-www-form-urlencoded\" class=\"headerlink\" title=\"application/x-www-form-urlencoded\"></a>application/x-www-form-urlencoded</h2><h3 id=\"GET-1\"><a href=\"#GET-1\" class=\"headerlink\" title=\"GET\"></a>GET</h3><h4 id=\"Client-1\"><a href=\"#Client-1\" class=\"headerlink\" title=\"Client\"></a>Client</h4><p>Same with above, just change the contenType to ‘application/x-www-form-urlencoded’, the jQuery wouldn’t add contentType automatic if you set method as ‘GET’.</p>\n<h4 id=\"server-1\"><a href=\"#server-1\" class=\"headerlink\" title=\"server\"></a>server</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> json = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>).parse(req.url, <span class=\"literal\">true</span>).query</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;).listen(<span class=\"number\">8080</span>)</div></pre></td></tr></table></figure>\n<h3 id=\"POST-1\"><a href=\"#POST-1\" class=\"headerlink\" title=\"POST\"></a>POST</h3><p>jQuery set contentType as ‘application/x-www-form-urlencoded’ if you send request throw ‘POST’ method.</p>\n<h4 id=\"server-2\"><a href=\"#server-2\" class=\"headerlink\" title=\"server\"></a>server</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">http.createServer(<span class=\"function\">(<span class=\"params\">req, res</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> chunk = <span class=\"string\">''</span></div><div class=\"line\">  req.on(<span class=\"string\">'data'</span>, data =&gt; &#123;</div><div class=\"line\">    chunk += data</div><div class=\"line\">  &#125;)</div><div class=\"line\">  req.on(<span class=\"string\">'end'</span>, err =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> qs = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>)</div><div class=\"line\">    <span class=\"keyword\">let</span> json = qs.parse(chunk.toString())</div><div class=\"line\">    <span class=\"comment\">// ...</span></div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;).listen(<span class=\"number\">8080</span>)</div></pre></td></tr></table></figure>\n<h2 id=\"multipart-form-data\"><a href=\"#multipart-form-data\" class=\"headerlink\" title=\"multipart/form-data\"></a>multipart/form-data</h2><p><em>multipart/form-data</em> always used to send a file, of course, you also can send form without file.</p>\n<h3 id=\"GET-2\"><a href=\"#GET-2\" class=\"headerlink\" title=\"GET\"></a>GET</h3><p>It’s same with below, the different is that if you send a file to server, the server can’t accept it.</p>\n<h3 id=\"POST-2\"><a href=\"#POST-2\" class=\"headerlink\" title=\"POST\"></a>POST</h3><h4 id=\"Client-2\"><a href=\"#Client-2\" class=\"headerlink\" title=\"Client\"></a>Client</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/upload\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"POST\"</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"wuyuchang\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"password\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"pwd\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"chang\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">multiple</span>=<span class=\"string\">\"multiple\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"upload\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"submit\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"Upload\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>the request header is different<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryuyeyXEbnVwhZJcl6</div><div class=\"line\">Request Payload:</div><div class=\"line\">  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6</div><div class=\"line\">  Content-Disposition: form-data; name=&quot;test&quot;</div><div class=\"line\"></div><div class=\"line\">  wuyuchang</div><div class=\"line\">  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6</div><div class=\"line\">  Content-Disposition: form-data; name=&quot;pwd&quot;</div><div class=\"line\"></div><div class=\"line\">  chang</div><div class=\"line\">  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6</div><div class=\"line\">  Content-Disposition: form-data; name=&quot;upload&quot;; filename=&quot;boom.png&quot;</div><div class=\"line\">  Content-Type: image/png</div></pre></td></tr></table></figure></p>\n<p>the value of boundary is random.</p>\n<h4 id=\"Server-1\"><a href=\"#Server-1\" class=\"headerlink\" title=\"Server\"></a>Server</h4><p>In server side you can compile it, but it’s complex, you can import a package name of ‘formidable’.</p>\n"},{"title":"Principle of Promise/Deferred","date":"2016-12-09T02:21:08.000Z","_content":"\n# Super simple realize separate call an async and handle result in two files.\nAssume we have a project base on jQuery, we have to separate call AJAX and handle result in another file.\n\nMost of the time, we handle the result with below.\n``` JavaScript\n$.get('url', data => {\n  //handle data\n})\n```\n\nBut, sometimes, we don't want to handle it in the moment. Maybe we just want to handle in another file. So we can do below.\n`request.js`\n``` JavaScript\n$.get('url', data => {\n  window.result(data)\n})\n```\n`handle.js`\n``` JavaScript\nwindow.result = data => {\n  // handle result\n}\n```\n\nBut, we most of the time, we are not just handle the success result. We also handle error, receiving data.\nFor example.\n\n`request.js`\n``` JavaScript\n$.ajax({\n  url: 'url',\n  data: 'data',\n  type: 'get',\n  success: data => {\n    window.deferrd.resolve(data)\n  },\n  error: err => {\n    window.defered.error(err)\n  },\n  complete: notify => {\n    window.deferred.notify('complete')\n  }\n})\n```\n\n`handle.js`\n``` JavaScript\nwindow.deferred = {\n  //handle success\n  resolve: data => {\n    console.log(data)\n  },\n  //handle error\n  error: err => {\n    console.log(err)\n  },\n  //handle complete\n  notify: msg => {\n    console.log(msg)\n  }\n}\n```\n\n# use jQuery promise/deferred\nFortunately, jQuery already realize this, so we just have to do below.\n`request.js`\n``` JavaScript\nwindow.promise = $.get('url')\n```\n`handle.js`\n``` JavaScript\nwindow.promise.then(data => {\n  // handle success\n}, err => {\n  // handle error\n})\n```\n\n# Promise/A\nFor show how promise and deferred work, we create a new and simple promise and deferred object, so that you can easy understand it.\n## Promise Object\nHere try to extend EventEmitter module to explain how it work.\n`Promise.class.js`\n``` JavaScript\nclass Promise extends EventEmitter {\n  then(success, error, progress) {\n    if (typeof success === 'function') {\n      this.once('success', success)\n    }\n    if (typeof error === 'function') {\n      this.once('error', error)\n    }\n    if (typeof progress === 'progress') {\n      // Note, this function will be recall, so here defined the event use 'on'\n      this.on('progress', progress)\n    }\n  }\n}\n```\nHere you can see we defined three events after you pass these callback function into it through call 'then' function.\nSo we defined the events, and we have to emit it, so that we can execute these callbacks with the result.\n\nBelow, we defined the Deferred object.\n## Deferred Object\nHere we defined the Deferred, these functions just emit promise, so tell them we finished.\n`Deferred.class.js`\n``` JavaScript\nclass Deferred {\n  this.state = 'unsuccess'\n  this.promise = new Promise()\n\n  resolve(obj) {\n    this.state = 'success'\n    this.promise.emit('success', obj)\n  }\n  reject(obj) {\n    this.state = 'error'\n    this.promise.emit('error', obj)\n  }\n  progress(obj) {\n    this.state = 'progress'\n    this.promise.emit('progress', obj)\n  }\n}\n```\n\n\n## use Promise & Deferred\nTo realize this, we create a new Deferred, and we trigger deferred function (progress/end/error) when we finish specific action to tell Deferred that we finished.\nThen we get promise object, and then we can store it, and call it with callback in another file.\nSo we successful separate call async and get data in two files.\n``` JavaScript\nlet promisify = res => {\n  let deferred = new Deferred()\n  let result = ''\n\n  res.on('data', chunk => {\n    result += chunk\n    deferred.progress(result)\n  })\n  res.on('end', () => {\n    deferred.resolve(result)\n  })\n  res.on('error', () => {\n    deferred.reject()\n  })\n\n  return deferred.promise\n}\n\nglobal.result = promisify(res)\n\n\n// in another file, this just an example to pass the result to global, so we can easy get the result, in the production, you better to pass the result in other way.\nglobal.result.then((result) => {\n  // success\n}, (err) => {\n  // error\n}, (chunk) => {\n  // progress\n  console.log(chunk)\n})\n```\n\n## Deferred.all()\nDo some action after a several of asynchronous finished.\n`Deferred.class.js`\n``` JavaScript\nclass Deferred {\n  // ...\n\n  all(promises) {\n    let count = promises.length\n    let that = this\n    let results = []\n    promises.forEach((promise, i) => {\n      promise.then(data => {\n        count --\n        results[i] = data\n        if (count === 0) {\n          that.resolve(results)\n        }\n      })\n    }, err => {\n      that.reject(err)\n    })\n\n    return this.promise\n  }\n}\n```\n\n## Order Run asynchronous\nRun asynchronous in order\n`Deferred.class.js`\n``` JavaScript\nconst Promise = require('./promise.class')\n\nmodule.exports = class Deferred {\n  constructor() {\n    this.promise = new Promise()\n  }\n\n  resolve(data) {\n    let promise = this.promise\n    let handler\n    while(handler = promise.queue.shift()) {\n      if (handler && handler.resolve) {\n        let ret = handler.resolve(data)\n\n        // if there has next promise, then we interrupt current loop, and set next promise.queue equals current queue\n        if (ret && ret.isPromise) {\n          ret.queue = promise.queue\n          return\n        }\n      }\n    }\n  }\n\n  reject(err) {\n    let promise = this.promise\n    let handler\n    while(handler = promise.queue.shift()) {\n      if (handler && handler.reject) {\n        let ret = handler.reject(err)\n\n        // if there has next promise, then we interrupt current loop, and set next promise.queue equals current queue\n        if (ret && ret.isPromise) {\n          ret.queue = promise.queue\n          return\n        }\n      }\n    }\n  }\n\n  callback(str) {\n    let that = this\n    return (err, file) => {\n      if (err) {\n        return that.reject(err)\n      }\n      that.resolve(file)\n    }\n  }\n}\n```\n\n`promise.class.js`\n``` JavaScript\nmodule.exports = class Promise {\n  constructor() {\n    this.queue = []\n    this.isPromise = true\n  }\n\n  then(resolve, reject) {\n    let handler = {}\n    if (typeof resolve === 'function') {\n      handler.resolve = resolve\n    }\n    if (typeof reject === 'function') {\n      handler.reject = reject\n    }\n\n    this.queue.push(handler)\n    return this\n  }\n}\n```\n\n`app.js`\n``` JavaScript\nconst Deferred = require('./deferred.class')\nconst fs = require('fs')\n\nlet action1 = (file, encoding) => {\n  let deferred = new Deferred()\n  fs.readFile(file, encoding, deferred.callback())\n  return deferred.promise\n}\n\nlet action2 = (file, encoding) => {\n  let deferred = new Deferred()\n  fs.readFile(file, encoding, deferred.callback())\n  return deferred.promise\n}\n\naction1('./file1.txt', 'utf8').then(file1 => {\n  return action2(file1.trim(), 'utf8')\n}).then(file2 => {\n  console.log(file2)\n})\n```\n","source":"_posts/Principle-of-Promise-Deferred.md","raw":"---\ntitle: Principle of Promise/Deferred\ndate: 2016-12-09 10:21:08\ntags: Node.js\n---\n\n# Super simple realize separate call an async and handle result in two files.\nAssume we have a project base on jQuery, we have to separate call AJAX and handle result in another file.\n\nMost of the time, we handle the result with below.\n``` JavaScript\n$.get('url', data => {\n  //handle data\n})\n```\n\nBut, sometimes, we don't want to handle it in the moment. Maybe we just want to handle in another file. So we can do below.\n`request.js`\n``` JavaScript\n$.get('url', data => {\n  window.result(data)\n})\n```\n`handle.js`\n``` JavaScript\nwindow.result = data => {\n  // handle result\n}\n```\n\nBut, we most of the time, we are not just handle the success result. We also handle error, receiving data.\nFor example.\n\n`request.js`\n``` JavaScript\n$.ajax({\n  url: 'url',\n  data: 'data',\n  type: 'get',\n  success: data => {\n    window.deferrd.resolve(data)\n  },\n  error: err => {\n    window.defered.error(err)\n  },\n  complete: notify => {\n    window.deferred.notify('complete')\n  }\n})\n```\n\n`handle.js`\n``` JavaScript\nwindow.deferred = {\n  //handle success\n  resolve: data => {\n    console.log(data)\n  },\n  //handle error\n  error: err => {\n    console.log(err)\n  },\n  //handle complete\n  notify: msg => {\n    console.log(msg)\n  }\n}\n```\n\n# use jQuery promise/deferred\nFortunately, jQuery already realize this, so we just have to do below.\n`request.js`\n``` JavaScript\nwindow.promise = $.get('url')\n```\n`handle.js`\n``` JavaScript\nwindow.promise.then(data => {\n  // handle success\n}, err => {\n  // handle error\n})\n```\n\n# Promise/A\nFor show how promise and deferred work, we create a new and simple promise and deferred object, so that you can easy understand it.\n## Promise Object\nHere try to extend EventEmitter module to explain how it work.\n`Promise.class.js`\n``` JavaScript\nclass Promise extends EventEmitter {\n  then(success, error, progress) {\n    if (typeof success === 'function') {\n      this.once('success', success)\n    }\n    if (typeof error === 'function') {\n      this.once('error', error)\n    }\n    if (typeof progress === 'progress') {\n      // Note, this function will be recall, so here defined the event use 'on'\n      this.on('progress', progress)\n    }\n  }\n}\n```\nHere you can see we defined three events after you pass these callback function into it through call 'then' function.\nSo we defined the events, and we have to emit it, so that we can execute these callbacks with the result.\n\nBelow, we defined the Deferred object.\n## Deferred Object\nHere we defined the Deferred, these functions just emit promise, so tell them we finished.\n`Deferred.class.js`\n``` JavaScript\nclass Deferred {\n  this.state = 'unsuccess'\n  this.promise = new Promise()\n\n  resolve(obj) {\n    this.state = 'success'\n    this.promise.emit('success', obj)\n  }\n  reject(obj) {\n    this.state = 'error'\n    this.promise.emit('error', obj)\n  }\n  progress(obj) {\n    this.state = 'progress'\n    this.promise.emit('progress', obj)\n  }\n}\n```\n\n\n## use Promise & Deferred\nTo realize this, we create a new Deferred, and we trigger deferred function (progress/end/error) when we finish specific action to tell Deferred that we finished.\nThen we get promise object, and then we can store it, and call it with callback in another file.\nSo we successful separate call async and get data in two files.\n``` JavaScript\nlet promisify = res => {\n  let deferred = new Deferred()\n  let result = ''\n\n  res.on('data', chunk => {\n    result += chunk\n    deferred.progress(result)\n  })\n  res.on('end', () => {\n    deferred.resolve(result)\n  })\n  res.on('error', () => {\n    deferred.reject()\n  })\n\n  return deferred.promise\n}\n\nglobal.result = promisify(res)\n\n\n// in another file, this just an example to pass the result to global, so we can easy get the result, in the production, you better to pass the result in other way.\nglobal.result.then((result) => {\n  // success\n}, (err) => {\n  // error\n}, (chunk) => {\n  // progress\n  console.log(chunk)\n})\n```\n\n## Deferred.all()\nDo some action after a several of asynchronous finished.\n`Deferred.class.js`\n``` JavaScript\nclass Deferred {\n  // ...\n\n  all(promises) {\n    let count = promises.length\n    let that = this\n    let results = []\n    promises.forEach((promise, i) => {\n      promise.then(data => {\n        count --\n        results[i] = data\n        if (count === 0) {\n          that.resolve(results)\n        }\n      })\n    }, err => {\n      that.reject(err)\n    })\n\n    return this.promise\n  }\n}\n```\n\n## Order Run asynchronous\nRun asynchronous in order\n`Deferred.class.js`\n``` JavaScript\nconst Promise = require('./promise.class')\n\nmodule.exports = class Deferred {\n  constructor() {\n    this.promise = new Promise()\n  }\n\n  resolve(data) {\n    let promise = this.promise\n    let handler\n    while(handler = promise.queue.shift()) {\n      if (handler && handler.resolve) {\n        let ret = handler.resolve(data)\n\n        // if there has next promise, then we interrupt current loop, and set next promise.queue equals current queue\n        if (ret && ret.isPromise) {\n          ret.queue = promise.queue\n          return\n        }\n      }\n    }\n  }\n\n  reject(err) {\n    let promise = this.promise\n    let handler\n    while(handler = promise.queue.shift()) {\n      if (handler && handler.reject) {\n        let ret = handler.reject(err)\n\n        // if there has next promise, then we interrupt current loop, and set next promise.queue equals current queue\n        if (ret && ret.isPromise) {\n          ret.queue = promise.queue\n          return\n        }\n      }\n    }\n  }\n\n  callback(str) {\n    let that = this\n    return (err, file) => {\n      if (err) {\n        return that.reject(err)\n      }\n      that.resolve(file)\n    }\n  }\n}\n```\n\n`promise.class.js`\n``` JavaScript\nmodule.exports = class Promise {\n  constructor() {\n    this.queue = []\n    this.isPromise = true\n  }\n\n  then(resolve, reject) {\n    let handler = {}\n    if (typeof resolve === 'function') {\n      handler.resolve = resolve\n    }\n    if (typeof reject === 'function') {\n      handler.reject = reject\n    }\n\n    this.queue.push(handler)\n    return this\n  }\n}\n```\n\n`app.js`\n``` JavaScript\nconst Deferred = require('./deferred.class')\nconst fs = require('fs')\n\nlet action1 = (file, encoding) => {\n  let deferred = new Deferred()\n  fs.readFile(file, encoding, deferred.callback())\n  return deferred.promise\n}\n\nlet action2 = (file, encoding) => {\n  let deferred = new Deferred()\n  fs.readFile(file, encoding, deferred.callback())\n  return deferred.promise\n}\n\naction1('./file1.txt', 'utf8').then(file1 => {\n  return action2(file1.trim(), 'utf8')\n}).then(file2 => {\n  console.log(file2)\n})\n```\n","slug":"Principle-of-Promise-Deferred","published":1,"updated":"2017-05-23T03:08:22.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj32sqk0x00011kleece7pork","content":"<h1 id=\"Super-simple-realize-separate-call-an-async-and-handle-result-in-two-files\"><a href=\"#Super-simple-realize-separate-call-an-async-and-handle-result-in-two-files\" class=\"headerlink\" title=\"Super simple realize separate call an async and handle result in two files.\"></a>Super simple realize separate call an async and handle result in two files.</h1><p>Assume we have a project base on jQuery, we have to separate call AJAX and handle result in another file.</p>\n<p>Most of the time, we handle the result with below.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.get(<span class=\"string\">'url'</span>, data =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">//handle data</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>But, sometimes, we don’t want to handle it in the moment. Maybe we just want to handle in another file. So we can do below.<br><code>request.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.get(<span class=\"string\">'url'</span>, data =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">window</span>.result(data)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><code>handle.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.result = <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// handle result</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>But, we most of the time, we are not just handle the success result. We also handle error, receiving data.<br>For example.</p>\n<p><code>request.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">'url'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"string\">'data'</span>,</div><div class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">'get'</span>,</div><div class=\"line\">  <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.deferrd.resolve(data)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.defered.error(err)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">complete</span>: <span class=\"function\"><span class=\"params\">notify</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.deferred.notify(<span class=\"string\">'complete'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><code>handle.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.deferred = &#123;</div><div class=\"line\">  <span class=\"comment\">//handle success</span></div><div class=\"line\">  resolve: <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//handle error</span></div><div class=\"line\">  error: <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(err)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//handle complete</span></div><div class=\"line\">  notify: <span class=\"function\"><span class=\"params\">msg</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(msg)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"use-jQuery-promise-deferred\"><a href=\"#use-jQuery-promise-deferred\" class=\"headerlink\" title=\"use jQuery promise/deferred\"></a>use jQuery promise/deferred</h1><p>Fortunately, jQuery already realize this, so we just have to do below.<br><code>request.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.promise = $.get(<span class=\"string\">'url'</span>)</div></pre></td></tr></table></figure></p>\n<p><code>handle.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.promise.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// handle success</span></div><div class=\"line\">&#125;, err =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// handle error</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h1 id=\"Promise-A\"><a href=\"#Promise-A\" class=\"headerlink\" title=\"Promise/A\"></a>Promise/A</h1><p>For show how promise and deferred work, we create a new and simple promise and deferred object, so that you can easy understand it.</p>\n<h2 id=\"Promise-Object\"><a href=\"#Promise-Object\" class=\"headerlink\" title=\"Promise Object\"></a>Promise Object</h2><p>Here try to extend EventEmitter module to explain how it work.<br><code>Promise.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> <span class=\"keyword\">extends</span> <span class=\"title\">EventEmitter</span> </span>&#123;</div><div class=\"line\">  then(success, error, progress) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> success === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.once(<span class=\"string\">'success'</span>, success)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> error === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.once(<span class=\"string\">'error'</span>, error)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> progress === <span class=\"string\">'progress'</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// Note, this function will be recall, so here defined the event use 'on'</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.on(<span class=\"string\">'progress'</span>, progress)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Here you can see we defined three events after you pass these callback function into it through call ‘then’ function.<br>So we defined the events, and we have to emit it, so that we can execute these callbacks with the result.</p>\n<p>Below, we defined the Deferred object.</p>\n<h2 id=\"Deferred-Object\"><a href=\"#Deferred-Object\" class=\"headerlink\" title=\"Deferred Object\"></a>Deferred Object</h2><p>Here we defined the Deferred, these functions just emit promise, so tell them we finished.<br><code>Deferred.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Deferred</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.state = <span class=\"string\">'unsuccess'</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>()</div><div class=\"line\"></div><div class=\"line\">  resolve(obj) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'success'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.promise.emit(<span class=\"string\">'success'</span>, obj)</div><div class=\"line\">  &#125;</div><div class=\"line\">  reject(obj) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'error'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.promise.emit(<span class=\"string\">'error'</span>, obj)</div><div class=\"line\">  &#125;</div><div class=\"line\">  progress(obj) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'progress'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.promise.emit(<span class=\"string\">'progress'</span>, obj)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"use-Promise-amp-Deferred\"><a href=\"#use-Promise-amp-Deferred\" class=\"headerlink\" title=\"use Promise &amp; Deferred\"></a>use Promise &amp; Deferred</h2><p>To realize this, we create a new Deferred, and we trigger deferred function (progress/end/error) when we finish specific action to tell Deferred that we finished.<br>Then we get promise object, and then we can store it, and call it with callback in another file.<br>So we successful separate call async and get data in two files.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> promisify = <span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> deferred = <span class=\"keyword\">new</span> Deferred()</div><div class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"string\">''</span></div><div class=\"line\"></div><div class=\"line\">  res.on(<span class=\"string\">'data'</span>, chunk =&gt; &#123;</div><div class=\"line\">    result += chunk</div><div class=\"line\">    deferred.progress(result)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  res.on(<span class=\"string\">'end'</span>, () =&gt; &#123;</div><div class=\"line\">    deferred.resolve(result)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  res.on(<span class=\"string\">'error'</span>, () =&gt; &#123;</div><div class=\"line\">    deferred.reject()</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> deferred.promise</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">global.result = promisify(res)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// in another file, this just an example to pass the result to global, so we can easy get the result, in the production, you better to pass the result in other way.</span></div><div class=\"line\">global.result.then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// success</span></div><div class=\"line\">&#125;, (err) =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// error</span></div><div class=\"line\">&#125;, (chunk) =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// progress</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(chunk)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h2 id=\"Deferred-all\"><a href=\"#Deferred-all\" class=\"headerlink\" title=\"Deferred.all()\"></a>Deferred.all()</h2><p>Do some action after a several of asynchronous finished.<br><code>Deferred.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Deferred</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">  all(promises) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> count = promises.length</div><div class=\"line\">    <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">let</span> results = []</div><div class=\"line\">    promises.forEach(<span class=\"function\">(<span class=\"params\">promise, i</span>) =&gt;</span> &#123;</div><div class=\"line\">      promise.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">        count --</div><div class=\"line\">        results[i] = data</div><div class=\"line\">        <span class=\"keyword\">if</span> (count === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          that.resolve(results)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;, err =&gt; &#123;</div><div class=\"line\">      that.reject(err)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.promise</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Order-Run-asynchronous\"><a href=\"#Order-Run-asynchronous\" class=\"headerlink\" title=\"Order Run asynchronous\"></a>Order Run asynchronous</h2><p>Run asynchronous in order<br><code>Deferred.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'./promise.class'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Deferred</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>()</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  resolve(data) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> promise = <span class=\"keyword\">this</span>.promise</div><div class=\"line\">    <span class=\"keyword\">let</span> handler</div><div class=\"line\">    <span class=\"keyword\">while</span>(handler = promise.queue.shift()) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (handler &amp;&amp; handler.resolve) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> ret = handler.resolve(data)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// if there has next promise, then we interrupt current loop, and set next promise.queue equals current queue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (ret &amp;&amp; ret.isPromise) &#123;</div><div class=\"line\">          ret.queue = promise.queue</div><div class=\"line\">          <span class=\"keyword\">return</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  reject(err) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> promise = <span class=\"keyword\">this</span>.promise</div><div class=\"line\">    <span class=\"keyword\">let</span> handler</div><div class=\"line\">    <span class=\"keyword\">while</span>(handler = promise.queue.shift()) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (handler &amp;&amp; handler.reject) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> ret = handler.reject(err)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// if there has next promise, then we interrupt current loop, and set next promise.queue equals current queue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (ret &amp;&amp; ret.isPromise) &#123;</div><div class=\"line\">          ret.queue = promise.queue</div><div class=\"line\">          <span class=\"keyword\">return</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  callback(str) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">err, file</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> that.reject(err)</div><div class=\"line\">      &#125;</div><div class=\"line\">      that.resolve(file)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>promise.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.queue = []</div><div class=\"line\">    <span class=\"keyword\">this</span>.isPromise = <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  then(resolve, reject) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> handler = &#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> resolve === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      handler.resolve = resolve</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reject === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      handler.reject = reject</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.queue.push(handler)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>app.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Deferred = <span class=\"built_in\">require</span>(<span class=\"string\">'./deferred.class'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> action1 = <span class=\"function\">(<span class=\"params\">file, encoding</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> deferred = <span class=\"keyword\">new</span> Deferred()</div><div class=\"line\">  fs.readFile(file, encoding, deferred.callback())</div><div class=\"line\">  <span class=\"keyword\">return</span> deferred.promise</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> action2 = <span class=\"function\">(<span class=\"params\">file, encoding</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> deferred = <span class=\"keyword\">new</span> Deferred()</div><div class=\"line\">  fs.readFile(file, encoding, deferred.callback())</div><div class=\"line\">  <span class=\"keyword\">return</span> deferred.promise</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">action1(<span class=\"string\">'./file1.txt'</span>, <span class=\"string\">'utf8'</span>).then(<span class=\"function\"><span class=\"params\">file1</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> action2(file1.trim(), <span class=\"string\">'utf8'</span>)</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">file2</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(file2)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Super-simple-realize-separate-call-an-async-and-handle-result-in-two-files\"><a href=\"#Super-simple-realize-separate-call-an-async-and-handle-result-in-two-files\" class=\"headerlink\" title=\"Super simple realize separate call an async and handle result in two files.\"></a>Super simple realize separate call an async and handle result in two files.</h1><p>Assume we have a project base on jQuery, we have to separate call AJAX and handle result in another file.</p>\n<p>Most of the time, we handle the result with below.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.get(<span class=\"string\">'url'</span>, data =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">//handle data</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>But, sometimes, we don’t want to handle it in the moment. Maybe we just want to handle in another file. So we can do below.<br><code>request.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.get(<span class=\"string\">'url'</span>, data =&gt; &#123;</div><div class=\"line\">  <span class=\"built_in\">window</span>.result(data)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><code>handle.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.result = <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// handle result</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>But, we most of the time, we are not just handle the success result. We also handle error, receiving data.<br>For example.</p>\n<p><code>request.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">'url'</span>,</div><div class=\"line\">  <span class=\"attr\">data</span>: <span class=\"string\">'data'</span>,</div><div class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">'get'</span>,</div><div class=\"line\">  <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.deferrd.resolve(data)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.defered.error(err)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">complete</span>: <span class=\"function\"><span class=\"params\">notify</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">window</span>.deferred.notify(<span class=\"string\">'complete'</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p><code>handle.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.deferred = &#123;</div><div class=\"line\">  <span class=\"comment\">//handle success</span></div><div class=\"line\">  resolve: <span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//handle error</span></div><div class=\"line\">  error: <span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(err)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"comment\">//handle complete</span></div><div class=\"line\">  notify: <span class=\"function\"><span class=\"params\">msg</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(msg)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"use-jQuery-promise-deferred\"><a href=\"#use-jQuery-promise-deferred\" class=\"headerlink\" title=\"use jQuery promise/deferred\"></a>use jQuery promise/deferred</h1><p>Fortunately, jQuery already realize this, so we just have to do below.<br><code>request.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.promise = $.get(<span class=\"string\">'url'</span>)</div></pre></td></tr></table></figure></p>\n<p><code>handle.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.promise.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// handle success</span></div><div class=\"line\">&#125;, err =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// handle error</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h1 id=\"Promise-A\"><a href=\"#Promise-A\" class=\"headerlink\" title=\"Promise/A\"></a>Promise/A</h1><p>For show how promise and deferred work, we create a new and simple promise and deferred object, so that you can easy understand it.</p>\n<h2 id=\"Promise-Object\"><a href=\"#Promise-Object\" class=\"headerlink\" title=\"Promise Object\"></a>Promise Object</h2><p>Here try to extend EventEmitter module to explain how it work.<br><code>Promise.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> <span class=\"keyword\">extends</span> <span class=\"title\">EventEmitter</span> </span>&#123;</div><div class=\"line\">  then(success, error, progress) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> success === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.once(<span class=\"string\">'success'</span>, success)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> error === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.once(<span class=\"string\">'error'</span>, error)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> progress === <span class=\"string\">'progress'</span>) &#123;</div><div class=\"line\">      <span class=\"comment\">// Note, this function will be recall, so here defined the event use 'on'</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.on(<span class=\"string\">'progress'</span>, progress)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Here you can see we defined three events after you pass these callback function into it through call ‘then’ function.<br>So we defined the events, and we have to emit it, so that we can execute these callbacks with the result.</p>\n<p>Below, we defined the Deferred object.</p>\n<h2 id=\"Deferred-Object\"><a href=\"#Deferred-Object\" class=\"headerlink\" title=\"Deferred Object\"></a>Deferred Object</h2><p>Here we defined the Deferred, these functions just emit promise, so tell them we finished.<br><code>Deferred.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Deferred</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">this</span>.state = <span class=\"string\">'unsuccess'</span></div><div class=\"line\">  <span class=\"keyword\">this</span>.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>()</div><div class=\"line\"></div><div class=\"line\">  resolve(obj) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'success'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.promise.emit(<span class=\"string\">'success'</span>, obj)</div><div class=\"line\">  &#125;</div><div class=\"line\">  reject(obj) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'error'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.promise.emit(<span class=\"string\">'error'</span>, obj)</div><div class=\"line\">  &#125;</div><div class=\"line\">  progress(obj) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = <span class=\"string\">'progress'</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.promise.emit(<span class=\"string\">'progress'</span>, obj)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"use-Promise-amp-Deferred\"><a href=\"#use-Promise-amp-Deferred\" class=\"headerlink\" title=\"use Promise &amp; Deferred\"></a>use Promise &amp; Deferred</h2><p>To realize this, we create a new Deferred, and we trigger deferred function (progress/end/error) when we finish specific action to tell Deferred that we finished.<br>Then we get promise object, and then we can store it, and call it with callback in another file.<br>So we successful separate call async and get data in two files.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> promisify = <span class=\"function\"><span class=\"params\">res</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> deferred = <span class=\"keyword\">new</span> Deferred()</div><div class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"string\">''</span></div><div class=\"line\"></div><div class=\"line\">  res.on(<span class=\"string\">'data'</span>, chunk =&gt; &#123;</div><div class=\"line\">    result += chunk</div><div class=\"line\">    deferred.progress(result)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  res.on(<span class=\"string\">'end'</span>, () =&gt; &#123;</div><div class=\"line\">    deferred.resolve(result)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  res.on(<span class=\"string\">'error'</span>, () =&gt; &#123;</div><div class=\"line\">    deferred.reject()</div><div class=\"line\">  &#125;)</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> deferred.promise</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">global.result = promisify(res)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// in another file, this just an example to pass the result to global, so we can easy get the result, in the production, you better to pass the result in other way.</span></div><div class=\"line\">global.result.then(<span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// success</span></div><div class=\"line\">&#125;, (err) =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// error</span></div><div class=\"line\">&#125;, (chunk) =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// progress</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(chunk)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<h2 id=\"Deferred-all\"><a href=\"#Deferred-all\" class=\"headerlink\" title=\"Deferred.all()\"></a>Deferred.all()</h2><p>Do some action after a several of asynchronous finished.<br><code>Deferred.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Deferred</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\">  all(promises) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> count = promises.length</div><div class=\"line\">    <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">let</span> results = []</div><div class=\"line\">    promises.forEach(<span class=\"function\">(<span class=\"params\">promise, i</span>) =&gt;</span> &#123;</div><div class=\"line\">      promise.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</div><div class=\"line\">        count --</div><div class=\"line\">        results[i] = data</div><div class=\"line\">        <span class=\"keyword\">if</span> (count === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">          that.resolve(results)</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;, err =&gt; &#123;</div><div class=\"line\">      that.reject(err)</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.promise</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Order-Run-asynchronous\"><a href=\"#Order-Run-asynchronous\" class=\"headerlink\" title=\"Order Run asynchronous\"></a>Order Run asynchronous</h2><p>Run asynchronous in order<br><code>Deferred.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">Promise</span> = <span class=\"built_in\">require</span>(<span class=\"string\">'./promise.class'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Deferred</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>()</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  resolve(data) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> promise = <span class=\"keyword\">this</span>.promise</div><div class=\"line\">    <span class=\"keyword\">let</span> handler</div><div class=\"line\">    <span class=\"keyword\">while</span>(handler = promise.queue.shift()) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (handler &amp;&amp; handler.resolve) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> ret = handler.resolve(data)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// if there has next promise, then we interrupt current loop, and set next promise.queue equals current queue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (ret &amp;&amp; ret.isPromise) &#123;</div><div class=\"line\">          ret.queue = promise.queue</div><div class=\"line\">          <span class=\"keyword\">return</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  reject(err) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> promise = <span class=\"keyword\">this</span>.promise</div><div class=\"line\">    <span class=\"keyword\">let</span> handler</div><div class=\"line\">    <span class=\"keyword\">while</span>(handler = promise.queue.shift()) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (handler &amp;&amp; handler.reject) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> ret = handler.reject(err)</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// if there has next promise, then we interrupt current loop, and set next promise.queue equals current queue</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (ret &amp;&amp; ret.isPromise) &#123;</div><div class=\"line\">          ret.queue = promise.queue</div><div class=\"line\">          <span class=\"keyword\">return</span></div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  callback(str) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> that = <span class=\"keyword\">this</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">err, file</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> that.reject(err)</div><div class=\"line\">      &#125;</div><div class=\"line\">      that.resolve(file)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>promise.class.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Promise</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.queue = []</div><div class=\"line\">    <span class=\"keyword\">this</span>.isPromise = <span class=\"literal\">true</span></div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  then(resolve, reject) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> handler = &#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> resolve === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      handler.resolve = resolve</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> reject === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">      handler.reject = reject</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">this</span>.queue.push(handler)</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>app.js</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> Deferred = <span class=\"built_in\">require</span>(<span class=\"string\">'./deferred.class'</span>)</div><div class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> action1 = <span class=\"function\">(<span class=\"params\">file, encoding</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> deferred = <span class=\"keyword\">new</span> Deferred()</div><div class=\"line\">  fs.readFile(file, encoding, deferred.callback())</div><div class=\"line\">  <span class=\"keyword\">return</span> deferred.promise</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> action2 = <span class=\"function\">(<span class=\"params\">file, encoding</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> deferred = <span class=\"keyword\">new</span> Deferred()</div><div class=\"line\">  fs.readFile(file, encoding, deferred.callback())</div><div class=\"line\">  <span class=\"keyword\">return</span> deferred.promise</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">action1(<span class=\"string\">'./file1.txt'</span>, <span class=\"string\">'utf8'</span>).then(<span class=\"function\"><span class=\"params\">file1</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> action2(file1.trim(), <span class=\"string\">'utf8'</span>)</div><div class=\"line\">&#125;).then(<span class=\"function\"><span class=\"params\">file2</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(file2)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n"},{"title":"config ThinkPHP support memcache in php5","date":"2017-01-03T09:23:37.000Z","_content":"\nThis guide is base on Ubuntu & PHP5, so you have to install PHP5 in Ubunut first, but debian is okay.\n\n## Install Memcached\n``` shell\n$ sudo apt-get install memcached\n$ service memcached start\n```\n\nthen execute `ps aux | grep memcached` to check it is running.\n``` shell\n$ ps aux | grep memcached\n```\n\n## Install Memcache extension for PHP\nLet's go to https://pecl.php.net/package-stats.php.\n1. download memcache package from https://pecl.php.net/package-stats.php to your home directory.\n2. extract it.\n3. run phpize to gererate configure, make file.\n4. configure\n5. make\n6. make install\n\n``` shell\n$ wget https://pecl.php.net/get/memcache-2.2.7.tgz\n$ tar zxf memcache-2.2.7.tgz\n$ phpize\n$ ./configure\n$ sudo make\n$ sudo make install\n```\n\n## set php.ini\nappend extension=/path/to/memcache.so\n`php.ini`\n``` config\nextension=/path/to/memcache.so\n```\n\n## config ThinkPHP\nGo into Core/conf/conf.php\n\n``` php\n'DATA_CACHE_TYPE' => 'Memcache',\n'MEMCACHE_HOST' => 'localhost',\n'MEMCACHE_PORT' => '11211'\n```\n\n## restart php-fpm\n``` shell\n$ ps aux | grep memcached\n$ kill pid\n```\n","source":"_posts/config-ThinkPHP-support-memcache-in-php5.md","raw":"---\ntitle: config ThinkPHP support memcache in php5\ndate: 2017-01-03 17:23:37\ntags:\n---\n\nThis guide is base on Ubuntu & PHP5, so you have to install PHP5 in Ubunut first, but debian is okay.\n\n## Install Memcached\n``` shell\n$ sudo apt-get install memcached\n$ service memcached start\n```\n\nthen execute `ps aux | grep memcached` to check it is running.\n``` shell\n$ ps aux | grep memcached\n```\n\n## Install Memcache extension for PHP\nLet's go to https://pecl.php.net/package-stats.php.\n1. download memcache package from https://pecl.php.net/package-stats.php to your home directory.\n2. extract it.\n3. run phpize to gererate configure, make file.\n4. configure\n5. make\n6. make install\n\n``` shell\n$ wget https://pecl.php.net/get/memcache-2.2.7.tgz\n$ tar zxf memcache-2.2.7.tgz\n$ phpize\n$ ./configure\n$ sudo make\n$ sudo make install\n```\n\n## set php.ini\nappend extension=/path/to/memcache.so\n`php.ini`\n``` config\nextension=/path/to/memcache.so\n```\n\n## config ThinkPHP\nGo into Core/conf/conf.php\n\n``` php\n'DATA_CACHE_TYPE' => 'Memcache',\n'MEMCACHE_HOST' => 'localhost',\n'MEMCACHE_PORT' => '11211'\n```\n\n## restart php-fpm\n``` shell\n$ ps aux | grep memcached\n$ kill pid\n```\n","slug":"config-ThinkPHP-support-memcache-in-php5","published":1,"updated":"2017-05-23T03:08:22.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj32sqk1900031klest62sqwz","content":"<p>This guide is base on Ubuntu &amp; PHP5, so you have to install PHP5 in Ubunut first, but debian is okay.</p>\n<h2 id=\"Install-Memcached\"><a href=\"#Install-Memcached\" class=\"headerlink\" title=\"Install Memcached\"></a>Install Memcached</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> sudo apt-get install memcached</div><div class=\"line\"><span class=\"meta\">$</span> service memcached start</div></pre></td></tr></table></figure>\n<p>then execute <code>ps aux | grep memcached</code> to check it is running.<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> ps aux | grep memcached</div></pre></td></tr></table></figure></p>\n<h2 id=\"Install-Memcache-extension-for-PHP\"><a href=\"#Install-Memcache-extension-for-PHP\" class=\"headerlink\" title=\"Install Memcache extension for PHP\"></a>Install Memcache extension for PHP</h2><p>Let’s go to <a href=\"https://pecl.php.net/package-stats.php\" target=\"_blank\" rel=\"external\">https://pecl.php.net/package-stats.php</a>.</p>\n<ol>\n<li>download memcache package from <a href=\"https://pecl.php.net/package-stats.php\" target=\"_blank\" rel=\"external\">https://pecl.php.net/package-stats.php</a> to your home directory.</li>\n<li>extract it.</li>\n<li>run phpize to gererate configure, make file.</li>\n<li>configure</li>\n<li>make</li>\n<li>make install</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> wget https://pecl.php.net/get/memcache-2.2.7.tgz</div><div class=\"line\"><span class=\"meta\">$</span> tar zxf memcache-2.2.7.tgz</div><div class=\"line\"><span class=\"meta\">$</span> phpize</div><div class=\"line\"><span class=\"meta\">$</span> ./configure</div><div class=\"line\"><span class=\"meta\">$</span> sudo make</div><div class=\"line\"><span class=\"meta\">$</span> sudo make install</div></pre></td></tr></table></figure>\n<h2 id=\"set-php-ini\"><a href=\"#set-php-ini\" class=\"headerlink\" title=\"set php.ini\"></a>set php.ini</h2><p>append extension=/path/to/memcache.so<br><code>php.ini</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">extension=/path/to/memcache.so</div></pre></td></tr></table></figure></p>\n<h2 id=\"config-ThinkPHP\"><a href=\"#config-ThinkPHP\" class=\"headerlink\" title=\"config ThinkPHP\"></a>config ThinkPHP</h2><p>Go into Core/conf/conf.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'DATA_CACHE_TYPE'</span> =&gt; <span class=\"string\">'Memcache'</span>,</div><div class=\"line\"><span class=\"string\">'MEMCACHE_HOST'</span> =&gt; <span class=\"string\">'localhost'</span>,</div><div class=\"line\"><span class=\"string\">'MEMCACHE_PORT'</span> =&gt; <span class=\"string\">'11211'</span></div></pre></td></tr></table></figure>\n<h2 id=\"restart-php-fpm\"><a href=\"#restart-php-fpm\" class=\"headerlink\" title=\"restart php-fpm\"></a>restart php-fpm</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> ps aux | grep memcached</div><div class=\"line\"><span class=\"meta\">$</span> kill pid</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>This guide is base on Ubuntu &amp; PHP5, so you have to install PHP5 in Ubunut first, but debian is okay.</p>\n<h2 id=\"Install-Memcached\"><a href=\"#Install-Memcached\" class=\"headerlink\" title=\"Install Memcached\"></a>Install Memcached</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> sudo apt-get install memcached</div><div class=\"line\"><span class=\"meta\">$</span> service memcached start</div></pre></td></tr></table></figure>\n<p>then execute <code>ps aux | grep memcached</code> to check it is running.<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> ps aux | grep memcached</div></pre></td></tr></table></figure></p>\n<h2 id=\"Install-Memcache-extension-for-PHP\"><a href=\"#Install-Memcache-extension-for-PHP\" class=\"headerlink\" title=\"Install Memcache extension for PHP\"></a>Install Memcache extension for PHP</h2><p>Let’s go to <a href=\"https://pecl.php.net/package-stats.php\" target=\"_blank\" rel=\"external\">https://pecl.php.net/package-stats.php</a>.</p>\n<ol>\n<li>download memcache package from <a href=\"https://pecl.php.net/package-stats.php\" target=\"_blank\" rel=\"external\">https://pecl.php.net/package-stats.php</a> to your home directory.</li>\n<li>extract it.</li>\n<li>run phpize to gererate configure, make file.</li>\n<li>configure</li>\n<li>make</li>\n<li>make install</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> wget https://pecl.php.net/get/memcache-2.2.7.tgz</div><div class=\"line\"><span class=\"meta\">$</span> tar zxf memcache-2.2.7.tgz</div><div class=\"line\"><span class=\"meta\">$</span> phpize</div><div class=\"line\"><span class=\"meta\">$</span> ./configure</div><div class=\"line\"><span class=\"meta\">$</span> sudo make</div><div class=\"line\"><span class=\"meta\">$</span> sudo make install</div></pre></td></tr></table></figure>\n<h2 id=\"set-php-ini\"><a href=\"#set-php-ini\" class=\"headerlink\" title=\"set php.ini\"></a>set php.ini</h2><p>append extension=/path/to/memcache.so<br><code>php.ini</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">extension=/path/to/memcache.so</div></pre></td></tr></table></figure></p>\n<h2 id=\"config-ThinkPHP\"><a href=\"#config-ThinkPHP\" class=\"headerlink\" title=\"config ThinkPHP\"></a>config ThinkPHP</h2><p>Go into Core/conf/conf.php</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'DATA_CACHE_TYPE'</span> =&gt; <span class=\"string\">'Memcache'</span>,</div><div class=\"line\"><span class=\"string\">'MEMCACHE_HOST'</span> =&gt; <span class=\"string\">'localhost'</span>,</div><div class=\"line\"><span class=\"string\">'MEMCACHE_PORT'</span> =&gt; <span class=\"string\">'11211'</span></div></pre></td></tr></table></figure>\n<h2 id=\"restart-php-fpm\"><a href=\"#restart-php-fpm\" class=\"headerlink\" title=\"restart php-fpm\"></a>restart php-fpm</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">$</span> ps aux | grep memcached</div><div class=\"line\"><span class=\"meta\">$</span> kill pid</div></pre></td></tr></table></figure>\n"},{"title":"Config web server with Nginx in Linux for beginner","_content":"\nWe use **Debian** to finish the demo.\nBoth of below are basic command line, If you are not familiar with command line in Linux, you should learn it first.\n\n## Update & Upgrade\n``` bash\n$ apt-get update\n$ apt-get upgrade\n```\nYou must curious what's difference between [update][apt-get] and [upgrade][apt-get].\n> **update**\nUsed to re-synchronize the package index files from their sources. The indexes of available packages are fetched from the location(s) specified in /etc/apt/sources.list(5). An update should always be performed before an upgrade or dist-upgrade.\n**upgrade**\nUsed to install the newest versions of all packages currently installed on the system from the sources enumerated in /etc/apt/sources.list(5). Packages currently installed with new versions available are retrieved and upgraded; under no circumstances are currently installed packages removed, nor are packages that are not already installed retrieved and installed. New versions of currently installed packages that cannot be upgraded without changing the install status of another package will be left at their current version. An update must be performed first so that apt-get knows that new versions of packages are available.\n\n[apt-get]: https://linux.die.net/man/8/apt-get\n\n## Htop, Vim & Screen\n``` bash\n$ apt-get install htop\n$ apt-get install vim\n$ apt-get install screen\n```\nThese packages can improve your effective.\n***htop:*** [htop][htop] command like [top][top] command, both of these are interactive process viewer for Unix systems. Its help you manage process and monitor resource easy. But [htop][htop] is more convenient than [top][top].\n> - In 'htop' you can scroll the list vertically and horizontally to see all processes and complete command lines.\n- In 'top' you are subject to a delay for each unassigned key you press (especially annoying when multi-key escape sequences are triggered by accident).\n- 'htop' starts faster ('top' seems to collect data for a while before displaying anything).\n- In 'htop' you don't need to type the process number to kill a process, in 'top' you do.\n- In 'htop' you don't need to type the process number or the priority value to renice a process, in 'top' you do.\n- 'htop' supports mouse operation, 'top' doesn't\n- 'top' is older, hence, more used and tested.\nFrom http://hisham.hm/htop/index.php?page=comparison\n\n***vim:*** [vim][vim] is almost a proper superset of [vi][vi], everything that is in vi is available in vim.\n\n***screen:***\n> 1. use multiple shell window from a single SSH session\n2. Keep a shell active even through network disruptions\n3. Disconnect and re-connect to a shell sessions from multiple locations\n4. Run a long running process without maintaining an active shell session\n\n**Usage**\nscreen uses the command `ctrl-a` that's the control key and a lowercase \"a\" as a signal to send commands to screen instead of the shell.\n*start*: `screen`\n*creating*: `Ctrl-a c`\n*switch*: `Ctrl-a n` for the next window or `Ctrl-a p` for the previous window.\n*detach*: `Ctrl-a d`\n*reattach*: `Ctrl-a r`\n*logging*: `Ctrl-a h`\n*lock*: `Ctrl-a x`\n*stop*: `Ctrl-a k`\n\n## Group & User\n``` bash\n$ groupadd\n$ groupdel\n$ useradd\n$ passwd\n$ usermod\n$ userdel\n```\n\n### useradd\nuser add will auto create group that the name same as user\n``` bash\n$ useradd chang # craete user \"chang\"\n$ useradd -d /data/projects chang # create user \"chang\" into /data/projects\n$ useradd -u 999 -g 998 chang # create user with 999 for user id and 998 for group id\n$ useradd -G admings,webadmin,developers chang #\n$ useradd -M chang # add user \"chang\" without home directory\n$ useradd -e 2017-01-01 chang # add user \"chang\" expire at 2017-01-02\n$ chage -l chang # show/change user or password expire date\n$ useradd -e 2017-01-01 -f 45 chang # password expire after 2017-01-01\n$ useradd -c \"Yuchang Wu\" chang # add user with \"Yuchang Wu\" infomation\n$ tail -1 /etc/passwd # print last 1 line of the file \"/etc/passwd\"\n```\n\n### the meaning of files that user and group saved\n- /etc/passwd – User account information.\n- /etc/shadow – Secure account information.\n- /etc/group – Group account information.\n- /etc/gshadow – Secure group account information.\n- /etc/login.defs – Shadow password suite configuration..\n\n/etc/passwd format:\nusername:password:uid:gid:userInfo:homeDirectory:shell\n\n/etc/group format:\ngroupname:password:gidd:groupMembers\n\n### usermod\nfor more detail, to below to see\n```bash\n$ usermod --help\n```\n``` bash\n$ usermod -G www chang # add www group to chang, Be careful, it will remove all existing groups that user belongs, so always add the '-a' with '-G' to append new groups\n$ usermod -G www -a chang\n```\n\n### chown\nchange file owner\n``` bash\n$ chown -hR www:www /home/www # chang the owner of /homw/www to www user and www group\n```\n\n## Nginx Install\nAs you know, you can install an application with few different methods, below we introduce three common methods to install Nginx.\n### Install from Debian repository\n``` bash\n$ apt-get install nginx\n```\nyou can verify the installation through:\n``` bash\n$ nginx -v\n```\nand you can verify which module you are install through:\n``` bash\n$ nginx -V  # Capital\n```\nand you will get the default configuration like:\n``` bash\nnginx version: nginx/1.6.2\nTLS SNI support enabled\nconfigure arguments: --with-cc-opt='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2' --with-ld-opt=-Wl,-z,relro --prefix=/usr/share/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/log/nginx/access.log --error-log-path=/var/log/nginx/error.log --lock-path=/var/lock/nginx.lock --pid-path=/run/nginx.pid --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-debug --with-pcre-jit --with-ipv6 --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --with-http_addition_module --with-http_dav_module --with-http_geoip_module --with-http_gzip_static_module --with-http_image_filter_module --with-http_spdy_module --with-http_sub_module --with-http_xslt_module --with-mail --with-mail_ssl_module --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-auth-pam --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-dav-ext-module --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-echo --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-upstream-fair --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/ngx_http_substitutions_filter_module\n```\n\n> Note: this type can not get the latest version of the NGINX.\n\n### Install from Nginx repository\n1. Download the key used to sign NGINX packages and repository to the apt program keyring and add it:\n``` bash\n$ wget http://nginx.org/keys/nginx_signing.key\n$ apt-key add nginx_signing.key\n```\n2. Add the \"sources\" from which NGINX Open Source packages can be obtained: open the */etc/apt/sources.list* file in any text editor, for example, vim:\n``` bash\n$ vim /etc/apt/sources.list\n```\n3. Append the lines to the file:\n``` bash\ndeb http://nginx.org/packages/mainline/debian/ codename nginx\ndeb-src http://nginx.org/packages/mainline/debian/ codename nginx\n```\n where:\n codename is a codename of a Debian release:\n<table> <thead> <tr> <th>Version</th> <th>Codename</th> <th>Supported Platforms</th> </tr> </thead> <tbody> <tr> <td>7.x</td> <td>wheezy</td> <td>x86_64,i386</td> </tr> <tr> <td>8.x</td> <td>jessie</td> <td>x86_64,i386</td> </tr> </tbody> </table>\n4. Install\n``` bash\n$ apt-get remove nginx-common\n$ apt-get update\n$ apt-get install nginx\n```\n5. list the default module that nginx installed\n``` bash\n$ nginx -V\n```\n ``` bash\nnginx version: nginx/1.11.6\nbuilt by gcc 4.9.2 (Debian 4.9.2-10)\nbuilt with OpenSSL 1.0.1t  3 May 2016\nTLS SNI support enabled\nconfigure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2' --with-ld-opt='-Wl,-z,relro -Wl,-z,now -Wl,--as-needed'\n\n```\nYou can see the latest version of the NGINX installed to your system.\n\n### Install from open sources\nAs you see, these above two types to install NGINX is non-configurable, these are pre-build, so they already configure with default value. you can't add or remove module and configure it. So if you want to add module or 3rd party module and apply latest security patches, I suggest you use this type to install NGINX.\n1. the PCRE lirary - required by NGINX core and Rewrite modules and provides support for regular expressions.\n``` bash\n$ wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.39.tar.gz\n$ tar -zxf pcre-8.39.tar.gz\n$ cd pcre-8.39\n$ ./configure\n$ make\n$ sudo make install\n```\n2. the zlib library - required by NGINX Gzip module for headers compression.\n``` bash\n$ wget http://zlib.net/zlib-1.2.8.tar.gz\n$ tar -zxf zlib-1.2.8.tar.gz\n$ cd zlib-1.2.8\n$ ./configure\n$ make\n$ sudo make install\n```\n3. the OpenSSL library - required by NGINX SSL modules to support the HTTPS protocol.\n``` bash\n$ wget http://www.openssl.org/source/openssl-1.0.2f.tar.gz\n$ tar -zxf openssl-1.0.2f.tar.gz\n$ cd openssl-1.0.2f\n$ ./configure darwin64-x86_64-cc --prefix=/usr\n$ make\n$ sudo make install\n```\n4. The header more nginx library - required by NGINX header more nginx module to change the response header information.\n``` bash\n$ wget https://codeload.github.com/openresty/headers-more-nginx-module/tar.gz/v0.32\n$ tar -zxf v0.32\n```\n5. download the NGINX sources\n``` bash\n$ wget http://nginx.org/download/nginx-1.10.2.tar.gz\n$ tar zxf nginx-1.10.2.tar.gz\n$ cd nginx-1.10.2\n```\n6. configure NGINX\nAdd above that you download module to NGINX, so you can use the module in NGINX.\n``` bash\n$ ./configure --prefix=/usr/local/nginx --sbin-path=/usr/local/nginx/nginx --conf-path=/usr/local/nginx/nginx.conf --pid-path=/usr/local/nginx/nginx.pid --with-pcre=../pcre-8.39 --with-zlib=../zlib-1.2.8 --with-http_ssl_module --add-module=../headers-more-nginx-module-0.32 --with-debug\n```\n7. link NGINX\nNow, you can run nginx with full path -- */usr/local/nginx/nginx*, and you can browse it with localhost in any browser. But seems not convenient to run nginx with full path every time, so we link the nginx from local to sbin that you can run it without fullpath, just run *nginx*.\n``` bash\n$ ln -s /usr/local/nginx/nginx /usr/sbin/nginx\n```\nNow you can run nginx with *nginx* command without fullpath.\n``` bash\n$ nginx -V\n```\n\n## Configure web\nNow, you can access webpage in browser with default page in NGINX via localhost. So, the nginx.conf path is put in where we set during we configure NGINX -- */usr/local/nginx/nginx.conf*.\nLet's look at the file via vim.\n``` bash\n$ cd /usr/local/nginx\n$ vim nginx.conf\n```\ngo to 35 line through `35 G`\n{% asset_img default_server.png NGINX default server %}\n\nWe drop the unnecessary code, and simplify the code and explain the meaning of the code to below:\n``` NGINX\nserver {\n    listen       80;                  # listening the port, so you access the server with 80 port, this is the default port, so you can access the web server without append :80\n    server_name  localhost;           # domain\n\n    location / {                      # route, NGINX will receive the URL path, and adapt it with the route, if the path is same with route, then go into the brace block\n        root   html;                  # basic directory where web server in, in this demo, it is in ./html\n        index  index.html index.htm;  # access it without append the file name if it is index.html or index.htm\n    }\n}\n```\n\nNow, we can configure a server by self, we make the root of the web server in */home/www*, and write index.html, then open the nginx.conf to configure the new web server \"Hello world\"\n``` bash\n$ mkdir /home/www\n$ echo \"Hello world\" > index.html\n$ cd /usr/local/nginx\n$ vim nginx.conf\n```\nWe append *include conf.d/&#42;.conf* into nginx.conf at last second line. so we can add the server configure without pollute the origin configure. It will auto add all of the file that have .conf extension into *nginx.conf*.\n``` nginx\nserver {\n  listen 8080;\n  server_name localhost;\n  location / {\n    root /home/www;\n    index index.html index.htm;\n  }\n}\n```\nThen we reload the nginx server with:\n``` bash\n$ nginx -s reload\n```\nNow, you can access www. *http://localhost:8080/*\n\n## change response header\nWe already install the headers-more-nginx-module, so we can configure the response header. Before we configure it, let's open the developers-tool in google-chrome, and look at the network request, we can get the response headers:\n{% asset_img response_header.png response headers %}\nFor some security reason, we don't want to show Server information to client, so we can add the configuration to *hello_world.conf*.\n``` nginx\nmore_set_headers \"Server\" \"\"; # add this\nserver {\n  listen 8080;\n  server_name localhost;\n  location / {\n    root /home/www;\n    index index.html index.htm;\n  }\n}\n```\nThen reload the nginx server:\n``` bash\n$ nginx -s reload\n```\nThen we reload the page in browser, and open the network, the Server information already drop.\n{% asset_img response_header_safe.png response headers without server information %}\n\nNow, your nginx server is more safer than before you add the server information into response headers.\n\nFor more detail about the headers-more-nginx-module, see: https://github.com/openresty/headers-more-nginx-module\n\n## add module\nIf you want to add some module into NGINX that was installed, you have to download the module, then reconfigure NGINX with the module and compile it.\n## Tip\n``` bash\n$ man order # to see detail of the order\n$ apt-cache search package # search package\n$ cat /etc/passwd # show all users\n$ getent passwd # show all users\n$ getent group # show all groups\n$ getent group | grep username\n$ id username # show username information\n$ groups username # show which groups does username have\n$ dpkg-reconfigure tzdate # change timezone\n```\n\n> Ref:\n*screen* https://www.rackaid.com/blog/linux-screen-tutorial-and-how-to/#starting\n*useradd* http://www.tecmint.com/add-users-in-linux/\n*usermod* http://www.tecmint.com/usermod-command-examples/\n*permission* http://www.tecmint.com/manage-users-and-groups-in-linux/\n*nginx* https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/\n*headers-more-nginx-module* https://github.com/openresty/headers-more-nginx-module\n[htop]: https://hisham.hm/htop/index.php\n[top]: https://linux.die.net/man/1/top\n[vim]: http://www.vim.org/\n[vi]: http://ex-vi.sourceforge.net/\n","source":"_posts/web-server.md","raw":"---\ntitle: Config web server with Nginx in Linux for beginner\n---\n\nWe use **Debian** to finish the demo.\nBoth of below are basic command line, If you are not familiar with command line in Linux, you should learn it first.\n\n## Update & Upgrade\n``` bash\n$ apt-get update\n$ apt-get upgrade\n```\nYou must curious what's difference between [update][apt-get] and [upgrade][apt-get].\n> **update**\nUsed to re-synchronize the package index files from their sources. The indexes of available packages are fetched from the location(s) specified in /etc/apt/sources.list(5). An update should always be performed before an upgrade or dist-upgrade.\n**upgrade**\nUsed to install the newest versions of all packages currently installed on the system from the sources enumerated in /etc/apt/sources.list(5). Packages currently installed with new versions available are retrieved and upgraded; under no circumstances are currently installed packages removed, nor are packages that are not already installed retrieved and installed. New versions of currently installed packages that cannot be upgraded without changing the install status of another package will be left at their current version. An update must be performed first so that apt-get knows that new versions of packages are available.\n\n[apt-get]: https://linux.die.net/man/8/apt-get\n\n## Htop, Vim & Screen\n``` bash\n$ apt-get install htop\n$ apt-get install vim\n$ apt-get install screen\n```\nThese packages can improve your effective.\n***htop:*** [htop][htop] command like [top][top] command, both of these are interactive process viewer for Unix systems. Its help you manage process and monitor resource easy. But [htop][htop] is more convenient than [top][top].\n> - In 'htop' you can scroll the list vertically and horizontally to see all processes and complete command lines.\n- In 'top' you are subject to a delay for each unassigned key you press (especially annoying when multi-key escape sequences are triggered by accident).\n- 'htop' starts faster ('top' seems to collect data for a while before displaying anything).\n- In 'htop' you don't need to type the process number to kill a process, in 'top' you do.\n- In 'htop' you don't need to type the process number or the priority value to renice a process, in 'top' you do.\n- 'htop' supports mouse operation, 'top' doesn't\n- 'top' is older, hence, more used and tested.\nFrom http://hisham.hm/htop/index.php?page=comparison\n\n***vim:*** [vim][vim] is almost a proper superset of [vi][vi], everything that is in vi is available in vim.\n\n***screen:***\n> 1. use multiple shell window from a single SSH session\n2. Keep a shell active even through network disruptions\n3. Disconnect and re-connect to a shell sessions from multiple locations\n4. Run a long running process without maintaining an active shell session\n\n**Usage**\nscreen uses the command `ctrl-a` that's the control key and a lowercase \"a\" as a signal to send commands to screen instead of the shell.\n*start*: `screen`\n*creating*: `Ctrl-a c`\n*switch*: `Ctrl-a n` for the next window or `Ctrl-a p` for the previous window.\n*detach*: `Ctrl-a d`\n*reattach*: `Ctrl-a r`\n*logging*: `Ctrl-a h`\n*lock*: `Ctrl-a x`\n*stop*: `Ctrl-a k`\n\n## Group & User\n``` bash\n$ groupadd\n$ groupdel\n$ useradd\n$ passwd\n$ usermod\n$ userdel\n```\n\n### useradd\nuser add will auto create group that the name same as user\n``` bash\n$ useradd chang # craete user \"chang\"\n$ useradd -d /data/projects chang # create user \"chang\" into /data/projects\n$ useradd -u 999 -g 998 chang # create user with 999 for user id and 998 for group id\n$ useradd -G admings,webadmin,developers chang #\n$ useradd -M chang # add user \"chang\" without home directory\n$ useradd -e 2017-01-01 chang # add user \"chang\" expire at 2017-01-02\n$ chage -l chang # show/change user or password expire date\n$ useradd -e 2017-01-01 -f 45 chang # password expire after 2017-01-01\n$ useradd -c \"Yuchang Wu\" chang # add user with \"Yuchang Wu\" infomation\n$ tail -1 /etc/passwd # print last 1 line of the file \"/etc/passwd\"\n```\n\n### the meaning of files that user and group saved\n- /etc/passwd – User account information.\n- /etc/shadow – Secure account information.\n- /etc/group – Group account information.\n- /etc/gshadow – Secure group account information.\n- /etc/login.defs – Shadow password suite configuration..\n\n/etc/passwd format:\nusername:password:uid:gid:userInfo:homeDirectory:shell\n\n/etc/group format:\ngroupname:password:gidd:groupMembers\n\n### usermod\nfor more detail, to below to see\n```bash\n$ usermod --help\n```\n``` bash\n$ usermod -G www chang # add www group to chang, Be careful, it will remove all existing groups that user belongs, so always add the '-a' with '-G' to append new groups\n$ usermod -G www -a chang\n```\n\n### chown\nchange file owner\n``` bash\n$ chown -hR www:www /home/www # chang the owner of /homw/www to www user and www group\n```\n\n## Nginx Install\nAs you know, you can install an application with few different methods, below we introduce three common methods to install Nginx.\n### Install from Debian repository\n``` bash\n$ apt-get install nginx\n```\nyou can verify the installation through:\n``` bash\n$ nginx -v\n```\nand you can verify which module you are install through:\n``` bash\n$ nginx -V  # Capital\n```\nand you will get the default configuration like:\n``` bash\nnginx version: nginx/1.6.2\nTLS SNI support enabled\nconfigure arguments: --with-cc-opt='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2' --with-ld-opt=-Wl,-z,relro --prefix=/usr/share/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/log/nginx/access.log --error-log-path=/var/log/nginx/error.log --lock-path=/var/lock/nginx.lock --pid-path=/run/nginx.pid --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-debug --with-pcre-jit --with-ipv6 --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --with-http_addition_module --with-http_dav_module --with-http_geoip_module --with-http_gzip_static_module --with-http_image_filter_module --with-http_spdy_module --with-http_sub_module --with-http_xslt_module --with-mail --with-mail_ssl_module --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-auth-pam --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-dav-ext-module --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-echo --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-upstream-fair --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/ngx_http_substitutions_filter_module\n```\n\n> Note: this type can not get the latest version of the NGINX.\n\n### Install from Nginx repository\n1. Download the key used to sign NGINX packages and repository to the apt program keyring and add it:\n``` bash\n$ wget http://nginx.org/keys/nginx_signing.key\n$ apt-key add nginx_signing.key\n```\n2. Add the \"sources\" from which NGINX Open Source packages can be obtained: open the */etc/apt/sources.list* file in any text editor, for example, vim:\n``` bash\n$ vim /etc/apt/sources.list\n```\n3. Append the lines to the file:\n``` bash\ndeb http://nginx.org/packages/mainline/debian/ codename nginx\ndeb-src http://nginx.org/packages/mainline/debian/ codename nginx\n```\n where:\n codename is a codename of a Debian release:\n<table> <thead> <tr> <th>Version</th> <th>Codename</th> <th>Supported Platforms</th> </tr> </thead> <tbody> <tr> <td>7.x</td> <td>wheezy</td> <td>x86_64,i386</td> </tr> <tr> <td>8.x</td> <td>jessie</td> <td>x86_64,i386</td> </tr> </tbody> </table>\n4. Install\n``` bash\n$ apt-get remove nginx-common\n$ apt-get update\n$ apt-get install nginx\n```\n5. list the default module that nginx installed\n``` bash\n$ nginx -V\n```\n ``` bash\nnginx version: nginx/1.11.6\nbuilt by gcc 4.9.2 (Debian 4.9.2-10)\nbuilt with OpenSSL 1.0.1t  3 May 2016\nTLS SNI support enabled\nconfigure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt='-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2' --with-ld-opt='-Wl,-z,relro -Wl,-z,now -Wl,--as-needed'\n\n```\nYou can see the latest version of the NGINX installed to your system.\n\n### Install from open sources\nAs you see, these above two types to install NGINX is non-configurable, these are pre-build, so they already configure with default value. you can't add or remove module and configure it. So if you want to add module or 3rd party module and apply latest security patches, I suggest you use this type to install NGINX.\n1. the PCRE lirary - required by NGINX core and Rewrite modules and provides support for regular expressions.\n``` bash\n$ wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.39.tar.gz\n$ tar -zxf pcre-8.39.tar.gz\n$ cd pcre-8.39\n$ ./configure\n$ make\n$ sudo make install\n```\n2. the zlib library - required by NGINX Gzip module for headers compression.\n``` bash\n$ wget http://zlib.net/zlib-1.2.8.tar.gz\n$ tar -zxf zlib-1.2.8.tar.gz\n$ cd zlib-1.2.8\n$ ./configure\n$ make\n$ sudo make install\n```\n3. the OpenSSL library - required by NGINX SSL modules to support the HTTPS protocol.\n``` bash\n$ wget http://www.openssl.org/source/openssl-1.0.2f.tar.gz\n$ tar -zxf openssl-1.0.2f.tar.gz\n$ cd openssl-1.0.2f\n$ ./configure darwin64-x86_64-cc --prefix=/usr\n$ make\n$ sudo make install\n```\n4. The header more nginx library - required by NGINX header more nginx module to change the response header information.\n``` bash\n$ wget https://codeload.github.com/openresty/headers-more-nginx-module/tar.gz/v0.32\n$ tar -zxf v0.32\n```\n5. download the NGINX sources\n``` bash\n$ wget http://nginx.org/download/nginx-1.10.2.tar.gz\n$ tar zxf nginx-1.10.2.tar.gz\n$ cd nginx-1.10.2\n```\n6. configure NGINX\nAdd above that you download module to NGINX, so you can use the module in NGINX.\n``` bash\n$ ./configure --prefix=/usr/local/nginx --sbin-path=/usr/local/nginx/nginx --conf-path=/usr/local/nginx/nginx.conf --pid-path=/usr/local/nginx/nginx.pid --with-pcre=../pcre-8.39 --with-zlib=../zlib-1.2.8 --with-http_ssl_module --add-module=../headers-more-nginx-module-0.32 --with-debug\n```\n7. link NGINX\nNow, you can run nginx with full path -- */usr/local/nginx/nginx*, and you can browse it with localhost in any browser. But seems not convenient to run nginx with full path every time, so we link the nginx from local to sbin that you can run it without fullpath, just run *nginx*.\n``` bash\n$ ln -s /usr/local/nginx/nginx /usr/sbin/nginx\n```\nNow you can run nginx with *nginx* command without fullpath.\n``` bash\n$ nginx -V\n```\n\n## Configure web\nNow, you can access webpage in browser with default page in NGINX via localhost. So, the nginx.conf path is put in where we set during we configure NGINX -- */usr/local/nginx/nginx.conf*.\nLet's look at the file via vim.\n``` bash\n$ cd /usr/local/nginx\n$ vim nginx.conf\n```\ngo to 35 line through `35 G`\n{% asset_img default_server.png NGINX default server %}\n\nWe drop the unnecessary code, and simplify the code and explain the meaning of the code to below:\n``` NGINX\nserver {\n    listen       80;                  # listening the port, so you access the server with 80 port, this is the default port, so you can access the web server without append :80\n    server_name  localhost;           # domain\n\n    location / {                      # route, NGINX will receive the URL path, and adapt it with the route, if the path is same with route, then go into the brace block\n        root   html;                  # basic directory where web server in, in this demo, it is in ./html\n        index  index.html index.htm;  # access it without append the file name if it is index.html or index.htm\n    }\n}\n```\n\nNow, we can configure a server by self, we make the root of the web server in */home/www*, and write index.html, then open the nginx.conf to configure the new web server \"Hello world\"\n``` bash\n$ mkdir /home/www\n$ echo \"Hello world\" > index.html\n$ cd /usr/local/nginx\n$ vim nginx.conf\n```\nWe append *include conf.d/&#42;.conf* into nginx.conf at last second line. so we can add the server configure without pollute the origin configure. It will auto add all of the file that have .conf extension into *nginx.conf*.\n``` nginx\nserver {\n  listen 8080;\n  server_name localhost;\n  location / {\n    root /home/www;\n    index index.html index.htm;\n  }\n}\n```\nThen we reload the nginx server with:\n``` bash\n$ nginx -s reload\n```\nNow, you can access www. *http://localhost:8080/*\n\n## change response header\nWe already install the headers-more-nginx-module, so we can configure the response header. Before we configure it, let's open the developers-tool in google-chrome, and look at the network request, we can get the response headers:\n{% asset_img response_header.png response headers %}\nFor some security reason, we don't want to show Server information to client, so we can add the configuration to *hello_world.conf*.\n``` nginx\nmore_set_headers \"Server\" \"\"; # add this\nserver {\n  listen 8080;\n  server_name localhost;\n  location / {\n    root /home/www;\n    index index.html index.htm;\n  }\n}\n```\nThen reload the nginx server:\n``` bash\n$ nginx -s reload\n```\nThen we reload the page in browser, and open the network, the Server information already drop.\n{% asset_img response_header_safe.png response headers without server information %}\n\nNow, your nginx server is more safer than before you add the server information into response headers.\n\nFor more detail about the headers-more-nginx-module, see: https://github.com/openresty/headers-more-nginx-module\n\n## add module\nIf you want to add some module into NGINX that was installed, you have to download the module, then reconfigure NGINX with the module and compile it.\n## Tip\n``` bash\n$ man order # to see detail of the order\n$ apt-cache search package # search package\n$ cat /etc/passwd # show all users\n$ getent passwd # show all users\n$ getent group # show all groups\n$ getent group | grep username\n$ id username # show username information\n$ groups username # show which groups does username have\n$ dpkg-reconfigure tzdate # change timezone\n```\n\n> Ref:\n*screen* https://www.rackaid.com/blog/linux-screen-tutorial-and-how-to/#starting\n*useradd* http://www.tecmint.com/add-users-in-linux/\n*usermod* http://www.tecmint.com/usermod-command-examples/\n*permission* http://www.tecmint.com/manage-users-and-groups-in-linux/\n*nginx* https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/\n*headers-more-nginx-module* https://github.com/openresty/headers-more-nginx-module\n[htop]: https://hisham.hm/htop/index.php\n[top]: https://linux.die.net/man/1/top\n[vim]: http://www.vim.org/\n[vi]: http://ex-vi.sourceforge.net/\n","slug":"web-server","published":1,"date":"2017-05-23T03:08:22.349Z","updated":"2017-05-23T03:08:22.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj32sqk1g00041kle66cgk43e","content":"<p>We use <strong>Debian</strong> to finish the demo.<br>Both of below are basic command line, If you are not familiar with command line in Linux, you should learn it first.</p>\n<h2 id=\"Update-amp-Upgrade\"><a href=\"#Update-amp-Upgrade\" class=\"headerlink\" title=\"Update &amp; Upgrade\"></a>Update &amp; Upgrade</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apt-get update</div><div class=\"line\">$ apt-get upgrade</div></pre></td></tr></table></figure>\n<p>You must curious what’s difference between <a href=\"https://linux.die.net/man/8/apt-get\" target=\"_blank\" rel=\"external\">update</a> and <a href=\"https://linux.die.net/man/8/apt-get\" target=\"_blank\" rel=\"external\">upgrade</a>.</p>\n<blockquote>\n<p><strong>update</strong><br>Used to re-synchronize the package index files from their sources. The indexes of available packages are fetched from the location(s) specified in /etc/apt/sources.list(5). An update should always be performed before an upgrade or dist-upgrade.<br><strong>upgrade</strong><br>Used to install the newest versions of all packages currently installed on the system from the sources enumerated in /etc/apt/sources.list(5). Packages currently installed with new versions available are retrieved and upgraded; under no circumstances are currently installed packages removed, nor are packages that are not already installed retrieved and installed. New versions of currently installed packages that cannot be upgraded without changing the install status of another package will be left at their current version. An update must be performed first so that apt-get knows that new versions of packages are available.</p>\n</blockquote>\n<h2 id=\"Htop-Vim-amp-Screen\"><a href=\"#Htop-Vim-amp-Screen\" class=\"headerlink\" title=\"Htop, Vim &amp; Screen\"></a>Htop, Vim &amp; Screen</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apt-get install htop</div><div class=\"line\">$ apt-get install vim</div><div class=\"line\">$ apt-get install screen</div></pre></td></tr></table></figure>\n<p>These packages can improve your effective.<br><strong><em>htop:</em></strong> <a href=\"https://hisham.hm/htop/index.php\" target=\"_blank\" rel=\"external\">htop</a> command like <a href=\"https://linux.die.net/man/1/top\" target=\"_blank\" rel=\"external\">top</a> command, both of these are interactive process viewer for Unix systems. Its help you manage process and monitor resource easy. But <a href=\"https://hisham.hm/htop/index.php\" target=\"_blank\" rel=\"external\">htop</a> is more convenient than <a href=\"https://linux.die.net/man/1/top\" target=\"_blank\" rel=\"external\">top</a>.</p>\n<blockquote>\n<ul>\n<li>In ‘htop’ you can scroll the list vertically and horizontally to see all processes and complete command lines.</li>\n<li>In ‘top’ you are subject to a delay for each unassigned key you press (especially annoying when multi-key escape sequences are triggered by accident).</li>\n<li>‘htop’ starts faster (‘top’ seems to collect data for a while before displaying anything).</li>\n<li>In ‘htop’ you don’t need to type the process number to kill a process, in ‘top’ you do.</li>\n<li>In ‘htop’ you don’t need to type the process number or the priority value to renice a process, in ‘top’ you do.</li>\n<li>‘htop’ supports mouse operation, ‘top’ doesn’t</li>\n<li>‘top’ is older, hence, more used and tested.<br>From <a href=\"http://hisham.hm/htop/index.php?page=comparison\" target=\"_blank\" rel=\"external\">http://hisham.hm/htop/index.php?page=comparison</a></li>\n</ul>\n</blockquote>\n<p><strong><em>vim:</em></strong> <a href=\"http://www.vim.org/\" target=\"_blank\" rel=\"external\">vim</a> is almost a proper superset of <a href=\"http://ex-vi.sourceforge.net/\" target=\"_blank\" rel=\"external\">vi</a>, everything that is in vi is available in vim.</p>\n<p><strong><em>screen:</em></strong></p>\n<blockquote>\n<ol>\n<li>use multiple shell window from a single SSH session</li>\n<li>Keep a shell active even through network disruptions</li>\n<li>Disconnect and re-connect to a shell sessions from multiple locations</li>\n<li>Run a long running process without maintaining an active shell session</li>\n</ol>\n</blockquote>\n<p><strong>Usage</strong><br>screen uses the command <code>ctrl-a</code> that’s the control key and a lowercase “a” as a signal to send commands to screen instead of the shell.<br><em>start</em>: <code>screen</code><br><em>creating</em>: <code>Ctrl-a c</code><br><em>switch</em>: <code>Ctrl-a n</code> for the next window or <code>Ctrl-a p</code> for the previous window.<br><em>detach</em>: <code>Ctrl-a d</code><br><em>reattach</em>: <code>Ctrl-a r</code><br><em>logging</em>: <code>Ctrl-a h</code><br><em>lock</em>: <code>Ctrl-a x</code><br><em>stop</em>: <code>Ctrl-a k</code></p>\n<h2 id=\"Group-amp-User\"><a href=\"#Group-amp-User\" class=\"headerlink\" title=\"Group &amp; User\"></a>Group &amp; User</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ groupadd</div><div class=\"line\">$ groupdel</div><div class=\"line\">$ useradd</div><div class=\"line\">$ passwd</div><div class=\"line\">$ usermod</div><div class=\"line\">$ userdel</div></pre></td></tr></table></figure>\n<h3 id=\"useradd\"><a href=\"#useradd\" class=\"headerlink\" title=\"useradd\"></a>useradd</h3><p>user add will auto create group that the name same as user<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ useradd chang <span class=\"comment\"># craete user \"chang\"</span></div><div class=\"line\">$ useradd <span class=\"_\">-d</span> /data/projects chang <span class=\"comment\"># create user \"chang\" into /data/projects</span></div><div class=\"line\">$ useradd -u 999 -g 998 chang <span class=\"comment\"># create user with 999 for user id and 998 for group id</span></div><div class=\"line\">$ useradd -G admings,webadmin,developers chang <span class=\"comment\">#</span></div><div class=\"line\">$ useradd -M chang <span class=\"comment\"># add user \"chang\" without home directory</span></div><div class=\"line\">$ useradd <span class=\"_\">-e</span> 2017-01-01 chang <span class=\"comment\"># add user \"chang\" expire at 2017-01-02</span></div><div class=\"line\">$ chage <span class=\"_\">-l</span> chang <span class=\"comment\"># show/change user or password expire date</span></div><div class=\"line\">$ useradd <span class=\"_\">-e</span> 2017-01-01 <span class=\"_\">-f</span> 45 chang <span class=\"comment\"># password expire after 2017-01-01</span></div><div class=\"line\">$ useradd -c <span class=\"string\">\"Yuchang Wu\"</span> chang <span class=\"comment\"># add user with \"Yuchang Wu\" infomation</span></div><div class=\"line\">$ tail -1 /etc/passwd <span class=\"comment\"># print last 1 line of the file \"/etc/passwd\"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"the-meaning-of-files-that-user-and-group-saved\"><a href=\"#the-meaning-of-files-that-user-and-group-saved\" class=\"headerlink\" title=\"the meaning of files that user and group saved\"></a>the meaning of files that user and group saved</h3><ul>\n<li>/etc/passwd – User account information.</li>\n<li>/etc/shadow – Secure account information.</li>\n<li>/etc/group – Group account information.</li>\n<li>/etc/gshadow – Secure group account information.</li>\n<li>/etc/login.defs – Shadow password suite configuration..</li>\n</ul>\n<p>/etc/passwd format:<br>username:password:uid:gid:userInfo:homeDirectory:shell</p>\n<p>/etc/group format:<br>groupname:password:gidd:groupMembers</p>\n<h3 id=\"usermod\"><a href=\"#usermod\" class=\"headerlink\" title=\"usermod\"></a>usermod</h3><p>for more detail, to below to see<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ usermod --help</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ usermod -G www chang <span class=\"comment\"># add www group to chang, Be careful, it will remove all existing groups that user belongs, so always add the '-a' with '-G' to append new groups</span></div><div class=\"line\">$ usermod -G www <span class=\"_\">-a</span> chang</div></pre></td></tr></table></figure>\n<h3 id=\"chown\"><a href=\"#chown\" class=\"headerlink\" title=\"chown\"></a>chown</h3><p>change file owner<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chown -hR www:www /home/www <span class=\"comment\"># chang the owner of /homw/www to www user and www group</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Nginx-Install\"><a href=\"#Nginx-Install\" class=\"headerlink\" title=\"Nginx Install\"></a>Nginx Install</h2><p>As you know, you can install an application with few different methods, below we introduce three common methods to install Nginx.</p>\n<h3 id=\"Install-from-Debian-repository\"><a href=\"#Install-from-Debian-repository\" class=\"headerlink\" title=\"Install from Debian repository\"></a>Install from Debian repository</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apt-get install nginx</div></pre></td></tr></table></figure>\n<p>you can verify the installation through:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nginx -v</div></pre></td></tr></table></figure></p>\n<p>and you can verify which module you are install through:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nginx -V  <span class=\"comment\"># Capital</span></div></pre></td></tr></table></figure></p>\n<p>and you will get the default configuration like:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx version: nginx/1.6.2</div><div class=\"line\">TLS SNI support enabled</div><div class=\"line\">configure arguments: --with-cc-opt=<span class=\"string\">'-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2'</span> --with-ld-opt=-Wl,-z,relro --prefix=/usr/share/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/<span class=\"built_in\">log</span>/nginx/access.log --error-log-path=/var/<span class=\"built_in\">log</span>/nginx/error.log --lock-path=/var/lock/nginx.lock --pid-path=/run/nginx.pid --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-debug --with-pcre-jit --with-ipv6 --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --with-http_addition_module --with-http_dav_module --with-http_geoip_module --with-http_gzip_static_module --with-http_image_filter_module --with-http_spdy_module --with-http_sub_module --with-http_xslt_module --with-mail --with-mail_ssl_module --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-auth-pam --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-dav-ext-module --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-echo --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-upstream-fair --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/ngx_http_substitutions_filter_module</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Note: this type can not get the latest version of the NGINX.</p>\n</blockquote>\n<h3 id=\"Install-from-Nginx-repository\"><a href=\"#Install-from-Nginx-repository\" class=\"headerlink\" title=\"Install from Nginx repository\"></a>Install from Nginx repository</h3><ol>\n<li><p>Download the key used to sign NGINX packages and repository to the apt program keyring and add it:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget http://nginx.org/keys/nginx_signing.key</div><div class=\"line\">$ apt-key add nginx_signing.key</div></pre></td></tr></table></figure>\n</li>\n<li><p>Add the “sources” from which NGINX Open Source packages can be obtained: open the <em>/etc/apt/sources.list</em> file in any text editor, for example, vim:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vim /etc/apt/sources.list</div></pre></td></tr></table></figure>\n</li>\n<li><p>Append the lines to the file:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">deb http://nginx.org/packages/mainline/debian/ codename nginx</div><div class=\"line\">deb-src http://nginx.org/packages/mainline/debian/ codename nginx</div></pre></td></tr></table></figure>\n<p>where:<br>codename is a codename of a Debian release:</p>\n<table> <thead> <tr> <th>Version</th> <th>Codename</th> <th>Supported Platforms</th> </tr> </thead> <tbody> <tr> <td>7.x</td> <td>wheezy</td> <td>x86_64,i386</td> </tr> <tr> <td>8.x</td> <td>jessie</td> <td>x86_64,i386</td> </tr> </tbody> </table></li>\n<li><p>Install</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apt-get remove nginx-common</div><div class=\"line\">$ apt-get update</div><div class=\"line\">$ apt-get install nginx</div></pre></td></tr></table></figure>\n</li>\n<li><p>list the default module that nginx installed</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nginx -V</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx version: nginx/1.11.6</div><div class=\"line\">built by gcc 4.9.2 (Debian 4.9.2-10)</div><div class=\"line\">built with OpenSSL 1.0.1t  3 May 2016</div><div class=\"line\">TLS SNI support enabled</div><div class=\"line\">configure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/<span class=\"built_in\">log</span>/nginx/error.log --http-log-path=/var/<span class=\"built_in\">log</span>/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt=<span class=\"string\">'-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2'</span> --with-ld-opt=<span class=\"string\">'-Wl,-z,relro -Wl,-z,now -Wl,--as-needed'</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>You can see the latest version of the NGINX installed to your system.</p>\n<h3 id=\"Install-from-open-sources\"><a href=\"#Install-from-open-sources\" class=\"headerlink\" title=\"Install from open sources\"></a>Install from open sources</h3><p>As you see, these above two types to install NGINX is non-configurable, these are pre-build, so they already configure with default value. you can’t add or remove module and configure it. So if you want to add module or 3rd party module and apply latest security patches, I suggest you use this type to install NGINX.</p>\n<ol>\n<li><p>the PCRE lirary - required by NGINX core and Rewrite modules and provides support for regular expressions.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.39.tar.gz</div><div class=\"line\">$ tar -zxf pcre-8.39.tar.gz</div><div class=\"line\">$ <span class=\"built_in\">cd</span> pcre-8.39</div><div class=\"line\">$ ./configure</div><div class=\"line\">$ make</div><div class=\"line\">$ sudo make install</div></pre></td></tr></table></figure>\n</li>\n<li><p>the zlib library - required by NGINX Gzip module for headers compression.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget http://zlib.net/zlib-1.2.8.tar.gz</div><div class=\"line\">$ tar -zxf zlib-1.2.8.tar.gz</div><div class=\"line\">$ <span class=\"built_in\">cd</span> zlib-1.2.8</div><div class=\"line\">$ ./configure</div><div class=\"line\">$ make</div><div class=\"line\">$ sudo make install</div></pre></td></tr></table></figure>\n</li>\n<li><p>the OpenSSL library - required by NGINX SSL modules to support the HTTPS protocol.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget http://www.openssl.org/<span class=\"built_in\">source</span>/openssl-1.0.2f.tar.gz</div><div class=\"line\">$ tar -zxf openssl-1.0.2f.tar.gz</div><div class=\"line\">$ <span class=\"built_in\">cd</span> openssl-1.0.2f</div><div class=\"line\">$ ./configure darwin64-x86_64-cc --prefix=/usr</div><div class=\"line\">$ make</div><div class=\"line\">$ sudo make install</div></pre></td></tr></table></figure>\n</li>\n<li><p>The header more nginx library - required by NGINX header more nginx module to change the response header information.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget https://codeload.github.com/openresty/headers-more-nginx-module/tar.gz/v0.32</div><div class=\"line\">$ tar -zxf v0.32</div></pre></td></tr></table></figure>\n</li>\n<li><p>download the NGINX sources</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget http://nginx.org/download/nginx-1.10.2.tar.gz</div><div class=\"line\">$ tar zxf nginx-1.10.2.tar.gz</div><div class=\"line\">$ <span class=\"built_in\">cd</span> nginx-1.10.2</div></pre></td></tr></table></figure>\n</li>\n<li><p>configure NGINX<br>Add above that you download module to NGINX, so you can use the module in NGINX.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ./configure --prefix=/usr/<span class=\"built_in\">local</span>/nginx --sbin-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx --conf-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx.conf --pid-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx.pid --with-pcre=../pcre-8.39 --with-zlib=../zlib-1.2.8 --with-http_ssl_module --add-module=../headers-more-nginx-module-0.32 --with-debug</div></pre></td></tr></table></figure>\n</li>\n<li><p>link NGINX<br>Now, you can run nginx with full path – <em>/usr/local/nginx/nginx</em>, and you can browse it with localhost in any browser. But seems not convenient to run nginx with full path every time, so we link the nginx from local to sbin that you can run it without fullpath, just run <em>nginx</em>.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ln <span class=\"_\">-s</span> /usr/<span class=\"built_in\">local</span>/nginx/nginx /usr/sbin/nginx</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>Now you can run nginx with <em>nginx</em> command without fullpath.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nginx -V</div></pre></td></tr></table></figure></p>\n<h2 id=\"Configure-web\"><a href=\"#Configure-web\" class=\"headerlink\" title=\"Configure web\"></a>Configure web</h2><p>Now, you can access webpage in browser with default page in NGINX via localhost. So, the nginx.conf path is put in where we set during we configure NGINX – <em>/usr/local/nginx/nginx.conf</em>.<br>Let’s look at the file via vim.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx</div><div class=\"line\">$ vim nginx.conf</div></pre></td></tr></table></figure></p>\n<p>go to 35 line through <code>35 G</code><br><img src=\"/2017/05/23/web-server/default_server.png\" alt=\"NGINX default server\" title=\"NGINX default server\"></p>\n<p>We drop the unnecessary code, and simplify the code and explain the meaning of the code to below:<br><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;                  <span class=\"comment\"># listening the port, so you access the server with 80 port, this is the default port, so you can access the web server without append :80</span></div><div class=\"line\">    <span class=\"attribute\">server_name</span>  localhost;           <span class=\"comment\"># domain</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"attribute\">location</span> / &#123;                      <span class=\"comment\"># route, NGINX will receive the URL path, and adapt it with the route, if the path is same with route, then go into the brace block</span></div><div class=\"line\">        <span class=\"attribute\">root</span>   html;                  <span class=\"comment\"># basic directory where web server in, in this demo, it is in ./html</span></div><div class=\"line\">        <span class=\"attribute\">index</span>  index.html index.htm;  <span class=\"comment\"># access it without append the file name if it is index.html or index.htm</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Now, we can configure a server by self, we make the root of the web server in <em>/home/www</em>, and write index.html, then open the nginx.conf to configure the new web server “Hello world”<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir /home/www</div><div class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"Hello world\"</span> &gt; index.html</div><div class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx</div><div class=\"line\">$ vim nginx.conf</div></pre></td></tr></table></figure></p>\n<p>We append <em>include conf.d/&#42;.conf</em> into nginx.conf at last second line. so we can add the server configure without pollute the origin configure. It will auto add all of the file that have .conf extension into <em>nginx.conf</em>.<br><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">8080</span>;</div><div class=\"line\">  <span class=\"attribute\">server_name</span> localhost;</div><div class=\"line\">  <span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">    <span class=\"attribute\">root</span> /home/www;</div><div class=\"line\">    <span class=\"attribute\">index</span> index.html index.htm;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Then we reload the nginx server with:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nginx <span class=\"_\">-s</span> reload</div></pre></td></tr></table></figure></p>\n<p>Now, you can access www. <em><a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"external\">http://localhost:8080/</a></em></p>\n<h2 id=\"change-response-header\"><a href=\"#change-response-header\" class=\"headerlink\" title=\"change response header\"></a>change response header</h2><p>We already install the headers-more-nginx-module, so we can configure the response header. Before we configure it, let’s open the developers-tool in google-chrome, and look at the network request, we can get the response headers:<br><img src=\"/2017/05/23/web-server/response_header.png\" alt=\"response headers\" title=\"response headers\"><br>For some security reason, we don’t want to show Server information to client, so we can add the configuration to <em>hello_world.conf</em>.<br><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">more_set_headers</span> <span class=\"string\">\"Server\"</span> <span class=\"string\">\"\"</span>; <span class=\"comment\"># add this</span></div><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">8080</span>;</div><div class=\"line\">  <span class=\"attribute\">server_name</span> localhost;</div><div class=\"line\">  <span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">    <span class=\"attribute\">root</span> /home/www;</div><div class=\"line\">    <span class=\"attribute\">index</span> index.html index.htm;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Then reload the nginx server:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nginx <span class=\"_\">-s</span> reload</div></pre></td></tr></table></figure></p>\n<p>Then we reload the page in browser, and open the network, the Server information already drop.<br><img src=\"/2017/05/23/web-server/response_header_safe.png\" alt=\"response headers without server information\" title=\"response headers without server information\"></p>\n<p>Now, your nginx server is more safer than before you add the server information into response headers.</p>\n<p>For more detail about the headers-more-nginx-module, see: <a href=\"https://github.com/openresty/headers-more-nginx-module\" target=\"_blank\" rel=\"external\">https://github.com/openresty/headers-more-nginx-module</a></p>\n<h2 id=\"add-module\"><a href=\"#add-module\" class=\"headerlink\" title=\"add module\"></a>add module</h2><p>If you want to add some module into NGINX that was installed, you have to download the module, then reconfigure NGINX with the module and compile it.</p>\n<h2 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ man order <span class=\"comment\"># to see detail of the order</span></div><div class=\"line\">$ apt-cache search package <span class=\"comment\"># search package</span></div><div class=\"line\">$ cat /etc/passwd <span class=\"comment\"># show all users</span></div><div class=\"line\">$ getent passwd <span class=\"comment\"># show all users</span></div><div class=\"line\">$ getent group <span class=\"comment\"># show all groups</span></div><div class=\"line\">$ getent group | grep username</div><div class=\"line\">$ id username <span class=\"comment\"># show username information</span></div><div class=\"line\">$ groups username <span class=\"comment\"># show which groups does username have</span></div><div class=\"line\">$ dpkg-reconfigure tzdate <span class=\"comment\"># change timezone</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>Ref:<br><em>screen</em> <a href=\"https://www.rackaid.com/blog/linux-screen-tutorial-and-how-to/#starting\" target=\"_blank\" rel=\"external\">https://www.rackaid.com/blog/linux-screen-tutorial-and-how-to/#starting</a><br><em>useradd</em> <a href=\"http://www.tecmint.com/add-users-in-linux/\" target=\"_blank\" rel=\"external\">http://www.tecmint.com/add-users-in-linux/</a><br><em>usermod</em> <a href=\"http://www.tecmint.com/usermod-command-examples/\" target=\"_blank\" rel=\"external\">http://www.tecmint.com/usermod-command-examples/</a><br><em>permission</em> <a href=\"http://www.tecmint.com/manage-users-and-groups-in-linux/\" target=\"_blank\" rel=\"external\">http://www.tecmint.com/manage-users-and-groups-in-linux/</a><br><em>nginx</em> <a href=\"https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/\" target=\"_blank\" rel=\"external\">https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/</a><br><em>headers-more-nginx-module</em> <a href=\"https://github.com/openresty/headers-more-nginx-module\" target=\"_blank\" rel=\"external\">https://github.com/openresty/headers-more-nginx-module</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>We use <strong>Debian</strong> to finish the demo.<br>Both of below are basic command line, If you are not familiar with command line in Linux, you should learn it first.</p>\n<h2 id=\"Update-amp-Upgrade\"><a href=\"#Update-amp-Upgrade\" class=\"headerlink\" title=\"Update &amp; Upgrade\"></a>Update &amp; Upgrade</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apt-get update</div><div class=\"line\">$ apt-get upgrade</div></pre></td></tr></table></figure>\n<p>You must curious what’s difference between <a href=\"https://linux.die.net/man/8/apt-get\" target=\"_blank\" rel=\"external\">update</a> and <a href=\"https://linux.die.net/man/8/apt-get\" target=\"_blank\" rel=\"external\">upgrade</a>.</p>\n<blockquote>\n<p><strong>update</strong><br>Used to re-synchronize the package index files from their sources. The indexes of available packages are fetched from the location(s) specified in /etc/apt/sources.list(5). An update should always be performed before an upgrade or dist-upgrade.<br><strong>upgrade</strong><br>Used to install the newest versions of all packages currently installed on the system from the sources enumerated in /etc/apt/sources.list(5). Packages currently installed with new versions available are retrieved and upgraded; under no circumstances are currently installed packages removed, nor are packages that are not already installed retrieved and installed. New versions of currently installed packages that cannot be upgraded without changing the install status of another package will be left at their current version. An update must be performed first so that apt-get knows that new versions of packages are available.</p>\n</blockquote>\n<h2 id=\"Htop-Vim-amp-Screen\"><a href=\"#Htop-Vim-amp-Screen\" class=\"headerlink\" title=\"Htop, Vim &amp; Screen\"></a>Htop, Vim &amp; Screen</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apt-get install htop</div><div class=\"line\">$ apt-get install vim</div><div class=\"line\">$ apt-get install screen</div></pre></td></tr></table></figure>\n<p>These packages can improve your effective.<br><strong><em>htop:</em></strong> <a href=\"https://hisham.hm/htop/index.php\" target=\"_blank\" rel=\"external\">htop</a> command like <a href=\"https://linux.die.net/man/1/top\" target=\"_blank\" rel=\"external\">top</a> command, both of these are interactive process viewer for Unix systems. Its help you manage process and monitor resource easy. But <a href=\"https://hisham.hm/htop/index.php\" target=\"_blank\" rel=\"external\">htop</a> is more convenient than <a href=\"https://linux.die.net/man/1/top\" target=\"_blank\" rel=\"external\">top</a>.</p>\n<blockquote>\n<ul>\n<li>In ‘htop’ you can scroll the list vertically and horizontally to see all processes and complete command lines.</li>\n<li>In ‘top’ you are subject to a delay for each unassigned key you press (especially annoying when multi-key escape sequences are triggered by accident).</li>\n<li>‘htop’ starts faster (‘top’ seems to collect data for a while before displaying anything).</li>\n<li>In ‘htop’ you don’t need to type the process number to kill a process, in ‘top’ you do.</li>\n<li>In ‘htop’ you don’t need to type the process number or the priority value to renice a process, in ‘top’ you do.</li>\n<li>‘htop’ supports mouse operation, ‘top’ doesn’t</li>\n<li>‘top’ is older, hence, more used and tested.<br>From <a href=\"http://hisham.hm/htop/index.php?page=comparison\" target=\"_blank\" rel=\"external\">http://hisham.hm/htop/index.php?page=comparison</a></li>\n</ul>\n</blockquote>\n<p><strong><em>vim:</em></strong> <a href=\"http://www.vim.org/\" target=\"_blank\" rel=\"external\">vim</a> is almost a proper superset of <a href=\"http://ex-vi.sourceforge.net/\" target=\"_blank\" rel=\"external\">vi</a>, everything that is in vi is available in vim.</p>\n<p><strong><em>screen:</em></strong></p>\n<blockquote>\n<ol>\n<li>use multiple shell window from a single SSH session</li>\n<li>Keep a shell active even through network disruptions</li>\n<li>Disconnect and re-connect to a shell sessions from multiple locations</li>\n<li>Run a long running process without maintaining an active shell session</li>\n</ol>\n</blockquote>\n<p><strong>Usage</strong><br>screen uses the command <code>ctrl-a</code> that’s the control key and a lowercase “a” as a signal to send commands to screen instead of the shell.<br><em>start</em>: <code>screen</code><br><em>creating</em>: <code>Ctrl-a c</code><br><em>switch</em>: <code>Ctrl-a n</code> for the next window or <code>Ctrl-a p</code> for the previous window.<br><em>detach</em>: <code>Ctrl-a d</code><br><em>reattach</em>: <code>Ctrl-a r</code><br><em>logging</em>: <code>Ctrl-a h</code><br><em>lock</em>: <code>Ctrl-a x</code><br><em>stop</em>: <code>Ctrl-a k</code></p>\n<h2 id=\"Group-amp-User\"><a href=\"#Group-amp-User\" class=\"headerlink\" title=\"Group &amp; User\"></a>Group &amp; User</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ groupadd</div><div class=\"line\">$ groupdel</div><div class=\"line\">$ useradd</div><div class=\"line\">$ passwd</div><div class=\"line\">$ usermod</div><div class=\"line\">$ userdel</div></pre></td></tr></table></figure>\n<h3 id=\"useradd\"><a href=\"#useradd\" class=\"headerlink\" title=\"useradd\"></a>useradd</h3><p>user add will auto create group that the name same as user<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ useradd chang <span class=\"comment\"># craete user \"chang\"</span></div><div class=\"line\">$ useradd <span class=\"_\">-d</span> /data/projects chang <span class=\"comment\"># create user \"chang\" into /data/projects</span></div><div class=\"line\">$ useradd -u 999 -g 998 chang <span class=\"comment\"># create user with 999 for user id and 998 for group id</span></div><div class=\"line\">$ useradd -G admings,webadmin,developers chang <span class=\"comment\">#</span></div><div class=\"line\">$ useradd -M chang <span class=\"comment\"># add user \"chang\" without home directory</span></div><div class=\"line\">$ useradd <span class=\"_\">-e</span> 2017-01-01 chang <span class=\"comment\"># add user \"chang\" expire at 2017-01-02</span></div><div class=\"line\">$ chage <span class=\"_\">-l</span> chang <span class=\"comment\"># show/change user or password expire date</span></div><div class=\"line\">$ useradd <span class=\"_\">-e</span> 2017-01-01 <span class=\"_\">-f</span> 45 chang <span class=\"comment\"># password expire after 2017-01-01</span></div><div class=\"line\">$ useradd -c <span class=\"string\">\"Yuchang Wu\"</span> chang <span class=\"comment\"># add user with \"Yuchang Wu\" infomation</span></div><div class=\"line\">$ tail -1 /etc/passwd <span class=\"comment\"># print last 1 line of the file \"/etc/passwd\"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"the-meaning-of-files-that-user-and-group-saved\"><a href=\"#the-meaning-of-files-that-user-and-group-saved\" class=\"headerlink\" title=\"the meaning of files that user and group saved\"></a>the meaning of files that user and group saved</h3><ul>\n<li>/etc/passwd – User account information.</li>\n<li>/etc/shadow – Secure account information.</li>\n<li>/etc/group – Group account information.</li>\n<li>/etc/gshadow – Secure group account information.</li>\n<li>/etc/login.defs – Shadow password suite configuration..</li>\n</ul>\n<p>/etc/passwd format:<br>username:password:uid:gid:userInfo:homeDirectory:shell</p>\n<p>/etc/group format:<br>groupname:password:gidd:groupMembers</p>\n<h3 id=\"usermod\"><a href=\"#usermod\" class=\"headerlink\" title=\"usermod\"></a>usermod</h3><p>for more detail, to below to see<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ usermod --help</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ usermod -G www chang <span class=\"comment\"># add www group to chang, Be careful, it will remove all existing groups that user belongs, so always add the '-a' with '-G' to append new groups</span></div><div class=\"line\">$ usermod -G www <span class=\"_\">-a</span> chang</div></pre></td></tr></table></figure>\n<h3 id=\"chown\"><a href=\"#chown\" class=\"headerlink\" title=\"chown\"></a>chown</h3><p>change file owner<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ chown -hR www:www /home/www <span class=\"comment\"># chang the owner of /homw/www to www user and www group</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"Nginx-Install\"><a href=\"#Nginx-Install\" class=\"headerlink\" title=\"Nginx Install\"></a>Nginx Install</h2><p>As you know, you can install an application with few different methods, below we introduce three common methods to install Nginx.</p>\n<h3 id=\"Install-from-Debian-repository\"><a href=\"#Install-from-Debian-repository\" class=\"headerlink\" title=\"Install from Debian repository\"></a>Install from Debian repository</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apt-get install nginx</div></pre></td></tr></table></figure>\n<p>you can verify the installation through:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nginx -v</div></pre></td></tr></table></figure></p>\n<p>and you can verify which module you are install through:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nginx -V  <span class=\"comment\"># Capital</span></div></pre></td></tr></table></figure></p>\n<p>and you will get the default configuration like:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx version: nginx/1.6.2</div><div class=\"line\">TLS SNI support enabled</div><div class=\"line\">configure arguments: --with-cc-opt=<span class=\"string\">'-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2'</span> --with-ld-opt=-Wl,-z,relro --prefix=/usr/share/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/<span class=\"built_in\">log</span>/nginx/access.log --error-log-path=/var/<span class=\"built_in\">log</span>/nginx/error.log --lock-path=/var/lock/nginx.lock --pid-path=/run/nginx.pid --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-debug --with-pcre-jit --with-ipv6 --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --with-http_addition_module --with-http_dav_module --with-http_geoip_module --with-http_gzip_static_module --with-http_image_filter_module --with-http_spdy_module --with-http_sub_module --with-http_xslt_module --with-mail --with-mail_ssl_module --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-auth-pam --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-dav-ext-module --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-echo --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-upstream-fair --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/ngx_http_substitutions_filter_module</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>Note: this type can not get the latest version of the NGINX.</p>\n</blockquote>\n<h3 id=\"Install-from-Nginx-repository\"><a href=\"#Install-from-Nginx-repository\" class=\"headerlink\" title=\"Install from Nginx repository\"></a>Install from Nginx repository</h3><ol>\n<li><p>Download the key used to sign NGINX packages and repository to the apt program keyring and add it:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget http://nginx.org/keys/nginx_signing.key</div><div class=\"line\">$ apt-key add nginx_signing.key</div></pre></td></tr></table></figure>\n</li>\n<li><p>Add the “sources” from which NGINX Open Source packages can be obtained: open the <em>/etc/apt/sources.list</em> file in any text editor, for example, vim:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ vim /etc/apt/sources.list</div></pre></td></tr></table></figure>\n</li>\n<li><p>Append the lines to the file:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">deb http://nginx.org/packages/mainline/debian/ codename nginx</div><div class=\"line\">deb-src http://nginx.org/packages/mainline/debian/ codename nginx</div></pre></td></tr></table></figure>\n<p>where:<br>codename is a codename of a Debian release:</p>\n<table> <thead> <tr> <th>Version</th> <th>Codename</th> <th>Supported Platforms</th> </tr> </thead> <tbody> <tr> <td>7.x</td> <td>wheezy</td> <td>x86_64,i386</td> </tr> <tr> <td>8.x</td> <td>jessie</td> <td>x86_64,i386</td> </tr> </tbody> </table></li>\n<li><p>Install</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ apt-get remove nginx-common</div><div class=\"line\">$ apt-get update</div><div class=\"line\">$ apt-get install nginx</div></pre></td></tr></table></figure>\n</li>\n<li><p>list the default module that nginx installed</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nginx -V</div></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">nginx version: nginx/1.11.6</div><div class=\"line\">built by gcc 4.9.2 (Debian 4.9.2-10)</div><div class=\"line\">built with OpenSSL 1.0.1t  3 May 2016</div><div class=\"line\">TLS SNI support enabled</div><div class=\"line\">configure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/<span class=\"built_in\">log</span>/nginx/error.log --http-log-path=/var/<span class=\"built_in\">log</span>/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt=<span class=\"string\">'-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2'</span> --with-ld-opt=<span class=\"string\">'-Wl,-z,relro -Wl,-z,now -Wl,--as-needed'</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>You can see the latest version of the NGINX installed to your system.</p>\n<h3 id=\"Install-from-open-sources\"><a href=\"#Install-from-open-sources\" class=\"headerlink\" title=\"Install from open sources\"></a>Install from open sources</h3><p>As you see, these above two types to install NGINX is non-configurable, these are pre-build, so they already configure with default value. you can’t add or remove module and configure it. So if you want to add module or 3rd party module and apply latest security patches, I suggest you use this type to install NGINX.</p>\n<ol>\n<li><p>the PCRE lirary - required by NGINX core and Rewrite modules and provides support for regular expressions.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.39.tar.gz</div><div class=\"line\">$ tar -zxf pcre-8.39.tar.gz</div><div class=\"line\">$ <span class=\"built_in\">cd</span> pcre-8.39</div><div class=\"line\">$ ./configure</div><div class=\"line\">$ make</div><div class=\"line\">$ sudo make install</div></pre></td></tr></table></figure>\n</li>\n<li><p>the zlib library - required by NGINX Gzip module for headers compression.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget http://zlib.net/zlib-1.2.8.tar.gz</div><div class=\"line\">$ tar -zxf zlib-1.2.8.tar.gz</div><div class=\"line\">$ <span class=\"built_in\">cd</span> zlib-1.2.8</div><div class=\"line\">$ ./configure</div><div class=\"line\">$ make</div><div class=\"line\">$ sudo make install</div></pre></td></tr></table></figure>\n</li>\n<li><p>the OpenSSL library - required by NGINX SSL modules to support the HTTPS protocol.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget http://www.openssl.org/<span class=\"built_in\">source</span>/openssl-1.0.2f.tar.gz</div><div class=\"line\">$ tar -zxf openssl-1.0.2f.tar.gz</div><div class=\"line\">$ <span class=\"built_in\">cd</span> openssl-1.0.2f</div><div class=\"line\">$ ./configure darwin64-x86_64-cc --prefix=/usr</div><div class=\"line\">$ make</div><div class=\"line\">$ sudo make install</div></pre></td></tr></table></figure>\n</li>\n<li><p>The header more nginx library - required by NGINX header more nginx module to change the response header information.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget https://codeload.github.com/openresty/headers-more-nginx-module/tar.gz/v0.32</div><div class=\"line\">$ tar -zxf v0.32</div></pre></td></tr></table></figure>\n</li>\n<li><p>download the NGINX sources</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget http://nginx.org/download/nginx-1.10.2.tar.gz</div><div class=\"line\">$ tar zxf nginx-1.10.2.tar.gz</div><div class=\"line\">$ <span class=\"built_in\">cd</span> nginx-1.10.2</div></pre></td></tr></table></figure>\n</li>\n<li><p>configure NGINX<br>Add above that you download module to NGINX, so you can use the module in NGINX.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ./configure --prefix=/usr/<span class=\"built_in\">local</span>/nginx --sbin-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx --conf-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx.conf --pid-path=/usr/<span class=\"built_in\">local</span>/nginx/nginx.pid --with-pcre=../pcre-8.39 --with-zlib=../zlib-1.2.8 --with-http_ssl_module --add-module=../headers-more-nginx-module-0.32 --with-debug</div></pre></td></tr></table></figure>\n</li>\n<li><p>link NGINX<br>Now, you can run nginx with full path – <em>/usr/local/nginx/nginx</em>, and you can browse it with localhost in any browser. But seems not convenient to run nginx with full path every time, so we link the nginx from local to sbin that you can run it without fullpath, just run <em>nginx</em>.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ln <span class=\"_\">-s</span> /usr/<span class=\"built_in\">local</span>/nginx/nginx /usr/sbin/nginx</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>Now you can run nginx with <em>nginx</em> command without fullpath.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nginx -V</div></pre></td></tr></table></figure></p>\n<h2 id=\"Configure-web\"><a href=\"#Configure-web\" class=\"headerlink\" title=\"Configure web\"></a>Configure web</h2><p>Now, you can access webpage in browser with default page in NGINX via localhost. So, the nginx.conf path is put in where we set during we configure NGINX – <em>/usr/local/nginx/nginx.conf</em>.<br>Let’s look at the file via vim.<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx</div><div class=\"line\">$ vim nginx.conf</div></pre></td></tr></table></figure></p>\n<p>go to 35 line through <code>35 G</code><br><img src=\"/2017/05/23/web-server/default_server.png\" alt=\"NGINX default server\" title=\"NGINX default server\"></p>\n<p>We drop the unnecessary code, and simplify the code and explain the meaning of the code to below:<br><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">listen</span>       <span class=\"number\">80</span>;                  <span class=\"comment\"># listening the port, so you access the server with 80 port, this is the default port, so you can access the web server without append :80</span></div><div class=\"line\">    <span class=\"attribute\">server_name</span>  localhost;           <span class=\"comment\"># domain</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"attribute\">location</span> / &#123;                      <span class=\"comment\"># route, NGINX will receive the URL path, and adapt it with the route, if the path is same with route, then go into the brace block</span></div><div class=\"line\">        <span class=\"attribute\">root</span>   html;                  <span class=\"comment\"># basic directory where web server in, in this demo, it is in ./html</span></div><div class=\"line\">        <span class=\"attribute\">index</span>  index.html index.htm;  <span class=\"comment\"># access it without append the file name if it is index.html or index.htm</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Now, we can configure a server by self, we make the root of the web server in <em>/home/www</em>, and write index.html, then open the nginx.conf to configure the new web server “Hello world”<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir /home/www</div><div class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"string\">\"Hello world\"</span> &gt; index.html</div><div class=\"line\">$ <span class=\"built_in\">cd</span> /usr/<span class=\"built_in\">local</span>/nginx</div><div class=\"line\">$ vim nginx.conf</div></pre></td></tr></table></figure></p>\n<p>We append <em>include conf.d/&#42;.conf</em> into nginx.conf at last second line. so we can add the server configure without pollute the origin configure. It will auto add all of the file that have .conf extension into <em>nginx.conf</em>.<br><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">8080</span>;</div><div class=\"line\">  <span class=\"attribute\">server_name</span> localhost;</div><div class=\"line\">  <span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">    <span class=\"attribute\">root</span> /home/www;</div><div class=\"line\">    <span class=\"attribute\">index</span> index.html index.htm;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Then we reload the nginx server with:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nginx <span class=\"_\">-s</span> reload</div></pre></td></tr></table></figure></p>\n<p>Now, you can access www. <em><a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"external\">http://localhost:8080/</a></em></p>\n<h2 id=\"change-response-header\"><a href=\"#change-response-header\" class=\"headerlink\" title=\"change response header\"></a>change response header</h2><p>We already install the headers-more-nginx-module, so we can configure the response header. Before we configure it, let’s open the developers-tool in google-chrome, and look at the network request, we can get the response headers:<br><img src=\"/2017/05/23/web-server/response_header.png\" alt=\"response headers\" title=\"response headers\"><br>For some security reason, we don’t want to show Server information to client, so we can add the configuration to <em>hello_world.conf</em>.<br><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"attribute\">more_set_headers</span> <span class=\"string\">\"Server\"</span> <span class=\"string\">\"\"</span>; <span class=\"comment\"># add this</span></div><div class=\"line\"><span class=\"section\">server</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">listen</span> <span class=\"number\">8080</span>;</div><div class=\"line\">  <span class=\"attribute\">server_name</span> localhost;</div><div class=\"line\">  <span class=\"attribute\">location</span> / &#123;</div><div class=\"line\">    <span class=\"attribute\">root</span> /home/www;</div><div class=\"line\">    <span class=\"attribute\">index</span> index.html index.htm;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Then reload the nginx server:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nginx <span class=\"_\">-s</span> reload</div></pre></td></tr></table></figure></p>\n<p>Then we reload the page in browser, and open the network, the Server information already drop.<br><img src=\"/2017/05/23/web-server/response_header_safe.png\" alt=\"response headers without server information\" title=\"response headers without server information\"></p>\n<p>Now, your nginx server is more safer than before you add the server information into response headers.</p>\n<p>For more detail about the headers-more-nginx-module, see: <a href=\"https://github.com/openresty/headers-more-nginx-module\" target=\"_blank\" rel=\"external\">https://github.com/openresty/headers-more-nginx-module</a></p>\n<h2 id=\"add-module\"><a href=\"#add-module\" class=\"headerlink\" title=\"add module\"></a>add module</h2><p>If you want to add some module into NGINX that was installed, you have to download the module, then reconfigure NGINX with the module and compile it.</p>\n<h2 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ man order <span class=\"comment\"># to see detail of the order</span></div><div class=\"line\">$ apt-cache search package <span class=\"comment\"># search package</span></div><div class=\"line\">$ cat /etc/passwd <span class=\"comment\"># show all users</span></div><div class=\"line\">$ getent passwd <span class=\"comment\"># show all users</span></div><div class=\"line\">$ getent group <span class=\"comment\"># show all groups</span></div><div class=\"line\">$ getent group | grep username</div><div class=\"line\">$ id username <span class=\"comment\"># show username information</span></div><div class=\"line\">$ groups username <span class=\"comment\"># show which groups does username have</span></div><div class=\"line\">$ dpkg-reconfigure tzdate <span class=\"comment\"># change timezone</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>Ref:<br><em>screen</em> <a href=\"https://www.rackaid.com/blog/linux-screen-tutorial-and-how-to/#starting\" target=\"_blank\" rel=\"external\">https://www.rackaid.com/blog/linux-screen-tutorial-and-how-to/#starting</a><br><em>useradd</em> <a href=\"http://www.tecmint.com/add-users-in-linux/\" target=\"_blank\" rel=\"external\">http://www.tecmint.com/add-users-in-linux/</a><br><em>usermod</em> <a href=\"http://www.tecmint.com/usermod-command-examples/\" target=\"_blank\" rel=\"external\">http://www.tecmint.com/usermod-command-examples/</a><br><em>permission</em> <a href=\"http://www.tecmint.com/manage-users-and-groups-in-linux/\" target=\"_blank\" rel=\"external\">http://www.tecmint.com/manage-users-and-groups-in-linux/</a><br><em>nginx</em> <a href=\"https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/\" target=\"_blank\" rel=\"external\">https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/</a><br><em>headers-more-nginx-module</em> <a href=\"https://github.com/openresty/headers-more-nginx-module\" target=\"_blank\" rel=\"external\">https://github.com/openresty/headers-more-nginx-module</a></p>\n</blockquote>\n"},{"title":"Node.js","date":"2016-12-08T12:35:41.000Z","_content":"\n## Event queue to solve a number of SQL with same result executed\nIf you want to use the cache after you execute a SQL, you can just execute it, then the OS will use the cache for you to improve the performance.\nBut sometimes, there are a lot of client send a lot of SQL request with same result in first (e.g. specific activity start at 10:00am), the result of the SQL haven't store to cache yet, so a number of request send to the OS, maybe your program will die. So it's essential to make requests that after the first not execute, and just use the cache by the first SQL.\n``` JavaScript\nlet proxy = new events.EventEmitter()\nlet status = 'ready'\nlet select = callback => {\n  proxy.once('selected', callback)\n  if (status === 'ready') {\n    status = 'pending'\n    db.select('sql', result => {\n      proxy.emit('selected', result)\n      status = 'ready'\n    })\n  }\n}\n```\n\n\n## asynchronous\nAsynchronous is a good stuff, you can execute I/O operate without wait it. It's a good way to improve the CPU usage rate.\nSometimes, we have multiple I/O operates, and these are associated, we want to do some action after all of the I/O operates finished. What can we do? You may do like this below.\n``` JavaScript\nfs.readFile(path, 'utf8', (err, template) => {\n  db.query(sql, (err, data) => {\n    l10n.get((err, resources) => {\n      // action\n    })\n  })\n})\n```\nIt's easy to do that right? But mention the callback, you write 3 level callback then do the action. Think about it, if you have to do 4 or 5 I/O operate, and you do action after all of theses finished. so you may write '}) }) }) }) })', seems painful to maintain the program.\n\nAnyway, we don't do above, that is so stupid. We can make these I/O operate in first level without put an operate in to another callback. Read below.\n\n``` JavaScript\nlet after = (times, callback) => {\n  let count = 0\n  let result = {}\n  return (key, value) => {\n    result[key] = value\n    count++\n    if (count === times) {\n      callback(results)\n    }\n  }\n}\n\n\nlet emitter = new events.Emitter()\nlet done = after(times, render)\n\nemitter.on('done', done)\nemitter.on('done', other)\n\nfs.readFile(template_path, 'utf8', (err, template) => {\n  emitter.emit('done', 'template', tempalte)\n})\ndb.query(sql, (err, data) => {\n  emitter.emit('done', 'data', data)\n})\nl10n.get((err, resources) => {\n  emitter.emit('done', 'resources', resources)\n})\n```\n\n## order asynchronous\nhttps://wuyuchang.github.io/2016/12/09/Principle-of-Promise-Deferred/\n\n## smooth\n``` JavaScript\nlet smooth = method => {\n  return () => {\n    let deferred = new Deferred()\n    let args = Array.prototype.slice.call(arguments, 0) // transform the arguments to an array\n    args.push(deferred.callback()) // push an parameter, [file, encode, deferred.callback()]\n    method.apply(null, args) // call method, fs.readFile(file, encode, deferred.callback())\n    return deferred.promise\n  }\n}\n```\n","source":"_posts/node-js.md","raw":"---\ntitle: Node.js\ndate: 2016-12-08 20:35:41\ntags: Node.js\n---\n\n## Event queue to solve a number of SQL with same result executed\nIf you want to use the cache after you execute a SQL, you can just execute it, then the OS will use the cache for you to improve the performance.\nBut sometimes, there are a lot of client send a lot of SQL request with same result in first (e.g. specific activity start at 10:00am), the result of the SQL haven't store to cache yet, so a number of request send to the OS, maybe your program will die. So it's essential to make requests that after the first not execute, and just use the cache by the first SQL.\n``` JavaScript\nlet proxy = new events.EventEmitter()\nlet status = 'ready'\nlet select = callback => {\n  proxy.once('selected', callback)\n  if (status === 'ready') {\n    status = 'pending'\n    db.select('sql', result => {\n      proxy.emit('selected', result)\n      status = 'ready'\n    })\n  }\n}\n```\n\n\n## asynchronous\nAsynchronous is a good stuff, you can execute I/O operate without wait it. It's a good way to improve the CPU usage rate.\nSometimes, we have multiple I/O operates, and these are associated, we want to do some action after all of the I/O operates finished. What can we do? You may do like this below.\n``` JavaScript\nfs.readFile(path, 'utf8', (err, template) => {\n  db.query(sql, (err, data) => {\n    l10n.get((err, resources) => {\n      // action\n    })\n  })\n})\n```\nIt's easy to do that right? But mention the callback, you write 3 level callback then do the action. Think about it, if you have to do 4 or 5 I/O operate, and you do action after all of theses finished. so you may write '}) }) }) }) })', seems painful to maintain the program.\n\nAnyway, we don't do above, that is so stupid. We can make these I/O operate in first level without put an operate in to another callback. Read below.\n\n``` JavaScript\nlet after = (times, callback) => {\n  let count = 0\n  let result = {}\n  return (key, value) => {\n    result[key] = value\n    count++\n    if (count === times) {\n      callback(results)\n    }\n  }\n}\n\n\nlet emitter = new events.Emitter()\nlet done = after(times, render)\n\nemitter.on('done', done)\nemitter.on('done', other)\n\nfs.readFile(template_path, 'utf8', (err, template) => {\n  emitter.emit('done', 'template', tempalte)\n})\ndb.query(sql, (err, data) => {\n  emitter.emit('done', 'data', data)\n})\nl10n.get((err, resources) => {\n  emitter.emit('done', 'resources', resources)\n})\n```\n\n## order asynchronous\nhttps://wuyuchang.github.io/2016/12/09/Principle-of-Promise-Deferred/\n\n## smooth\n``` JavaScript\nlet smooth = method => {\n  return () => {\n    let deferred = new Deferred()\n    let args = Array.prototype.slice.call(arguments, 0) // transform the arguments to an array\n    args.push(deferred.callback()) // push an parameter, [file, encode, deferred.callback()]\n    method.apply(null, args) // call method, fs.readFile(file, encode, deferred.callback())\n    return deferred.promise\n  }\n}\n```\n","slug":"node-js","published":1,"updated":"2017-05-24T08:38:45.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj32sqk1n00051klecay5u85t","content":"<h2 id=\"Event-queue-to-solve-a-number-of-SQL-with-same-result-executed\"><a href=\"#Event-queue-to-solve-a-number-of-SQL-with-same-result-executed\" class=\"headerlink\" title=\"Event queue to solve a number of SQL with same result executed\"></a>Event queue to solve a number of SQL with same result executed</h2><p>If you want to use the cache after you execute a SQL, you can just execute it, then the OS will use the cache for you to improve the performance.<br>But sometimes, there are a lot of client send a lot of SQL request with same result in first (e.g. specific activity start at 10:00am), the result of the SQL haven’t store to cache yet, so a number of request send to the OS, maybe your program will die. So it’s essential to make requests that after the first not execute, and just use the cache by the first SQL.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> events.EventEmitter()</div><div class=\"line\"><span class=\"keyword\">let</span> status = <span class=\"string\">'ready'</span></div><div class=\"line\"><span class=\"keyword\">let</span> select = <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> &#123;</div><div class=\"line\">  proxy.once(<span class=\"string\">'selected'</span>, callback)</div><div class=\"line\">  <span class=\"keyword\">if</span> (status === <span class=\"string\">'ready'</span>) &#123;</div><div class=\"line\">    status = <span class=\"string\">'pending'</span></div><div class=\"line\">    db.select(<span class=\"string\">'sql'</span>, result =&gt; &#123;</div><div class=\"line\">      proxy.emit(<span class=\"string\">'selected'</span>, result)</div><div class=\"line\">      status = <span class=\"string\">'ready'</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"asynchronous\"><a href=\"#asynchronous\" class=\"headerlink\" title=\"asynchronous\"></a>asynchronous</h2><p>Asynchronous is a good stuff, you can execute I/O operate without wait it. It’s a good way to improve the CPU usage rate.<br>Sometimes, we have multiple I/O operates, and these are associated, we want to do some action after all of the I/O operates finished. What can we do? You may do like this below.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">fs.readFile(path, <span class=\"string\">'utf8'</span>, (err, template) =&gt; &#123;</div><div class=\"line\">  db.query(sql, (err, data) =&gt; &#123;</div><div class=\"line\">    l10n.get(<span class=\"function\">(<span class=\"params\">err, resources</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// action</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>It’s easy to do that right? But mention the callback, you write 3 level callback then do the action. Think about it, if you have to do 4 or 5 I/O operate, and you do action after all of theses finished. so you may write ‘}) }) }) }) })’, seems painful to maintain the program.</p>\n<p>Anyway, we don’t do above, that is so stupid. We can make these I/O operate in first level without put an operate in to another callback. Read below.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> after = <span class=\"function\">(<span class=\"params\">times, callback</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"keyword\">let</span> result = &#123;&#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">key, value</span>) =&gt;</span> &#123;</div><div class=\"line\">    result[key] = value</div><div class=\"line\">    count++</div><div class=\"line\">    <span class=\"keyword\">if</span> (count === times) &#123;</div><div class=\"line\">      callback(results)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> emitter = <span class=\"keyword\">new</span> events.Emitter()</div><div class=\"line\"><span class=\"keyword\">let</span> done = after(times, render)</div><div class=\"line\"></div><div class=\"line\">emitter.on(<span class=\"string\">'done'</span>, done)</div><div class=\"line\">emitter.on(<span class=\"string\">'done'</span>, other)</div><div class=\"line\"></div><div class=\"line\">fs.readFile(template_path, <span class=\"string\">'utf8'</span>, (err, template) =&gt; &#123;</div><div class=\"line\">  emitter.emit(<span class=\"string\">'done'</span>, <span class=\"string\">'template'</span>, tempalte)</div><div class=\"line\">&#125;)</div><div class=\"line\">db.query(sql, (err, data) =&gt; &#123;</div><div class=\"line\">  emitter.emit(<span class=\"string\">'done'</span>, <span class=\"string\">'data'</span>, data)</div><div class=\"line\">&#125;)</div><div class=\"line\">l10n.get(<span class=\"function\">(<span class=\"params\">err, resources</span>) =&gt;</span> &#123;</div><div class=\"line\">  emitter.emit(<span class=\"string\">'done'</span>, <span class=\"string\">'resources'</span>, resources)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"order-asynchronous\"><a href=\"#order-asynchronous\" class=\"headerlink\" title=\"order asynchronous\"></a>order asynchronous</h2><p><a href=\"https://wuyuchang.github.io/2016/12/09/Principle-of-Promise-Deferred/\">https://wuyuchang.github.io/2016/12/09/Principle-of-Promise-Deferred/</a></p>\n<h2 id=\"smooth\"><a href=\"#smooth\" class=\"headerlink\" title=\"smooth\"></a>smooth</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> smooth = <span class=\"function\"><span class=\"params\">method</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> deferred = <span class=\"keyword\">new</span> Deferred()</div><div class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">0</span>) <span class=\"comment\">// transform the arguments to an array</span></div><div class=\"line\">    args.push(deferred.callback()) <span class=\"comment\">// push an parameter, [file, encode, deferred.callback()]</span></div><div class=\"line\">    method.apply(<span class=\"literal\">null</span>, args) <span class=\"comment\">// call method, fs.readFile(file, encode, deferred.callback())</span></div><div class=\"line\">    <span class=\"keyword\">return</span> deferred.promise</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Event-queue-to-solve-a-number-of-SQL-with-same-result-executed\"><a href=\"#Event-queue-to-solve-a-number-of-SQL-with-same-result-executed\" class=\"headerlink\" title=\"Event queue to solve a number of SQL with same result executed\"></a>Event queue to solve a number of SQL with same result executed</h2><p>If you want to use the cache after you execute a SQL, you can just execute it, then the OS will use the cache for you to improve the performance.<br>But sometimes, there are a lot of client send a lot of SQL request with same result in first (e.g. specific activity start at 10:00am), the result of the SQL haven’t store to cache yet, so a number of request send to the OS, maybe your program will die. So it’s essential to make requests that after the first not execute, and just use the cache by the first SQL.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> events.EventEmitter()</div><div class=\"line\"><span class=\"keyword\">let</span> status = <span class=\"string\">'ready'</span></div><div class=\"line\"><span class=\"keyword\">let</span> select = <span class=\"function\"><span class=\"params\">callback</span> =&gt;</span> &#123;</div><div class=\"line\">  proxy.once(<span class=\"string\">'selected'</span>, callback)</div><div class=\"line\">  <span class=\"keyword\">if</span> (status === <span class=\"string\">'ready'</span>) &#123;</div><div class=\"line\">    status = <span class=\"string\">'pending'</span></div><div class=\"line\">    db.select(<span class=\"string\">'sql'</span>, result =&gt; &#123;</div><div class=\"line\">      proxy.emit(<span class=\"string\">'selected'</span>, result)</div><div class=\"line\">      status = <span class=\"string\">'ready'</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"asynchronous\"><a href=\"#asynchronous\" class=\"headerlink\" title=\"asynchronous\"></a>asynchronous</h2><p>Asynchronous is a good stuff, you can execute I/O operate without wait it. It’s a good way to improve the CPU usage rate.<br>Sometimes, we have multiple I/O operates, and these are associated, we want to do some action after all of the I/O operates finished. What can we do? You may do like this below.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">fs.readFile(path, <span class=\"string\">'utf8'</span>, (err, template) =&gt; &#123;</div><div class=\"line\">  db.query(sql, (err, data) =&gt; &#123;</div><div class=\"line\">    l10n.get(<span class=\"function\">(<span class=\"params\">err, resources</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// action</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>It’s easy to do that right? But mention the callback, you write 3 level callback then do the action. Think about it, if you have to do 4 or 5 I/O operate, and you do action after all of theses finished. so you may write ‘}) }) }) }) })’, seems painful to maintain the program.</p>\n<p>Anyway, we don’t do above, that is so stupid. We can make these I/O operate in first level without put an operate in to another callback. Read below.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> after = <span class=\"function\">(<span class=\"params\">times, callback</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"keyword\">let</span> result = &#123;&#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">key, value</span>) =&gt;</span> &#123;</div><div class=\"line\">    result[key] = value</div><div class=\"line\">    count++</div><div class=\"line\">    <span class=\"keyword\">if</span> (count === times) &#123;</div><div class=\"line\">      callback(results)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> emitter = <span class=\"keyword\">new</span> events.Emitter()</div><div class=\"line\"><span class=\"keyword\">let</span> done = after(times, render)</div><div class=\"line\"></div><div class=\"line\">emitter.on(<span class=\"string\">'done'</span>, done)</div><div class=\"line\">emitter.on(<span class=\"string\">'done'</span>, other)</div><div class=\"line\"></div><div class=\"line\">fs.readFile(template_path, <span class=\"string\">'utf8'</span>, (err, template) =&gt; &#123;</div><div class=\"line\">  emitter.emit(<span class=\"string\">'done'</span>, <span class=\"string\">'template'</span>, tempalte)</div><div class=\"line\">&#125;)</div><div class=\"line\">db.query(sql, (err, data) =&gt; &#123;</div><div class=\"line\">  emitter.emit(<span class=\"string\">'done'</span>, <span class=\"string\">'data'</span>, data)</div><div class=\"line\">&#125;)</div><div class=\"line\">l10n.get(<span class=\"function\">(<span class=\"params\">err, resources</span>) =&gt;</span> &#123;</div><div class=\"line\">  emitter.emit(<span class=\"string\">'done'</span>, <span class=\"string\">'resources'</span>, resources)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"order-asynchronous\"><a href=\"#order-asynchronous\" class=\"headerlink\" title=\"order asynchronous\"></a>order asynchronous</h2><p><a href=\"https://wuyuchang.github.io/2016/12/09/Principle-of-Promise-Deferred/\">https://wuyuchang.github.io/2016/12/09/Principle-of-Promise-Deferred/</a></p>\n<h2 id=\"smooth\"><a href=\"#smooth\" class=\"headerlink\" title=\"smooth\"></a>smooth</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> smooth = <span class=\"function\"><span class=\"params\">method</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> deferred = <span class=\"keyword\">new</span> Deferred()</div><div class=\"line\">    <span class=\"keyword\">let</span> args = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">0</span>) <span class=\"comment\">// transform the arguments to an array</span></div><div class=\"line\">    args.push(deferred.callback()) <span class=\"comment\">// push an parameter, [file, encode, deferred.callback()]</span></div><div class=\"line\">    method.apply(<span class=\"literal\">null</span>, args) <span class=\"comment\">// call method, fs.readFile(file, encode, deferred.callback())</span></div><div class=\"line\">    <span class=\"keyword\">return</span> deferred.promise</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"}],"PostAsset":[{"_id":"source/_posts/web-server/default_server.png","slug":"default_server.png","post":"cj32sqk1g00041kle66cgk43e","modified":0,"renderable":0},{"_id":"source/_posts/web-server/response_header.png","slug":"response_header.png","post":"cj32sqk1g00041kle66cgk43e","modified":0,"renderable":0},{"_id":"source/_posts/web-server/response_header_safe.png","slug":"response_header_safe.png","post":"cj32sqk1g00041kle66cgk43e","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cj32sqk0p00001klej4ftmakb","tag_id":"cj32sqk1500021kle0gmtj8vo","_id":"cj32sqk1s00071kle5eklbf38"},{"post_id":"cj32sqk1n00051klecay5u85t","tag_id":"cj32sqk1500021kle0gmtj8vo","_id":"cj32sqk1t00081klejzrhwjjg"},{"post_id":"cj32sqk0x00011kleece7pork","tag_id":"cj32sqk1500021kle0gmtj8vo","_id":"cj32sqk1u00091klekeotqxrn"}],"Tag":[{"name":"Node.js","_id":"cj32sqk1500021kle0gmtj8vo"}]}}