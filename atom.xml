<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yuchang Wu&#39;s blog</title>
  
  <subtitle>Don&#39;t forget your original intention</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.afacat.com/"/>
  <updated>2019-06-29T09:35:41.000Z</updated>
  <id>https://blog.afacat.com/</id>
  
  <author>
    <name>Yuchang Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信JSSDK测试接口的Node实现</title>
    <link href="https://blog.afacat.com/2017/07/13/wechat-jssdk/"/>
    <id>https://blog.afacat.com/2017/07/13/wechat-jssdk/</id>
    <published>2017-07-13T08:30:56.000Z</published>
    <updated>2019-06-29T09:35:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>做了一个网站，放到线上，用微信打开，点击分享，可是分享后发给朋友的链接卡片是微信默认自带的，如下：</p><img src="/2017/07/13/wechat-jssdk/default_share.png" title="默认分享"><br>这标题，描述以及图片是默认自带的，丑不说，分享给别人还以为是盗号网站呢，而接入微信的JSSDK后，分享可以自定义内容，如下：<img src="/2017/07/13/wechat-jssdk/jssdk_share.png" title="接口分享"><br>我承认，虽然这分享的标题和内容也并不正经，但这不妨碍我表达**我们可以通过微信JSSDK定义分享内容**，接下来我们将一步一步从零实现JSSDK从后端Node.js的接入。<h2 id="成为测试公众号开发者"><a href="#成为测试公众号开发者" class="headerlink" title="成为测试公众号开发者"></a>成为测试公众号开发者</h2><h3 id="登录测试公众号后台"><a href="#登录测试公众号后台" class="headerlink" title="登录测试公众号后台"></a>登录测试公众号后台</h3><p>首先我们需要在<a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="noopener">微信公众平台</a>申请测试接口，地址：<a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login</a><br>使用微信扫描登录后，即可来微信公众平台测试账号系统。</p><h3 id="成为测试公众号开发者-1"><a href="#成为测试公众号开发者-1" class="headerlink" title="成为测试公众号开发者"></a>成为测试公众号开发者</h3><p>其次在微信公众平台测试账号中，扫描测试号二维码，成为测试公众号的开发者</p><h2 id="接口配置信息"><a href="#接口配置信息" class="headerlink" title="接口配置信息"></a>接口配置信息</h2><h3 id="修改接口配置信息"><a href="#修改接口配置信息" class="headerlink" title="修改接口配置信息"></a>修改接口配置信息</h3><ol><li>URL地址必须是你服务器上的地址，此地址要能通过浏览器的地址栏访问到（没有服务器？没关系，一会儿我们搭建一个）<br>假设我这里填写的服务器地址是”<a href="http://www.your_server_name.com/wxJssdk&quot;" target="_blank" rel="noopener">http://www.your_server_name.com/wxJssdk&quot;</a></li><li>Token你可以随意填写，用作生成签名，（不知道签名？没关系，一会儿会用到这东西的）<br>假设我这里填写的Token是”<a href>jegfjaeghfuccawegfgjdbh</a>“</li></ol><p>此时点击提交是会提示配置失败的，因为在提交的时候，微信是会请求你的服务器地址，而你的当前配置的地址并不能访问，所以会提示配置失败。不过别急，我们先来搭建一个简单的Node服务器，让微信能够访问该服务器。</p><h3 id="搭建简单的Node服务器"><a href="#搭建简单的Node服务器" class="headerlink" title="搭建简单的Node服务器"></a>搭建简单的Node服务器</h3><p>我们需要在<a href="http://www.your_server_name.com" target="_blank" rel="noopener">http://www.your_server_name.com</a> 这个域名上搭建一个服务器，并且曝出一个接口为<code>/wxJssdk</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/wxJssdk'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.send(<span class="string">'请求成功了了了了'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">80</span>, err =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(!err) <span class="built_in">console</span>.log(<span class="string">'connect succeed'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>现在我们在地址栏中访问<a href="http://www.your_server_name.com/wxJssdk" target="_blank" rel="noopener">http://www.your_server_name.com/wxJssdk</a> ，如果页面显示“请求成功了了了了”，则进入到下一步，如果没有成功的话，检查一下你的服务器是否开启Node服务器，如：<code>node index.js</code></p><p>此时保存微信测试公众号后台的接口配置信息，仍然会提示配置失败，这是因为我们没有按照它的要求返回。</p><h3 id="根据微信测试公众号请求信息返回对应内容"><a href="#根据微信测试公众号请求信息返回对应内容" class="headerlink" title="根据微信测试公众号请求信息返回对应内容"></a>根据微信测试公众号请求信息返回对应内容</h3><p>根据<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421135319" target="_blank" rel="noopener">微信公众号开发文档接入指南</a>，微信在请求我们配置的接口时，会带上如下信息</p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">signature</td><td align="left">微信加密签名，signature结合了开发者填写的token参数和请求中的timestamp参数、nonce参数。</td></tr><tr><td align="left">timestamp</td><td align="left">时间戳</td></tr><tr><td align="left">nonce</td><td align="left">随机数</td></tr><tr><td align="left">echostr</td><td align="left">随机字符串</td></tr><tr><td align="left">微信服务器会通过GET请求，来请求我们所配置的接口，并带上以上表格的信息，而我们必须按照以下要求，将微信发送的信息进行要求校验，以确保是微信发送的信息，其中校验流程如下：</td><td align="left"></td></tr></tbody></table><blockquote><p>1）将token、timestamp、nonce三个参数进行字典序排序<br>2）将三个参数字符串拼接成一个字符串进行sha1加密<br>3）开发者获得加密后的字符串可与signature对比，标识该请求来源于微信</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> sha1 = <span class="built_in">require</span>(<span class="string">'sha1'</span>)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/wxJssdk'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> wx = req.query</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> token = <span class="string">'jegfjaeghfuccawegfgjdbh'</span></span><br><span class="line">  <span class="keyword">let</span> timestamp = wx.timestamp</span><br><span class="line">  <span class="keyword">let</span> nonce = wx.nonce</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1）将token、timestamp、nonce三个参数进行字典序排序</span></span><br><span class="line">  <span class="keyword">let</span> list = [token, timestamp, nonce].sort()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2）将三个参数字符串拼接成一个字符串进行sha1加密</span></span><br><span class="line">  <span class="keyword">let</span> str = list.join(<span class="string">''</span>)</span><br><span class="line">  <span class="keyword">let</span> result = sha1(str)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3）开发者获得加密后的字符串可与signature对比，标识该请求来源于微信</span></span><br><span class="line">  <span class="keyword">if</span> (result === wx.signature) &#123;</span><br><span class="line">    res.send(wx.echostr) <span class="comment">// 返回微信传来的echostr，表示校验成功，此处不能返回其它</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.send(<span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>此时我们重启Node服务器，再次保存接口配置信息即可配置成功。</p><h2 id="微信JSSDK使用步骤"><a href="#微信JSSDK使用步骤" class="headerlink" title="微信JSSDK使用步骤"></a>微信JSSDK使用步骤</h2><p>根据<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421141115" target="_blank" rel="noopener">微信JSSDK说明文档</a>，我们需要完成如下：</p><h3 id="填写安全域名"><a href="#填写安全域名" class="headerlink" title="填写安全域名"></a>填写安全域名</h3><p>登录微信公众平台进入“公众号设置”的“功能设置”里填写“JS接口安全域名”，即要调用接口的域名，不包含协议</p><h3 id="前端引入JS"><a href="#前端引入JS" class="headerlink" title="前端引入JS"></a>前端引入JS</h3><p>在需要调用JS接口的页面引入此JS文件，（支持https）：<a href="http://res.wx.qq.com/open/js/jweixin-1.2.0.js" target="_blank" rel="noopener">http://res.wx.qq.com/open/js/jweixin-1.2.0.js</a></p><h3 id="填写接口的配置信息"><a href="#填写接口的配置信息" class="headerlink" title="填写接口的配置信息"></a>填写接口的配置信息</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">  debug: <span class="literal">true</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class="line">  appId: <span class="string">''</span>, <span class="comment">// 必填，公众号的唯一标识</span></span><br><span class="line">  timestamp: , <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">  nonceStr: <span class="string">''</span>, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">  signature: <span class="string">''</span>,<span class="comment">// 必填，签名</span></span><br><span class="line">  jsApiList: [] <span class="comment">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="调用接口"><a href="#调用接口" class="headerlink" title="调用接口"></a>调用接口</h3><p>做你前端该做的，调用微信分享接口，或微信提供的其它接口，whatever you need，当然，这并不是我们所要讲的重点，我们接下来要看一下微信的配置信息从哪获取</p><h2 id="在Node服务器中生成jssdk所需要的配置信息"><a href="#在Node服务器中生成jssdk所需要的配置信息" class="headerlink" title="在Node服务器中生成jssdk所需要的配置信息"></a>在Node服务器中生成jssdk所需要的配置信息</h2><p>从上一节可以看到，调用微信JSSDK需要以下信息</p><ol><li>appId</li><li>timestamp</li><li>nonceStr</li><li>signature</li><li>jsApiList</li></ol><p>其中：</p><ol><li>第1项appId是测试公众号后台的appId，我们已知</li><li>第2项时间戳我们也可以自己生成</li><li>第3项nonceStr可以随意填写，你可以理解为密钥</li><li>第4项signature则需要我们按要求生成</li><li>第5项是所需要接口的接口名</li></ol><h3 id="生成signature"><a href="#生成signature" class="headerlink" title="生成signature"></a>生成signature</h3><blockquote><p>生成签名之前必须先了解一下jsapi_ticket，jsapi_ticket是公众号用于调用微信JS接口的临时票据。正常情况下，jsapi_ticket的有效期为7200秒，通过access_token来获取。由于获取jsapi_ticket的api调用次数非常有限，频繁刷新jsapi_ticket会导致api调用受限，影响自身业务，开发者必须在自己的服务全局缓存jsapi_ticket 。</p></blockquote><p>为了保证我们appid，appsecret，nonceStr等信息不在前端曝露，我们以下步骤将在服务器上进行操作，以免他人盗用信息获取（注：微信请求有每日次数限制，一旦超出，则无法使用，具体请求次数限制在微信公众号后台中可查看）</p><h4 id="生成access-token"><a href="#生成access-token" class="headerlink" title="生成access_token"></a>生成access_token</h4><p>根据微信开发文档[获取access_token文档说明]，我们需要将微信测试公众号后台的appid和和appsecret以GET的请求方式向<a href="https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET" target="_blank" rel="noopener">https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&amp;appid=APPID&amp;secret=APPSECRET</a> 发起请求获取token，请求成功后我们会获得下返回JSON转化的字符串</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"access_token"</span>:<span class="string">"ACCESS_TOKEN"</span>,<span class="attr">"expires_in"</span>:<span class="number">7200</span>&#125;</span><br></pre></td></tr></table></figure><p>具体请求代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> grant_type = <span class="string">'client_credential'</span></span><br><span class="line"><span class="keyword">const</span> appid = <span class="string">'your app id'</span></span><br><span class="line"><span class="keyword">const</span> secret = <span class="string">'your app secret'</span></span><br><span class="line"></span><br><span class="line">request(<span class="string">'https://api.weixin.qq.com/cgi-bin/token?grant_type='</span> + grant_type + <span class="string">'&amp;appid='</span> + appid + <span class="string">'&amp;secret='</span> + secret, (err, response, body) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> access_toekn = <span class="built_in">JSON</span>.parse(body).access_token</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="获取jsapi-ticket"><a href="#获取jsapi-ticket" class="headerlink" title="获取jsapi_ticket"></a>获取jsapi_ticket</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> grant_type = <span class="string">'client_credential'</span></span><br><span class="line"><span class="keyword">const</span> appid = <span class="string">'your app id'</span></span><br><span class="line"><span class="keyword">const</span> secret = <span class="string">'your app secret'</span></span><br><span class="line"></span><br><span class="line">request(<span class="string">'https://api.weixin.qq.com/cgi-bin/token?grant_type='</span> + grant_type + <span class="string">'&amp;appid='</span> + appid + <span class="string">'&amp;secret='</span> + secret, (err, response, body) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> access_toekn = <span class="built_in">JSON</span>.parse(body).access_token</span><br><span class="line"></span><br><span class="line">  request(<span class="string">'https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token='</span> + access_token + <span class="string">'&amp;type=jsapi'</span>, (err, response, body) =&gt; &#123;</span><br><span class="line">     <span class="keyword">let</span> jsapi_ticket = <span class="built_in">JSON</span>.parse(body).ticket</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="生成签名"><a href="#生成签名" class="headerlink" title="生成签名"></a>生成签名</h4><p>生成签名的步骤和最开始的<code>/wxJssdk</code>的算法是一致的，具体如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jsapi_ticket = jsapi_ticket  <span class="comment">// 上一步从获取的jsapi_ticket</span></span><br><span class="line"><span class="keyword">let</span> nonce_str = <span class="string">'123456'</span>    <span class="comment">// 密钥，字符串任意，可以随机生成</span></span><br><span class="line"><span class="keyword">let</span> timestamp = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()  <span class="comment">// 时间戳</span></span><br><span class="line"><span class="keyword">let</span> url = req.query.url   <span class="comment">// 使用接口的url链接，不包含#后的内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将请求以上字符串，先按字典排序，再以'&amp;'拼接，如下：其中j &gt; n &gt; t &gt; u，此处直接手动排序</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'jsapi_ticket='</span> + jsapi_ticket + <span class="string">'&amp;noncestr='</span> + nonce_str + <span class="string">'&amp;timestamp='</span> + timestamp + <span class="string">'&amp;url='</span> + url</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用sha1加密</span></span><br><span class="line"><span class="keyword">let</span> signature = sha1(str)</span><br></pre></td></tr></table></figure><p>连接后的代码为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> grant_type = <span class="string">'client_credential'</span></span><br><span class="line"><span class="keyword">const</span> appid = <span class="string">'your app id'</span></span><br><span class="line"><span class="keyword">const</span> secret = <span class="string">'your app secret'</span></span><br><span class="line"></span><br><span class="line">request(<span class="string">'https://api.weixin.qq.com/cgi-bin/token?grant_type='</span> + grant_type + <span class="string">'&amp;appid='</span> + appid + <span class="string">'&amp;secret='</span> + secret, (err, response, body) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> access_toekn = <span class="built_in">JSON</span>.parse(body).access_token</span><br><span class="line"></span><br><span class="line">  request(<span class="string">'https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token='</span> + access_token + <span class="string">'&amp;type=jsapi'</span>, (err, response, body) =&gt; &#123;</span><br><span class="line">     <span class="keyword">let</span> jsapi_ticket = <span class="built_in">JSON</span>.parse(body).ticket</span><br><span class="line">     <span class="keyword">let</span> nonce_str = <span class="string">'123456'</span>    <span class="comment">// 密钥，字符串任意，可以随机生成</span></span><br><span class="line">     <span class="keyword">let</span> timestamp = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()  <span class="comment">// 时间戳</span></span><br><span class="line">     <span class="keyword">let</span> url = req.query.url   <span class="comment">// 使用接口的url链接，不包含#后的内容</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">// 将请求以上字符串，先按字典排序，再以'&amp;'拼接，如下：其中j &gt; n &gt; t &gt; u，此处直接手动排序</span></span><br><span class="line">     <span class="keyword">let</span> str = <span class="string">'jsapi_ticket='</span> + jsapi_ticket + <span class="string">'&amp;noncestr='</span> + nonce_str + <span class="string">'&amp;timestamp='</span> + timestamp + <span class="string">'&amp;url='</span> + url</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 用sha1加密</span></span><br><span class="line">     <span class="keyword">let</span> signature = sha1(str)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="曝露接口，返回给前端"><a href="#曝露接口，返回给前端" class="headerlink" title="曝露接口，返回给前端"></a>曝露接口，返回给前端</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">app.post(<span class="string">'/wxJssdk/getJssdk'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> grant_type = <span class="string">'client_credential'</span></span><br><span class="line">  <span class="keyword">const</span> appid = <span class="string">'your app id'</span></span><br><span class="line">  <span class="keyword">const</span> secret = <span class="string">'your app secret'</span></span><br><span class="line"></span><br><span class="line">  request(<span class="string">'https://api.weixin.qq.com/cgi-bin/token?grant_type='</span> + grant_type + <span class="string">'&amp;appid='</span> + appid + <span class="string">'&amp;secret='</span> + secret, (err, response, body) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> access_toekn = <span class="built_in">JSON</span>.parse(body).access_token</span><br><span class="line"></span><br><span class="line">    request(<span class="string">'https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token='</span> + access_token + <span class="string">'&amp;type=jsapi'</span>, (err, response, body) =&gt; &#123;</span><br><span class="line">       <span class="keyword">let</span> jsapi_ticket = <span class="built_in">JSON</span>.parse(body).ticket</span><br><span class="line">       <span class="keyword">let</span> nonce_str = <span class="string">'123456'</span>    <span class="comment">// 密钥，字符串任意，可以随机生成</span></span><br><span class="line">       <span class="keyword">let</span> timestamp = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()  <span class="comment">// 时间戳</span></span><br><span class="line">       <span class="keyword">let</span> url = req.query.url   <span class="comment">// 使用接口的url链接，不包含#后的内容</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 将请求以上字符串，先按字典排序，再以'&amp;'拼接，如下：其中j &gt; n &gt; t &gt; u，此处直接手动排序</span></span><br><span class="line">       <span class="keyword">let</span> str = <span class="string">'jsapi_ticket='</span> + jsapi_ticket + <span class="string">'&amp;noncestr='</span> + nonce_str + <span class="string">'&amp;timestamp='</span> + timestamp + <span class="string">'&amp;url='</span> + url</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 用sha1加密</span></span><br><span class="line">       <span class="keyword">let</span> signature = sha1(str)</span><br><span class="line"></span><br><span class="line">       res.send(&#123;</span><br><span class="line">         appId: appid,</span><br><span class="line">         timestamp: timpstamp,</span><br><span class="line">         nonceStr: nonce_str,</span><br><span class="line">         signature: signature,</span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="前端请求后端接口，获取配置信息"><a href="#前端请求后端接口，获取配置信息" class="headerlink" title="前端请求后端接口，获取配置信息"></a>前端请求后端接口，获取配置信息</h2><h3 id="获取配置"><a href="#获取配置" class="headerlink" title="获取配置"></a>获取配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">'/wxJssdk/getJssdk'</span>, &#123;<span class="attr">url</span>: location.href&#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> data = response.data</span><br><span class="line"></span><br><span class="line">  wx.config(&#123;</span><br><span class="line">    debug: <span class="literal">false</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class="line">    appId: data.appId, <span class="comment">// 必填，公众号的唯一标识</span></span><br><span class="line">    timestamp: data.timestamp, <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">    nonceStr: data.nonceStr, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">    signature: data.signature,<span class="comment">// 必填，签名，见附录1</span></span><br><span class="line">    jsApiList: [<span class="string">'onMenuShareTimeline'</span>, <span class="string">'onMenuShareAppMessage'</span>] <span class="comment">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="做你想做的，比如，自定义分享"><a href="#做你想做的，比如，自定义分享" class="headerlink" title="做你想做的，比如，自定义分享"></a>做你想做的，比如，自定义分享</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (wx) &#123;</span><br><span class="line">  axios.post(<span class="string">'/wxJssdk/getJssdk'</span>, &#123;<span class="attr">url</span>: location.href&#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> data = response.data</span><br><span class="line"></span><br><span class="line">    wx.config(&#123;</span><br><span class="line">      debug: <span class="literal">false</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span></span><br><span class="line">      appId: data.appId, <span class="comment">// 必填，公众号的唯一标识</span></span><br><span class="line">      timestamp: data.timestamp, <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">      nonceStr: data.nonceStr, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">      signature: data.signature,<span class="comment">// 必填，签名，见附录1</span></span><br><span class="line">      jsApiList: [<span class="string">'onMenuShareTimeline'</span>, <span class="string">'onMenuShareAppMessage'</span>] <span class="comment">// 必填，需要使用的JS接口列表，所有JS接口列表见附录2</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    wx.ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      wx.onMenuShareTimeline(&#123;</span><br><span class="line">      title: wxShare.title,</span><br><span class="line">      desc: wxShare.desc,</span><br><span class="line">      link: wxShare.link,</span><br><span class="line">      imgUrl: wxShare.imgUrl</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      wx.onMenuShareAppMessage(&#123;</span><br><span class="line">      title: wxShare.title,</span><br><span class="line">      desc: wxShare.desc,</span><br><span class="line">      link: wxShare.link,</span><br><span class="line">      imgUrl: wxShare.imgUrl</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">    wx.error(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">       <span class="comment">// config信息验证失败会执行error函数，如签名过期导致验证失败，具体错误信息可以打开config的debug模式查看，也可以在返回的res参数中查看，对于SPA可以在这里更新签名。</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，后端配置好了，我们已经能够正常使用微信的接口了，但是微信每日接口请求是有上限的，通过2000次/天，因此如果网站上线后，一量当天访问量超过2000次你的接口将失效，而且每次都请求微信接口两次，造成请求时间浪费，所以我们需要将以上获取信息缓存在后端，避免造成接口失效以及多次请求微信后台。</p><h2 id="缓存access-token及jsapi-ticket"><a href="#缓存access-token及jsapi-ticket" class="headerlink" title="缓存access_token及jsapi_ticket"></a>缓存access_token及jsapi_ticket</h2><p>此处直接上代码，利用node_cache包进行缓存</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>)</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"><span class="keyword">const</span> sha1 = <span class="built_in">require</span>(<span class="string">'sha1'</span>)</span><br><span class="line"><span class="keyword">const</span> waterfall = <span class="built_in">require</span>(<span class="string">'async/waterfall'</span>)</span><br><span class="line"><span class="keyword">const</span> NodeCache = <span class="built_in">require</span>(<span class="string">'node-cache'</span>)</span><br><span class="line"><span class="keyword">const</span> cache = <span class="keyword">new</span> NodeCache(&#123;<span class="attr">stdTTL</span>: <span class="number">3600</span>, <span class="attr">checkperiod</span>: <span class="number">3600</span>&#125;) <span class="comment">//3600秒后过过期</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/wxJssdk'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> wx = req.query</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1）将token、timestamp、nonce三个参数进行字典序排序</span></span><br><span class="line">  <span class="keyword">let</span> token = <span class="string">'jegfjaeghfuyawegfgjdbh'</span></span><br><span class="line">  <span class="keyword">let</span> timestamp = wx.timestamp</span><br><span class="line">  <span class="keyword">let</span> nonce = wx.nonce</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2）将三个参数字符串拼接成一个字符串进行sha1加密</span></span><br><span class="line">  <span class="keyword">let</span> list = [token, timestamp, nonce]</span><br><span class="line">  <span class="keyword">let</span> result = sha1(list.sort().join(<span class="string">''</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3）开发者获得加密后的字符串可与signature对比，标识该请求来源于微信</span></span><br><span class="line">  <span class="keyword">if</span> (result === wx.signature) &#123;</span><br><span class="line">    res.send(wx.echostr)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    res.send(<span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/wxJssdk/getJssdk'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> grant_type = <span class="string">'client_credential'</span></span><br><span class="line">  <span class="keyword">let</span> appid = <span class="string">'your app id'</span></span><br><span class="line">  <span class="keyword">let</span> secret = <span class="string">'your app secret'</span> <span class="comment">// appscret</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> steps = []</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第一步，获取access_token</span></span><br><span class="line">  steps.push(<span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> steps1 = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第1.1步，从缓存中读取access_token</span></span><br><span class="line">    steps1.push(<span class="function">(<span class="params">cb1</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> access_token = cache.get(<span class="string">'access_token'</span>, (err, access_token) =&gt; &#123;</span><br><span class="line">        cb1(err, access_token)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第1.2步，缓存中有access_token则直接返回，如果没有，则从服务器中读取access_token</span></span><br><span class="line">    steps1.push(<span class="function">(<span class="params">access_token, cb1</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (access_token) &#123;</span><br><span class="line">        cb1(<span class="literal">null</span>, access_token, <span class="string">'from_cache'</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        request(<span class="string">'https://api.weixin.qq.com/cgi-bin/token?grant_type='</span> + grant_type + <span class="string">'&amp;appid='</span> + appid + <span class="string">'&amp;secret='</span> + secret, (err, response, body) =&gt; &#123;</span><br><span class="line">          cb1(err, <span class="built_in">JSON</span>.parse(body).access_token, <span class="string">'from_server'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第1.3步，如果是新从服务器取的access_token，则缓存起来，否则直接返回</span></span><br><span class="line">    steps1.push(<span class="function">(<span class="params">access_token, from_where, cb1</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (from_where === <span class="string">'from_cache'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">' === 成功从缓存中读取access_token: '</span> + access_token + <span class="string">' ==='</span>)</span><br><span class="line">        cb1(<span class="literal">null</span>, access_token)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (from_where === <span class="string">'from_server'</span>) &#123;</span><br><span class="line">        cache.set(<span class="string">'access_token'</span>, access_token, (err, success) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (!err &amp;&amp; success) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">' === 缓存已过期，从服务器中读取access_token: '</span> + access_token + <span class="string">' ==='</span>)</span><br><span class="line">            cb1(<span class="literal">null</span>, access_token)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cb1(err || <span class="string">'cache设置access_token时，出现未知错误'</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cb1(<span class="string">'1.3获取from_where时，from_where值为空'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    waterfall(steps1, (err, access_token) =&gt; &#123;</span><br><span class="line">      cb(err, access_token)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第二步，获取ticket</span></span><br><span class="line">  steps.push(<span class="function">(<span class="params">access_token, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> steps1 = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第2.1步，从缓存中读取ticket</span></span><br><span class="line">    steps1.push(<span class="function">(<span class="params">cb1</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> ticket = cache.get(<span class="string">'ticket'</span>, (err, ticket) =&gt; &#123;</span><br><span class="line">        cb1(err, ticket)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第2.2步，缓存中有ticket则直接返回，如果没有，则从服务器中读取ticket</span></span><br><span class="line">    steps1.push(<span class="function">(<span class="params">ticket, cb1</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (ticket) &#123;</span><br><span class="line">        cb1(<span class="literal">null</span>, ticket, <span class="string">'from_cache'</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        request(<span class="string">'https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token='</span> + access_token + <span class="string">'&amp;type=jsapi'</span>, (err, response, body) =&gt; &#123;</span><br><span class="line">          cb1(err, <span class="built_in">JSON</span>.parse(body).ticket, <span class="string">'from_server'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第2.3步，如果新从服务器取的ticket，则缓存起来，否则直接返回</span></span><br><span class="line">    steps1.push(<span class="function">(<span class="params">ticket, from_where, cb1</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (from_where === <span class="string">'from_cache'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">' === 成功从缓存中读取ticket: '</span> + ticket + <span class="string">' ==='</span>)</span><br><span class="line">        cb1(<span class="literal">null</span>, ticket)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (from_where === <span class="string">'from_server'</span>) &#123;</span><br><span class="line">        cache.set(<span class="string">'ticket'</span>, ticket, (err, success) =&gt; &#123;</span><br><span class="line">          <span class="keyword">if</span> (!err &amp;&amp; success) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">' === 缓存已过期，从服务器中读取ticket: '</span> + ticket + <span class="string">' ==='</span>);</span><br><span class="line">            cb1(<span class="literal">null</span>, ticket)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cb1(err || <span class="string">'cache设置ticket时，出现未知错误'</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        cb1(<span class="string">'2.3获取from_where时，from_where值为空'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    waterfall(steps1, (err, ticket) =&gt; &#123;</span><br><span class="line">      cb(err, ticket)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第三步，生成签名</span></span><br><span class="line">  steps.push(<span class="function">(<span class="params">ticket, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> jsapi_ticket = ticket</span><br><span class="line">    <span class="keyword">let</span> nonce_str = <span class="string">'123456'</span></span><br><span class="line">    <span class="keyword">let</span> timestamp = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime()</span><br><span class="line">    <span class="keyword">let</span> url = req.query.url</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">'jsapi_ticket='</span> + jsapi_ticket + <span class="string">'&amp;noncestr='</span> + nonce_str + <span class="string">'&amp;timestamp='</span> + timestamp + <span class="string">'&amp;url='</span> + url</span><br><span class="line">    <span class="keyword">let</span> signature = sha1(str)</span><br><span class="line"></span><br><span class="line">    cb(<span class="literal">null</span>, &#123;</span><br><span class="line">      appId: appid,</span><br><span class="line">      timestamp: timestamp,</span><br><span class="line">      nonceStr: nonce_str,</span><br><span class="line">      signature: signature,</span><br><span class="line">      ticket: ticket</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  waterfall(steps, (err, data) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      res.send(&#123;<span class="attr">status</span>: <span class="string">'error'</span>, <span class="attr">data</span>: err&#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.send(&#123;<span class="attr">status</span>: <span class="string">'success'</span>, <span class="attr">data</span>: data&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/wxJssdk/public'</span>, express.static(<span class="string">'public'</span>))</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">80</span>, err =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(!err) <span class="built_in">console</span>.log(<span class="string">'connect succeed'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;做了一个网站，放到线上，用微信打开，点击分享，可是分享后发给朋友的链接卡片是微信默认自带的，如下：&lt;/p&gt;
&lt;img src=&quot;/2017/07/13/wechat-jssdk/default_share.png&quot; title=&quot;默认分享&quot;&gt;
&lt;br&gt;
这标题，描述以及图片
      
    
    </summary>
    
    
      <category term="Front-End" scheme="https://blog.afacat.com/tags/Front-End/"/>
    
      <category term="Node.js" scheme="https://blog.afacat.com/tags/Node-js/"/>
    
      <category term="SDK" scheme="https://blog.afacat.com/tags/SDK/"/>
    
  </entry>
  
  <entry>
    <title>Config web server with Nginx in Linux for beginner</title>
    <link href="https://blog.afacat.com/2017/05/23/web-server/"/>
    <id>https://blog.afacat.com/2017/05/23/web-server/</id>
    <published>2017-05-23T07:16:00.000Z</published>
    <updated>2019-06-29T12:26:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>We use <strong>Debian</strong> to finish the demo.<br>Both of below are basic command line, If you are not familiar with command line in Linux, you should learn it first.</p><h2 id="Update-amp-Upgrade"><a href="#Update-amp-Upgrade" class="headerlink" title="Update &amp; Upgrade"></a>Update &amp; Upgrade</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get update</span><br><span class="line">$ apt-get upgrade</span><br></pre></td></tr></table></figure><p>You must curious what’s difference between <a href="https://linux.die.net/man/8/apt-get" target="_blank" rel="noopener">update</a> and <a href="https://linux.die.net/man/8/apt-get" target="_blank" rel="noopener">upgrade</a>.</p><blockquote><p><strong>update</strong><br>Used to re-synchronize the package index files from their sources. The indexes of available packages are fetched from the location(s) specified in /etc/apt/sources.list(5). An update should always be performed before an upgrade or dist-upgrade.<br><strong>upgrade</strong><br>Used to install the newest versions of all packages currently installed on the system from the sources enumerated in /etc/apt/sources.list(5). Packages currently installed with new versions available are retrieved and upgraded; under no circumstances are currently installed packages removed, nor are packages that are not already installed retrieved and installed. New versions of currently installed packages that cannot be upgraded without changing the install status of another package will be left at their current version. An update must be performed first so that apt-get knows that new versions of packages are available.</p></blockquote><h2 id="Htop-Vim-amp-Screen"><a href="#Htop-Vim-amp-Screen" class="headerlink" title="Htop, Vim &amp; Screen"></a>Htop, Vim &amp; Screen</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install htop</span><br><span class="line">$ apt-get install vim</span><br><span class="line">$ apt-get install screen</span><br></pre></td></tr></table></figure><p>These packages can improve your effective.<br><strong><em>htop:</em></strong> [htop][htop] command like [top][top] command, both of these are interactive process viewer for Unix systems. Its help you manage process and monitor resource easy. But [htop][htop] is more convenient than [top][top].</p><blockquote><ul><li>In ‘htop’ you can scroll the list vertically and horizontally to see all processes and complete command lines.</li><li>In ‘top’ you are subject to a delay for each unassigned key you press (especially annoying when multi-key escape sequences are triggered by accident).</li><li>‘htop’ starts faster (‘top’ seems to collect data for a while before displaying anything).</li><li>In ‘htop’ you don’t need to type the process number to kill a process, in ‘top’ you do.</li><li>In ‘htop’ you don’t need to type the process number or the priority value to renice a process, in ‘top’ you do.</li><li>‘htop’ supports mouse operation, ‘top’ doesn’t</li><li>‘top’ is older, hence, more used and tested.<br>From <a href="http://hisham.hm/htop/index.php?page=comparison" target="_blank" rel="noopener">http://hisham.hm/htop/index.php?page=comparison</a></li></ul></blockquote><p><strong><em>vim:</em></strong> [vim][vim] is almost a proper superset of [vi][vi], everything that is in vi is available in vim.</p><p><strong><em>screen:</em></strong></p><blockquote><ol><li>use multiple shell window from a single SSH session</li><li>Keep a shell active even through network disruptions</li><li>Disconnect and re-connect to a shell sessions from multiple locations</li><li>Run a long running process without maintaining an active shell session</li></ol></blockquote><p><strong>Usage</strong><br>screen uses the command <code>ctrl-a</code> that’s the control key and a lowercase “a” as a signal to send commands to screen instead of the shell.<br><em>start</em>: <code>screen</code><br><em>creating</em>: <code>Ctrl-a c</code><br><em>switch</em>: <code>Ctrl-a n</code> for the next window or <code>Ctrl-a p</code> for the previous window.<br><em>detach</em>: <code>Ctrl-a d</code><br><em>reattach</em>: <code>Ctrl-a r</code><br><em>logging</em>: <code>Ctrl-a h</code><br><em>lock</em>: <code>Ctrl-a x</code><br><em>stop</em>: <code>Ctrl-a k</code></p><h2 id="Group-amp-User"><a href="#Group-amp-User" class="headerlink" title="Group &amp; User"></a>Group &amp; User</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ groupadd</span><br><span class="line">$ groupdel</span><br><span class="line">$ useradd</span><br><span class="line">$ passwd</span><br><span class="line">$ usermod</span><br><span class="line">$ userdel</span><br></pre></td></tr></table></figure><h3 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h3><p>user add will auto create group that the name same as user</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ useradd chang <span class="comment"># craete user "chang"</span></span><br><span class="line">$ useradd -d /data/projects chang <span class="comment"># create user "chang" into /data/projects</span></span><br><span class="line">$ useradd -u 999 -g 998 chang <span class="comment"># create user with 999 for user id and 998 for group id</span></span><br><span class="line">$ useradd -G admings,webadmin,developers chang <span class="comment">#</span></span><br><span class="line">$ useradd -M chang <span class="comment"># add user "chang" without home directory</span></span><br><span class="line">$ useradd -e 2017-01-01 chang <span class="comment"># add user "chang" expire at 2017-01-02</span></span><br><span class="line">$ chage -l chang <span class="comment"># show/change user or password expire date</span></span><br><span class="line">$ useradd -e 2017-01-01 -f 45 chang <span class="comment"># password expire after 2017-01-01</span></span><br><span class="line">$ useradd -c <span class="string">"Yuchang Wu"</span> chang <span class="comment"># add user with "Yuchang Wu" infomation</span></span><br><span class="line">$ tail -1 /etc/passwd <span class="comment"># print last 1 line of the file "/etc/passwd"</span></span><br></pre></td></tr></table></figure><h3 id="the-meaning-of-files-that-user-and-group-saved"><a href="#the-meaning-of-files-that-user-and-group-saved" class="headerlink" title="the meaning of files that user and group saved"></a>the meaning of files that user and group saved</h3><ul><li>/etc/passwd – User account information.</li><li>/etc/shadow – Secure account information.</li><li>/etc/group – Group account information.</li><li>/etc/gshadow – Secure group account information.</li><li>/etc/login.defs – Shadow password suite configuration..</li></ul><p>/etc/passwd format:<br>username:password:uid:gid:userInfo:homeDirectory:shell</p><p>/etc/group format:<br>groupname:password:gidd:groupMembers</p><h3 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h3><p>for more detail, to below to see</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ usermod --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ usermod -G www chang <span class="comment"># add www group to chang, Be careful, it will remove all existing groups that user belongs, so always add the '-a' with '-G' to append new groups</span></span><br><span class="line">$ usermod -G www -a chang</span><br></pre></td></tr></table></figure><h3 id="chown"><a href="#chown" class="headerlink" title="chown"></a>chown</h3><p>change file owner</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chown -hR www:www /home/www <span class="comment"># chang the owner of /homw/www to www user and www group</span></span><br></pre></td></tr></table></figure><h2 id="Nginx-Install"><a href="#Nginx-Install" class="headerlink" title="Nginx Install"></a>Nginx Install</h2><p>As you know, you can install an application with few different methods, below we introduce three common methods to install Nginx.</p><h3 id="Install-from-Debian-repository"><a href="#Install-from-Debian-repository" class="headerlink" title="Install from Debian repository"></a>Install from Debian repository</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get install nginx</span><br></pre></td></tr></table></figure><p>you can verify the installation through:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nginx -v</span><br></pre></td></tr></table></figure><p>and you can verify which module you are install through:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nginx -V  <span class="comment"># Capital</span></span><br></pre></td></tr></table></figure><p>and you will get the default configuration like:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx version: nginx/1.6.2</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --with-cc-opt=<span class="string">'-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -D_FORTIFY_SOURCE=2'</span> --with-ld-opt=-Wl,-z,relro --prefix=/usr/share/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log --lock-path=/var/lock/nginx.lock --pid-path=/run/nginx.pid --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-debug --with-pcre-jit --with-ipv6 --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --with-http_addition_module --with-http_dav_module --with-http_geoip_module --with-http_gzip_static_module --with-http_image_filter_module --with-http_spdy_module --with-http_sub_module --with-http_xslt_module --with-mail --with-mail_ssl_module --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-auth-pam --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-dav-ext-module --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-echo --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/nginx-upstream-fair --add-module=/build/nginx-AZ8ONw/nginx-1.6.2/debian/modules/ngx_http_substitutions_filter_module</span><br></pre></td></tr></table></figure><blockquote><p>Note: this type can not get the latest version of the NGINX.</p></blockquote><h3 id="Install-from-Nginx-repository"><a href="#Install-from-Nginx-repository" class="headerlink" title="Install from Nginx repository"></a>Install from Nginx repository</h3><ol><li><p>Download the key used to sign NGINX packages and repository to the apt program keyring and add it:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://nginx.org/keys/nginx_signing.key</span><br><span class="line">$ apt-key add nginx_signing.key</span><br></pre></td></tr></table></figure></li><li><p>Add the “sources” from which NGINX Open Source packages can be obtained: open the <em>/etc/apt/sources.list</em> file in any text editor, for example, vim:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure></li><li><p>Append the lines to the file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">deb http://nginx.org/packages/mainline/debian/ codename nginx</span><br><span class="line">deb-src http://nginx.org/packages/mainline/debian/ codename nginx</span><br></pre></td></tr></table></figure><p>where:<br>codename is a codename of a Debian release:</p><table> <thead> <tr> <th>Version</th> <th>Codename</th> <th>Supported Platforms</th> </tr> </thead> <tbody> <tr> <td>7.x</td> <td>wheezy</td> <td>x86_64,i386</td> </tr> <tr> <td>8.x</td> <td>jessie</td> <td>x86_64,i386</td> </tr> </tbody> </table></li><li><p>Install</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get remove nginx-common</span><br><span class="line">$ apt-get update</span><br><span class="line">$ apt-get install nginx</span><br></pre></td></tr></table></figure></li><li><p>list the default module that nginx installed</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nginx -V</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nginx version: nginx/1.11.6</span><br><span class="line">built by gcc 4.9.2 (Debian 4.9.2-10)</span><br><span class="line">built with OpenSSL 1.0.1t  3 May 2016</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-cc-opt=<span class="string">'-g -O2 -fstack-protector-strong -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2'</span> --with-ld-opt=<span class="string">'-Wl,-z,relro -Wl,-z,now -Wl,--as-needed'</span></span><br></pre></td></tr></table></figure></li></ol><p>You can see the latest version of the NGINX installed to your system.</p><h3 id="Install-from-open-sources"><a href="#Install-from-open-sources" class="headerlink" title="Install from open sources"></a>Install from open sources</h3><p>As you see, these above two types to install NGINX is non-configurable, these are pre-build, so they already configure with default value. you can’t add or remove module and configure it. So if you want to add module or 3rd party module and apply latest security patches, I suggest you use this type to install NGINX.</p><ol><li><p>the PCRE lirary - required by NGINX core and Rewrite modules and provides support for regular expressions.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.39.tar.gz</span><br><span class="line">$ tar -zxf pcre-8.39.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> pcre-8.39</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure></li><li><p>the zlib library - required by NGINX Gzip module for headers compression.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://zlib.net/zlib-1.2.8.tar.gz</span><br><span class="line">$ tar -zxf zlib-1.2.8.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> zlib-1.2.8</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure></li><li><p>the OpenSSL library - required by NGINX SSL modules to support the HTTPS protocol.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://www.openssl.org/<span class="built_in">source</span>/openssl-1.0.2f.tar.gz</span><br><span class="line">$ tar -zxf openssl-1.0.2f.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> openssl-1.0.2f</span><br><span class="line">$ ./configure darwin64-x86_64-cc --prefix=/usr</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br></pre></td></tr></table></figure></li><li><p>The header more nginx library - required by NGINX header more nginx module to change the response header information.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://codeload.github.com/openresty/headers-more-nginx-module/tar.gz/v0.32</span><br><span class="line">$ tar -zxf v0.32</span><br></pre></td></tr></table></figure></li><li><p>download the NGINX sources</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget http://nginx.org/download/nginx-1.10.2.tar.gz</span><br><span class="line">$ tar zxf nginx-1.10.2.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> nginx-1.10.2</span><br></pre></td></tr></table></figure></li><li><p>configure NGINX<br>Add above that you download module to NGINX, so you can use the module in NGINX.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/nginx --sbin-path=/usr/<span class="built_in">local</span>/nginx/nginx --conf-path=/usr/<span class="built_in">local</span>/nginx/nginx.conf --pid-path=/usr/<span class="built_in">local</span>/nginx/nginx.pid --with-pcre=../pcre-8.39 --with-zlib=../zlib-1.2.8 --with-http_ssl_module --add-module=../headers-more-nginx-module-0.32 --with-debug</span><br></pre></td></tr></table></figure></li><li><p>link NGINX<br>Now, you can run nginx with full path – <em>/usr/local/nginx/nginx</em>, and you can browse it with localhost in any browser. But seems not convenient to run nginx with full path every time, so we link the nginx from local to sbin that you can run it without fullpath, just run <em>nginx</em>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ln -s /usr/<span class="built_in">local</span>/nginx/nginx /usr/sbin/nginx</span><br></pre></td></tr></table></figure></li></ol><p>Now you can run nginx with <em>nginx</em> command without fullpath.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nginx -V</span><br></pre></td></tr></table></figure><h2 id="Configure-web"><a href="#Configure-web" class="headerlink" title="Configure web"></a>Configure web</h2><p>Now, you can access webpage in browser with default page in NGINX via localhost. So, the nginx.conf path is put in where we set during we configure NGINX – <em>/usr/local/nginx/nginx.conf</em>.Let’s look at the file via vim.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx</span><br><span class="line">$ vim nginx.conf</span><br></pre></td></tr></table></figure><p>go to 35 line through <code>35 G</code></p><img src="/2017/05/23/web-server/default_server.png" title="NGINX default server"><p>We drop the unnecessary code, and simplify the code and explain the meaning of the code to below:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;                  <span class="comment"># listening the port, so you access the server with 80 port, this is the default port, so you can access the web server without append :80</span></span><br><span class="line">    <span class="attribute">server_name</span>  localhost;           <span class="comment"># domain</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;                      <span class="comment"># route, NGINX will receive the URL path, and adapt it with the route, if the path is same with route, then go into the brace block</span></span><br><span class="line">        <span class="attribute">root</span>   html;                  <span class="comment"># basic directory where web server in, in this demo, it is in ./html</span></span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;  <span class="comment"># access it without append the file name if it is index.html or index.htm</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now, we can configure a server by self, we make the root of the web server in <em>/home/www</em>, and write index.html, then open the nginx.conf to configure the new web server “Hello world”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /home/www</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"Hello world"</span> &gt; index.html</span><br><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/nginx</span><br><span class="line">$ vim nginx.conf</span><br></pre></td></tr></table></figure><p>We append <em>include conf.d/&#42;.conf</em> into nginx.conf at last second line. so we can add the server configure without pollute the origin configure. It will auto add all of the file that have .conf extension into <em>nginx.conf</em>.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">8080</span>;</span><br><span class="line">  <span class="attribute">server_name</span> localhost;</span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span> /home/www;</span><br><span class="line">    <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then we reload the nginx server with:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nginx -s reload</span><br></pre></td></tr></table></figure><p>Now, you can access www. <em><a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></em></p><h2 id="change-response-header"><a href="#change-response-header" class="headerlink" title="change response header"></a>change response header</h2><p>We already install the headers-more-nginx-module, so we can configure the response header. Before we configure it, let’s open the developers-tool in google-chrome, and look at the network request, we can get the response headers:</p><img src="/2017/05/23/web-server/response_header.png" title="response headers"><p>For some security reason, we don’t want to show Server information to client, so we can add the configuration to <em>hello_world.conf</em>.</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">more_set_headers</span> <span class="string">"Server"</span> <span class="string">""</span>; <span class="comment"># add this</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">8080</span>;</span><br><span class="line">  <span class="attribute">server_name</span> localhost;</span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span> /home/www;</span><br><span class="line">    <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then reload the nginx server:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nginx -s reload</span><br></pre></td></tr></table></figure><p>Then we reload the page in browser, and open the network, the Server information already drop.</p><img src="/2017/05/23/web-server/response_header_safe.png" title="response headers without server information"><p>Now, your nginx server is more safer than before you add the server information into response headers.</p><p>For more detail about the headers-more-nginx-module, see: <a href="https://github.com/openresty/headers-more-nginx-module" target="_blank" rel="noopener">https://github.com/openresty/headers-more-nginx-module</a></p><h2 id="add-module"><a href="#add-module" class="headerlink" title="add module"></a>add module</h2><p>If you want to add some module into NGINX that was installed, you have to download the module, then reconfigure NGINX with the module and compile it.</p><h2 id="Tip"><a href="#Tip" class="headerlink" title="Tip"></a>Tip</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ man order <span class="comment"># to see detail of the order</span></span><br><span class="line">$ apt-cache search package <span class="comment"># search package</span></span><br><span class="line">$ cat /etc/passwd <span class="comment"># show all users</span></span><br><span class="line">$ getent passwd <span class="comment"># show all users</span></span><br><span class="line">$ getent group <span class="comment"># show all groups</span></span><br><span class="line">$ getent group | grep username</span><br><span class="line">$ id username <span class="comment"># show username information</span></span><br><span class="line">$ groups username <span class="comment"># show which groups does username have</span></span><br><span class="line">$ dpkg-reconfigure tzdate <span class="comment"># change timezone</span></span><br></pre></td></tr></table></figure><blockquote><p>Ref:<br><em>screen</em> <a href="https://www.rackaid.com/blog/linux-screen-tutorial-and-how-to/#starting" target="_blank" rel="noopener">https://www.rackaid.com/blog/linux-screen-tutorial-and-how-to/#starting</a><br><em>useradd</em> <a href="http://www.tecmint.com/add-users-in-linux/" target="_blank" rel="noopener">http://www.tecmint.com/add-users-in-linux/</a><br><em>usermod</em> <a href="http://www.tecmint.com/usermod-command-examples/" target="_blank" rel="noopener">http://www.tecmint.com/usermod-command-examples/</a><br><em>permission</em> <a href="http://www.tecmint.com/manage-users-and-groups-in-linux/" target="_blank" rel="noopener">http://www.tecmint.com/manage-users-and-groups-in-linux/</a><br><em>nginx</em> <a href="https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/" target="_blank" rel="noopener">https://www.nginx.com/resources/admin-guide/installing-nginx-open-source/</a><br><em>headers-more-nginx-module</em> <a href="https://github.com/openresty/headers-more-nginx-module" target="_blank" rel="noopener">https://github.com/openresty/headers-more-nginx-module</a><br>[htop]: <a href="https://hisham.hm/htop/index.php" target="_blank" rel="noopener">https://hisham.hm/htop/index.php</a><br>[top]: <a href="https://linux.die.net/man/1/top" target="_blank" rel="noopener">https://linux.die.net/man/1/top</a><br>[vim]: <a href="http://www.vim.org/" target="_blank" rel="noopener">http://www.vim.org/</a><br>[vi]: <a href="http://ex-vi.sourceforge.net/" target="_blank" rel="noopener">http://ex-vi.sourceforge.net/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;We use &lt;strong&gt;Debian&lt;/strong&gt; to finish the demo.&lt;br&gt;Both of below are basic command line, If you are not familiar with command line in 
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://blog.afacat.com/tags/Linux/"/>
    
      <category term="Nginx" scheme="https://blog.afacat.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>config ThinkPHP support memcache in php5</title>
    <link href="https://blog.afacat.com/2017/01/03/config-ThinkPHP-support-memcache-in-php5/"/>
    <id>https://blog.afacat.com/2017/01/03/config-ThinkPHP-support-memcache-in-php5/</id>
    <published>2017-01-03T09:23:37.000Z</published>
    <updated>2019-06-29T12:33:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>This guide is base on Ubuntu &amp; PHP5, so you have to install PHP5 in Ubunut first, but debian is okay.</p><h2 id="Install-Memcached"><a href="#Install-Memcached" class="headerlink" title="Install Memcached"></a>Install Memcached</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo apt-get install memcached</span><br><span class="line"><span class="meta">$</span> service memcached start</span><br></pre></td></tr></table></figure><p>then execute <code>ps aux | grep memcached</code> to check it is running.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ps aux | grep memcached</span><br></pre></td></tr></table></figure><h2 id="Install-Memcache-extension-for-PHP"><a href="#Install-Memcache-extension-for-PHP" class="headerlink" title="Install Memcache extension for PHP"></a>Install Memcache extension for PHP</h2><p>Let’s go to <a href="https://pecl.php.net/package-stats.php" target="_blank" rel="noopener">https://pecl.php.net/package-stats.php</a>.</p><ol><li>download memcache package from <a href="https://pecl.php.net/package-stats.php" target="_blank" rel="noopener">https://pecl.php.net/package-stats.php</a> to your home directory.</li><li>extract it.</li><li>run phpize to gererate configure, make file.</li><li>configure</li><li>make</li><li>make install</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> wget https://pecl.php.net/get/memcache-2.2.7.tgz</span><br><span class="line"><span class="meta">$</span> tar zxf memcache-2.2.7.tgz</span><br><span class="line"><span class="meta">$</span> phpize</span><br><span class="line"><span class="meta">$</span> ./configure</span><br><span class="line"><span class="meta">$</span> sudo make</span><br><span class="line"><span class="meta">$</span> sudo make install</span><br></pre></td></tr></table></figure><h2 id="set-php-ini"><a href="#set-php-ini" class="headerlink" title="set php.ini"></a>set php.ini</h2><p>append extension=/path/to/memcache.so<br><code>php.ini</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extension=/path/to/memcache.so</span><br></pre></td></tr></table></figure><h2 id="config-ThinkPHP"><a href="#config-ThinkPHP" class="headerlink" title="config ThinkPHP"></a>config ThinkPHP</h2><p>Go into Core/conf/conf.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'DATA_CACHE_TYPE'</span> =&gt; <span class="string">'Memcache'</span>,</span><br><span class="line"><span class="string">'MEMCACHE_HOST'</span> =&gt; <span class="string">'localhost'</span>,</span><br><span class="line"><span class="string">'MEMCACHE_PORT'</span> =&gt; <span class="string">'11211'</span></span><br></pre></td></tr></table></figure><h2 id="restart-php-fpm"><a href="#restart-php-fpm" class="headerlink" title="restart php-fpm"></a>restart php-fpm</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> ps aux | grep memcached</span><br><span class="line"><span class="meta">$</span> kill pid</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This guide is base on Ubuntu &amp;amp; PHP5, so you have to install PHP5 in Ubunut first, but debian is okay.&lt;/p&gt;
&lt;h2 id=&quot;Install-Memcached&quot;&gt;
      
    
    </summary>
    
    
      <category term="Back-End" scheme="https://blog.afacat.com/tags/Back-End/"/>
    
      <category term="PHP" scheme="https://blog.afacat.com/tags/PHP/"/>
    
      <category term="Linux" scheme="https://blog.afacat.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Four commonly used form accept type</title>
    <link href="https://blog.afacat.com/2016/12/20/Four-commonly-used-form-accept-type/"/>
    <id>https://blog.afacat.com/2016/12/20/Four-commonly-used-form-accept-type/</id>
    <published>2016-12-20T03:06:46.000Z</published>
    <updated>2019-06-29T09:36:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>The blog based on Node.js server.</p><p>In front-end, we have several types to send a request to server, most of the time, we use 3 commonly below:</p><ol><li>application/json</li><li>application/x-www-form-urlencoded</li><li>multipart/form-data</li></ol><h2 id="application-json"><a href="#application-json" class="headerlink" title="application/json"></a>application/json</h2><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><h4 id="client"><a href="#client" class="headerlink" title="client"></a>client</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url: <span class="string">'/upload'</span>,</span><br><span class="line">  method: <span class="string">'GET'</span>,</span><br><span class="line">  contentType: <span class="string">'application/json'</span>,</span><br><span class="line">  data: <span class="built_in">JSON</span>.stringify(&#123;   <span class="comment">// must turn to string, whether jQuery will turn to "x-www-form-urlcoded" format</span></span><br><span class="line">    username: <span class="string">'username'</span>,</span><br><span class="line">    password: <span class="string">'password'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>Check the request header in network panel in Chrome dev-tool, you will see the request URL turn to <em><a href="http://domain/upload?{&quot;test&quot;:&quot;wuyuchang&quot;,&quot;passowrd&quot;:&quot;chang&quot;}" target="_blank" rel="noopener">http://domain/upload?{&quot;test&quot;:&quot;wuyuchang&quot;,&quot;passowrd&quot;:&quot;chang&quot;}</a></em>, it’s because GET request always append data to the request URL.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Request URL:http://domain/upload?&#123;&quot;test&quot;:&quot;username&quot;,&quot;passowrd&quot;:&quot;password&quot;&#125;</span><br><span class="line">Request Method:GET</span><br><span class="line">Content-Type:application/json</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><p>In server side, you can read the header that client send throw req.headers, and URL throw req.url, then you just compile analysis the parameter after question mark.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>)</span><br><span class="line">  <span class="keyword">let</span> param = qs.unescape(req.url.split(<span class="string">'?'</span>)[<span class="number">1</span>])</span><br><span class="line">  <span class="keyword">let</span> json = <span class="built_in">JSON</span>.parse(param)</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;).listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><p>For client, you just change the request method from ‘GET’ to ‘POST’.</p><h4 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h4><p>In server side, you can’t get content that client send directly, it’s send throw buffer, so you have to receive it by listen it throw req.on(‘data’)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> chunk = <span class="string">''</span></span><br><span class="line">  req.on(<span class="string">'data'</span>, data =&gt; &#123;</span><br><span class="line">    chunk += data</span><br><span class="line">  &#125;)</span><br><span class="line">  req.on(<span class="string">'end'</span>, err =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> json = <span class="built_in">JSON</span>.parse(chunk.toString())</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><p>It’s convenient to get JSON data throw this way.</p><h2 id="application-x-www-form-urlencoded"><a href="#application-x-www-form-urlencoded" class="headerlink" title="application/x-www-form-urlencoded"></a>application/x-www-form-urlencoded</h2><h3 id="GET-1"><a href="#GET-1" class="headerlink" title="GET"></a>GET</h3><h4 id="Client-1"><a href="#Client-1" class="headerlink" title="Client"></a>Client</h4><p>Same with above, just change the contenType to ‘application/x-www-form-urlencoded’, the jQuery wouldn’t add contentType automatic if you set method as ‘GET’.</p><h4 id="server-1"><a href="#server-1" class="headerlink" title="server"></a>server</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> json = <span class="built_in">require</span>(<span class="string">'url'</span>).parse(req.url, <span class="literal">true</span>).query</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;).listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><h3 id="POST-1"><a href="#POST-1" class="headerlink" title="POST"></a>POST</h3><p>jQuery set contentType as ‘application/x-www-form-urlencoded’ if you send request throw ‘POST’ method.</p><h4 id="server-2"><a href="#server-2" class="headerlink" title="server"></a>server</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> chunk = <span class="string">''</span></span><br><span class="line">  req.on(<span class="string">'data'</span>, data =&gt; &#123;</span><br><span class="line">    chunk += data</span><br><span class="line">  &#125;)</span><br><span class="line">  req.on(<span class="string">'end'</span>, err =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> qs = <span class="built_in">require</span>(<span class="string">'querystring'</span>)</span><br><span class="line">    <span class="keyword">let</span> json = qs.parse(chunk.toString())</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><h2 id="multipart-form-data"><a href="#multipart-form-data" class="headerlink" title="multipart/form-data"></a>multipart/form-data</h2><p><em>multipart/form-data</em> always used to send a file, of course, you also can send form without file.</p><h3 id="GET-2"><a href="#GET-2" class="headerlink" title="GET"></a>GET</h3><p>It’s same with below, the different is that if you send a file to server, the server can’t accept it.</p><h3 id="POST-2"><a href="#POST-2" class="headerlink" title="POST"></a>POST</h3><h4 id="Client-2"><a href="#Client-2" class="headerlink" title="Client"></a>Client</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/upload"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"test"</span> <span class="attr">value</span>=<span class="string">"wuyuchang"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"pwd"</span> <span class="attr">value</span>=<span class="string">"chang"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span> <span class="attr">name</span>=<span class="string">"upload"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Upload"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>the request header is different</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Content-Type:multipart/form-data; boundary=----WebKitFormBoundaryuyeyXEbnVwhZJcl6</span><br><span class="line">Request Payload:</span><br><span class="line">  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6</span><br><span class="line">  Content-Disposition: form-data; name=&quot;test&quot;</span><br><span class="line"></span><br><span class="line">  wuyuchang</span><br><span class="line">  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6</span><br><span class="line">  Content-Disposition: form-data; name=&quot;pwd&quot;</span><br><span class="line"></span><br><span class="line">  chang</span><br><span class="line">  ------WebKitFormBoundaryuyeyXEbnVwhZJcl6</span><br><span class="line">  Content-Disposition: form-data; name=&quot;upload&quot;; filename=&quot;boom.png&quot;</span><br><span class="line">  Content-Type: image/png</span><br></pre></td></tr></table></figure><p>the value of boundary is random.</p><h4 id="Server-1"><a href="#Server-1" class="headerlink" title="Server"></a>Server</h4><p>In server side you can compile it, but it’s complex, you can import a package name of ‘formidable’.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The blog based on Node.js server.&lt;/p&gt;
&lt;p&gt;In front-end, we have several types to send a request to server, most of the time, we use 3 comm
      
    
    </summary>
    
    
      <category term="Front-End" scheme="https://blog.afacat.com/tags/Front-End/"/>
    
      <category term="Node.js" scheme="https://blog.afacat.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Principle of Promise/Deferred</title>
    <link href="https://blog.afacat.com/2016/12/09/Principle-of-Promise-Deferred/"/>
    <id>https://blog.afacat.com/2016/12/09/Principle-of-Promise-Deferred/</id>
    <published>2016-12-09T02:21:08.000Z</published>
    <updated>2019-06-29T09:36:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Super-simple-realize-separate-call-an-async-and-handle-result-in-two-files"><a href="#Super-simple-realize-separate-call-an-async-and-handle-result-in-two-files" class="headerlink" title="Super simple realize separate call an async and handle result in two files."></a>Super simple realize separate call an async and handle result in two files.</h1><p>Assume we have a project base on jQuery, we have to separate call AJAX and handle result in another file.</p><p>Most of the time, we handle the result with below.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="keyword">get</span>('url', data =&gt; &#123;</span><br><span class="line">  <span class="comment">//handle data</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>But, sometimes, we don’t want to handle it in the moment. Maybe we just want to handle in another file. So we can do below.<br><code>request.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="keyword">get</span>('url', data =&gt; &#123;</span><br><span class="line">  <span class="built_in">window</span>.result(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>handle.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.result = <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// handle result</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But, we most of the time, we are not just handle the success result. We also handle error, receiving data.<br>For example.</p><p><code>request.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">  url: <span class="string">'url'</span>,</span><br><span class="line">  data: <span class="string">'data'</span>,</span><br><span class="line">  type: <span class="string">'get'</span>,</span><br><span class="line">  success: <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.deferrd.resolve(data)</span><br><span class="line">  &#125;,</span><br><span class="line">  error: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.defered.error(err)</span><br><span class="line">  &#125;,</span><br><span class="line">  complete: <span class="function"><span class="params">notify</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.deferred.notify(<span class="string">'complete'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>handle.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.deferred = &#123;</span><br><span class="line">  <span class="comment">//handle success</span></span><br><span class="line">  resolve: <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//handle error</span></span><br><span class="line">  error: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//handle complete</span></span><br><span class="line">  notify: <span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(msg)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="use-jQuery-promise-deferred"><a href="#use-jQuery-promise-deferred" class="headerlink" title="use jQuery promise/deferred"></a>use jQuery promise/deferred</h1><p>Fortunately, jQuery already implement this, so we just have to do below.<br><code>request.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.promise = $.<span class="keyword">get</span>('url')</span><br></pre></td></tr></table></figure><p><code>handle.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.promise.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// handle success</span></span><br><span class="line">&#125;, err =&gt; &#123;</span><br><span class="line">  <span class="comment">// handle error</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Promise-A"><a href="#Promise-A" class="headerlink" title="Promise/A"></a>Promise/A</h1><p>For show how promise and deferred work, we create a new and simple promise and deferred object, so that you can easy understand it.</p><h2 id="Promise-Object"><a href="#Promise-Object" class="headerlink" title="Promise Object"></a>Promise Object</h2><p>Here try to extend EventEmitter module to explain how it work.<br><code>Promise.class.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span> <span class="keyword">extends</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">  then(success, error, progress) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> success === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.once(<span class="string">'success'</span>, success)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> error === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.once(<span class="string">'error'</span>, error)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> progress === <span class="string">'progress'</span>) &#123;</span><br><span class="line">      <span class="comment">// Note, this function will be recall, so here defined the event use 'on'</span></span><br><span class="line">      <span class="keyword">this</span>.on(<span class="string">'progress'</span>, progress)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here you can see we defined three events after you pass these callback function into it through ‘then’ function.<br>So we defined the events, and we have to trigger it, so that we can execute these callbacks with the result.</p><p>Below, we defined the Deferred object.</p><h2 id="Deferred-Object"><a href="#Deferred-Object" class="headerlink" title="Deferred Object"></a>Deferred Object</h2><p>Here we defined the Deferred, these functions just emit promise, so tell them we finished.<br><code>Deferred.class.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Deferred</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.state = <span class="string">'unsuccess'</span></span><br><span class="line">  <span class="keyword">this</span>.promise = <span class="keyword">new</span> <span class="built_in">Promise</span>()</span><br><span class="line"></span><br><span class="line">  resolve(obj) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'success'</span></span><br><span class="line">    <span class="keyword">this</span>.promise.emit(<span class="string">'success'</span>, obj)</span><br><span class="line">  &#125;</span><br><span class="line">  reject(obj) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'error'</span></span><br><span class="line">    <span class="keyword">this</span>.promise.emit(<span class="string">'error'</span>, obj)</span><br><span class="line">  &#125;</span><br><span class="line">  progress(obj) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = <span class="string">'progress'</span></span><br><span class="line">    <span class="keyword">this</span>.promise.emit(<span class="string">'progress'</span>, obj)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="use-Promise-amp-Deferred"><a href="#use-Promise-amp-Deferred" class="headerlink" title="use Promise &amp; Deferred"></a>use Promise &amp; Deferred</h2><p>To implement this, we create a new Deferred, and we trigger deferred function (progress/end/error) when we finish specific action to tell Deferred that we finished.<br>Then we get promise object, and then we can store it, and call it with callback in another file.<br>So we successful separate call async and get data in two files.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promisify = <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> deferred = <span class="keyword">new</span> Deferred()</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">  res.on(<span class="string">'data'</span>, chunk =&gt; &#123;</span><br><span class="line">    result += chunk</span><br><span class="line">    deferred.progress(result)</span><br><span class="line">  &#125;)</span><br><span class="line">  res.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">    deferred.resolve(result)</span><br><span class="line">  &#125;)</span><br><span class="line">  res.on(<span class="string">'error'</span>, () =&gt; &#123;</span><br><span class="line">    deferred.reject()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> deferred.promise</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">global.result = promisify(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// in another file, this just an example to pass the result to global, so we can easy get the result, in the production, you better to pass the result in other way.</span></span><br><span class="line">global.result.then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// success</span></span><br><span class="line">&#125;, (err) =&gt; &#123;</span><br><span class="line">  <span class="comment">// error</span></span><br><span class="line">&#125;, (chunk) =&gt; &#123;</span><br><span class="line">  <span class="comment">// progress</span></span><br><span class="line">  <span class="built_in">console</span>.log(chunk)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Deferred-all"><a href="#Deferred-all" class="headerlink" title="Deferred.all()"></a>Deferred.all()</h2><p>Do some action after a several of asynchronous finished.<br><code>Deferred.class.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Deferred</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  all(promises) &#123;</span><br><span class="line">    <span class="keyword">let</span> count = promises.length</span><br><span class="line">    <span class="keyword">let</span> that = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">let</span> results = []</span><br><span class="line">    promises.forEach(<span class="function">(<span class="params">promise, i</span>) =&gt;</span> &#123;</span><br><span class="line">      promise.then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        count --</span><br><span class="line">        results[i] = data</span><br><span class="line">        <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;</span><br><span class="line">          that.resolve(results)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, err =&gt; &#123;</span><br><span class="line">      that.reject(err)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.promise</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Order-Run-asynchronous"><a href="#Order-Run-asynchronous" class="headerlink" title="Order Run asynchronous"></a>Order Run asynchronous</h2><p>Run asynchronous in order<br><code>Deferred.class.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">'./promise.class'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="title">Deferred</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.promise = <span class="keyword">new</span> <span class="built_in">Promise</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  resolve(data) &#123;</span><br><span class="line">    <span class="keyword">let</span> promise = <span class="keyword">this</span>.promise</span><br><span class="line">    <span class="keyword">let</span> handler</span><br><span class="line">    <span class="keyword">while</span>(handler = promise.queue.shift()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (handler &amp;&amp; handler.resolve) &#123;</span><br><span class="line">        <span class="keyword">let</span> ret = handler.resolve(data)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if there has next promise, then we interrupt current loop, and set next promise.queue equals current queue</span></span><br><span class="line">        <span class="keyword">if</span> (ret &amp;&amp; ret.isPromise) &#123;</span><br><span class="line">          ret.queue = promise.queue</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  reject(err) &#123;</span><br><span class="line">    <span class="keyword">let</span> promise = <span class="keyword">this</span>.promise</span><br><span class="line">    <span class="keyword">let</span> handler</span><br><span class="line">    <span class="keyword">while</span>(handler = promise.queue.shift()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (handler &amp;&amp; handler.reject) &#123;</span><br><span class="line">        <span class="keyword">let</span> ret = handler.reject(err)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if there has next promise, then we interrupt current loop, and set next promise.queue equals current queue</span></span><br><span class="line">        <span class="keyword">if</span> (ret &amp;&amp; ret.isPromise) &#123;</span><br><span class="line">          ret.queue = promise.queue</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  callback(str) &#123;</span><br><span class="line">    <span class="keyword">let</span> that = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">err, file</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> that.reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">      that.resolve(file)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>promise.class.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="title">Promise</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.queue = []</span><br><span class="line">    <span class="keyword">this</span>.isPromise = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  then(resolve, reject) &#123;</span><br><span class="line">    <span class="keyword">let</span> handler = &#123;&#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> resolve === <span class="string">'function'</span>) &#123;</span><br><span class="line">      handler.resolve = resolve</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> reject === <span class="string">'function'</span>) &#123;</span><br><span class="line">      handler.reject = reject</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.queue.push(handler)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>app.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Deferred = <span class="built_in">require</span>(<span class="string">'./deferred.class'</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> action1 = <span class="function">(<span class="params">file, encoding</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> deferred = <span class="keyword">new</span> Deferred()</span><br><span class="line">  fs.readFile(file, encoding, deferred.callback())</span><br><span class="line">  <span class="keyword">return</span> deferred.promise</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> action2 = <span class="function">(<span class="params">file, encoding</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> deferred = <span class="keyword">new</span> Deferred()</span><br><span class="line">  fs.readFile(file, encoding, deferred.callback())</span><br><span class="line">  <span class="keyword">return</span> deferred.promise</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">action1(<span class="string">'./file1.txt'</span>, <span class="string">'utf8'</span>).then(<span class="function"><span class="params">file1</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> action2(file1.trim(), <span class="string">'utf8'</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">file2</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(file2)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Super-simple-realize-separate-call-an-async-and-handle-result-in-two-files&quot;&gt;&lt;a href=&quot;#Super-simple-realize-separate-call-an-async-an
      
    
    </summary>
    
    
      <category term="Front-End" scheme="https://blog.afacat.com/tags/Front-End/"/>
    
      <category term="Node.js" scheme="https://blog.afacat.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js</title>
    <link href="https://blog.afacat.com/2016/12/08/node-js/"/>
    <id>https://blog.afacat.com/2016/12/08/node-js/</id>
    <published>2016-12-08T12:35:41.000Z</published>
    <updated>2019-06-29T09:36:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Perform-query-SQL-for-server-during-variety-of-requests-with-same-result-at-specific-time"><a href="#Perform-query-SQL-for-server-during-variety-of-requests-with-same-result-at-specific-time" class="headerlink" title="Perform query SQL for server during variety of requests with same result at specific time"></a>Perform query SQL for server during variety of requests with same result at specific time</h2><p>Browser auto cache the result of AJAX for performance, but sometimes we get a special activity which a lot of user will access server for same data at specific time, if we don’t handle it, the server may die. So we can use event queue to handle the problem.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> events.EventEmitter()</span><br><span class="line"><span class="keyword">let</span> status = <span class="string">'ready'</span></span><br><span class="line"><span class="keyword">let</span> select = <span class="function"><span class="params">callback</span> =&gt;</span> &#123;</span><br><span class="line">  proxy.once(<span class="string">'selected'</span>, callback)  <span class="comment">// bind event for every request</span></span><br><span class="line">  <span class="keyword">if</span> (status === <span class="string">'ready'</span>) &#123;</span><br><span class="line">    status = <span class="string">'pending'</span></span><br><span class="line">    db.select(<span class="string">'sql'</span>, result =&gt; &#123;      <span class="comment">// if SQL query finished,</span></span><br><span class="line">      proxy.emit(<span class="string">'selected'</span>, result)  <span class="comment">// then trigger event</span></span><br><span class="line">      status = <span class="string">'ready'</span>                <span class="comment">// and recover status</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="asynchronous"><a href="#asynchronous" class="headerlink" title="asynchronous"></a>asynchronous</h2><p>Asynchronous is a good object, you can run I/O operate without wait it. It’s a good way to improve the CPU usage rate.<br>Sometimes, we have multiple I/O operates, and these are associated, we want to do some action after all of the I/O operates finished. What can we do? You may do like this below.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(path, <span class="string">'utf8'</span>, (err, template) =&gt; &#123;</span><br><span class="line">  db.query(sql, (err, data) =&gt; &#123;</span><br><span class="line">    l10n.get(<span class="function">(<span class="params">err, resources</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// action</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>It’s easy to do that right? But mention the callback, you run the action in the 3 level callbacks. Think about it, if you have to do 4 or 5 I/O operate, and you do action after all of theses finished. so you may write ‘}) }) }) }) })’, seems painful to maintain the program.</p><p>Anyway, we don’t do above, that is so stupid. We can make these I/O operate in first level without put an operate in to another callback. Read below.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> after = <span class="function">(<span class="params">times, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> result = &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">key, value</span>) =&gt;</span> &#123;</span><br><span class="line">    result[key] = value</span><br><span class="line">    count++</span><br><span class="line">    <span class="keyword">if</span> (count === times) &#123;</span><br><span class="line">      callback(results)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> emitter = <span class="keyword">new</span> events.Emitter()</span><br><span class="line"><span class="keyword">let</span> done = after(times, render)</span><br><span class="line"></span><br><span class="line">emitter.on(<span class="string">'done'</span>, done)</span><br><span class="line">emitter.on(<span class="string">'done'</span>, other)</span><br><span class="line"></span><br><span class="line">fs.readFile(template_path, <span class="string">'utf8'</span>, (err, template) =&gt; &#123;</span><br><span class="line">  emitter.emit(<span class="string">'done'</span>, <span class="string">'template'</span>, tempalte)</span><br><span class="line">&#125;)</span><br><span class="line">db.query(sql, (err, data) =&gt; &#123;</span><br><span class="line">  emitter.emit(<span class="string">'done'</span>, <span class="string">'data'</span>, data)</span><br><span class="line">&#125;)</span><br><span class="line">l10n.get(<span class="function">(<span class="params">err, resources</span>) =&gt;</span> &#123;</span><br><span class="line">  emitter.emit(<span class="string">'done'</span>, <span class="string">'resources'</span>, resources)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>similar with <code>async</code> in waterfall</p></blockquote><h2 id="order-asynchronous"><a href="#order-asynchronous" class="headerlink" title="order asynchronous"></a>order asynchronous</h2><p><a href="https://wuyuchang.github.io/2016/12/09/Principle-of-Promise-Deferred/" target="_blank" rel="noopener">https://wuyuchang.github.io/2016/12/09/Principle-of-Promise-Deferred/</a></p><h2 id="smooth"><a href="#smooth" class="headerlink" title="smooth"></a>smooth</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> smooth = <span class="function"><span class="params">method</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> deferred = <span class="keyword">new</span> Deferred()</span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">0</span>) <span class="comment">// transform the arguments to an array</span></span><br><span class="line">    args.push(deferred.callback()) <span class="comment">// push an parameter, [file, encode, deferred.callback()]</span></span><br><span class="line">    method.apply(<span class="literal">null</span>, args) <span class="comment">// call method, fs.readFile(file, encode, deferred.callback())</span></span><br><span class="line">    <span class="keyword">return</span> deferred.promise</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Perform-query-SQL-for-server-during-variety-of-requests-with-same-result-at-specific-time&quot;&gt;&lt;a href=&quot;#Perform-query-SQL-for-server-du
      
    
    </summary>
    
    
      <category term="Front-End" scheme="https://blog.afacat.com/tags/Front-End/"/>
    
      <category term="Node.js" scheme="https://blog.afacat.com/tags/Node-js/"/>
    
      <category term="MongoDB" scheme="https://blog.afacat.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Math.random骗术-无聊篇</title>
    <link href="https://blog.afacat.com/2015/09/23/Math-random%E9%AA%97%E6%9C%AF-%E6%97%A0%E8%81%8A%E7%AF%87/"/>
    <id>https://blog.afacat.com/2015/09/23/Math-random骗术-无聊篇/</id>
    <published>2015-09-23T02:10:00.000Z</published>
    <updated>2019-06-29T11:54:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>我觉得今天我运气特好，今天我们来赌一赌，我们来搞个随机数，Math.floor(Math.random() * 10)，如果这个数等于0到7，这个月的饭，我全请了，如果是8或9，你就请一个礼拜成不？<br>于是你想了想，万一我真运气这么好，那不是完了。。于是我追加说，我们来玩5盘，5盘中有一盘0到7，就我请，如果全是8或9，你就请。想想你还是相信概率这东西的，于是和我赌了。。<br>其实，在赌前，我就以经执行了下面这段脚本并测试通过：</p><img src="/2015/09/23/Math-random骗术-无聊篇/img_1.png"><p>然后，我又悄悄的把他清空了。<br>于是结果是：</p><img src="/2015/09/23/Math-random骗术-无聊篇/img_2.png"><p>。。。。。。。。。。。。。你跳楼去了。。从此不相信概率。。。</p><p>你们公司有前端妹子？快去骗骗她吧！</p><p>改进：<br>后来，被这个前端妹纸发现了问题，于是我把问题纠正了，去骗下一个妹纸，于是，我在行骗之前，执行了如下脚本：</p><img src="/2015/09/23/Math-random骗术-无聊篇/img_3.png"><p>于是关掉标签页，新开一个，不执行测试，执行了上面的函数。<br>直到现在妹纸还不知道是什么原因。。。</p><p>后来妹子一火，你在来试试呀，在来试试我就信，于是我想着应该要我能控制这个随机数，于是我又加了：</p><img src="/2015/09/23/Math-random骗术-无聊篇/img_4.png"><p>当我要赌的时候，我就点击一下页面的右半部分，当怕妹子怀疑的时候，我就点击页面的左半部分。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我觉得今天我运气特好，今天我们来赌一赌，我们来搞个随机数，Math.floor(Math.random() * 10)，如果这个数等于0到7，这个月的饭，我全请了，如果是8或9，你就请一个礼拜成不？&lt;br&gt;于是你想了想，万一我真运气这么好，那不是完了。。于是我追加说，我们来
      
    
    </summary>
    
    
      <category term="Front-End" scheme="https://blog.afacat.com/tags/Front-End/"/>
    
      <category term="JavaScript" scheme="https://blog.afacat.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>浅谈服务端模板到客户端模板</title>
    <link href="https://blog.afacat.com/2015/09/21/%E6%B5%85%E8%B0%88%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%A8%A1%E6%9D%BF%E5%88%B0%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%A8%A1%E6%9D%BF/"/>
    <id>https://blog.afacat.com/2015/09/21/浅谈服务端模板到客户端模板/</id>
    <published>2015-09-21T11:10:00.000Z</published>
    <updated>2019-06-29T11:51:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>谈起客户端模板技术，要先从服务端MVC说起。</p><h2 id="服务器端MVC"><a href="#服务器端MVC" class="headerlink" title="服务器端MVC"></a>服务器端MVC</h2><p>当客户通过浏览器访问URL，服务器端会获取到客户端传来的URL并通过路由(router)解析URL到不同的控制器(controller)，再通过模板技术将模板中渲染(render)成到页面(HTML)。</p><p>在开发过程中路由可能由服务器配置，可能自己手写，也可能由框架实现。路由通过获取URL，得知要执行哪个控制器，而控制器再去从模型(model)获取数据，模型在去从数据库(database)获取数据，数据库返回数据到模型，再返回至控制器。于是控制器在通过模板技术将从数据库获取的数据替换模板中预定义的内容。最后在返回给客户端浏览器。这是一个完整的前端交互到路由到MVC的流程。</p><img src="/2015/09/21/浅谈服务端模板到客户端模板/img_1.png"><p>而在模板引擎就是我们的视图(view)部分，接下来，我们来看模板视图。</p><h2 id="服务器端模板技术"><a href="#服务器端模板技术" class="headerlink" title="服务器端模板技术"></a>服务器端模板技术</h2><p>接下来我们先看一段服务器端的模板(handlebars)代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;&#123;#names&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;&#123;/names&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上是一段handlebars的代码，</p><p>控制器去从模型中获取以下数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">     <span class="string">"title"</span>: <span class="string">"Story"</span>,</span><br><span class="line">     <span class="string">"names"</span>: [</span><br><span class="line">         &#123;<span class="string">"name"</span>: <span class="string">"Tarzan"</span>&#125;,</span><br><span class="line">         &#123;<span class="string">"name"</span>: <span class="string">"Jane"</span>&#125;</span><br><span class="line">     ]</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>本文中不谈及数据是如何获取的。在这里获取到数据后，我们可以通过模板引擎将上面的模板解析成如下的HTML代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Story<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tarzan<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Jane<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>而后只需要将此代码以HTML的格式返回给客户端即能正常显示。</p><p>这样看来没什么问题，但服务器端模板技术实际上是依赖于控制器，也就是控制器中必须要有访问模板的方法，换句话说，要在客户端浏览器上展示这个渲染出来的页面，需要在服务器端的控制器上去写代码。而且，模板引擎还是后端定的，在后端渲染解析，而维护模板有时还需要前后端共同参与 。因此后端模板在web开发领域中一直是一个前后化分不清的地位。</p><p>因此，衍生出了试图前端模板技术，试图将前后端的分工化分的更明细。</p><h2 id="客户端-浏览器-端模板技术"><a href="#客户端-浏览器-端模板技术" class="headerlink" title="客户端(浏览器)端模板技术"></a>客户端(浏览器)端模板技术</h2><p>1、为了更好的化分出前后端开发领域，让HTML完全由前端处理。后端只处理数据及业务逻辑。</p><p>2、随着前端交互的复杂性不断提升，无刷新页面数据传输与渲染越发地频繁化，我们发现传统的前端开发方式在ajax数据渲染等方面存在着一个主要问题：繁琐的数据渲染。当前端从后台通过ajax等方式或许到数据后，如果要将这个数据渲染到指定的dom元素中，则需要进行各种字符串拼接工作或者一系列创建元素的工作，还不论细节的问题（单引号双引号问题等），不管是哪一种形式，都是繁琐且费时的。同时，在可读性与维护性上也存在问题。试想，各种循环操作的字符串拼接，元素创建插入，在需要修改时，都需要重新花费不少时间与精力。</p><p>就此衍生出了前端模板技术。</p><p>浏览器端的模板技术与服务器端的模板技术实现上大体相同，以服务器端上的模板技术的代码为例，如果在客户端使用模板技术，只需要引入模板引擎对应的handlebars.js模板即可使用，而此处的数据，则由前端通过ajax向后端发起请求。而仅仅是这么一点功能，解决了后端渲染模板，前端ajax拼接生成dom的问题。并且ajax是可以缓存的，这在很大程度上减轻了服务器端的压力。但这同时也对前端的技术要求增加。</p><h2 id="展望未来-AngularJs"><a href="#展望未来-AngularJs" class="headerlink" title="展望未来(AngularJs)"></a>展望未来(AngularJs)</h2><p>未来的发展趋势是前端后端只靠json数据来进行通信：后端只处理和发送一段Json数据到前端，然后计算和模板渲染都在前端进行。而前端的改动后，形成json数据然后传回到后端。未来趋势就是：后台程序再也不做模板的任何处理。</p><p>AngularJS 的作用简单说就是就是把后台的Json值直接用html进行渲染，然后html的操作又直接在形成json传回后台。未来的后台MVC，视图不再是模板了，而是一段结构整齐标准的JSON，而这个JSON作为前台的model直接在AngularJS直接使用。或者说后台的视图是前台的模型，而整个前台就是后台的视图。后台程序再也不做模板的任何处理了。并且AngularJS可以实现双向数据绑定、依赖注入、指令、MVC、模板、模块化开发，使得更像是写后台代码、更规范、更结构化、更可控。</p><p>但是，使用AngularJS的话，数据全是通过JSON来进行前后台传输，到了浏览器端才进行数据渲染， 对于SEO，这是一个严重的问题，并且对于庞大的JS库，首次加载时间将更长。对此可以用NodeJS作为一个中转首次加载，模板渲染在NodeJS上实现，之后，由前端实现模板渲染。而这又使前端不得不学习NodeJS。</p><p>前端在web开发领域担任的职责将越来越重要，前后端的分工也越来越明细。</p><p>引用：<br><a href="http://blog.fens.me/angularjs-route-template/、" target="_blank" rel="noopener">http://blog.fens.me/angularjs-route-template/、</a><br><a href="http://kb.cnblogs.com/page/210862/" target="_blank" rel="noopener">http://kb.cnblogs.com/page/210862/</a><br><a href="http://zhidao.baidu.com/link?url=w21FVvMy7By69ylyW3-vLVAdBDBwthHZ8qhSjj67nKE5_h8coDGefDNqUlTwAka8CfY3_LijH_S8EdmNj5h9dYBfuzyp9FfbV5gLm49D9O7&amp;qq-pf-to=pcqq.c2c" target="_blank" rel="noopener">http://zhidao.baidu.com/link?url=w21FVvMy7By69ylyW3-vLVAdBDBwthHZ8qhSjj67nKE5_h8coDGefDNqUlTwAka8CfY3_LijH_S8EdmNj5h9dYBfuzyp9FfbV5gLm49D9O7&amp;qq-pf-to=pcqq.c2c</a><br><a href="http://blog.jobbole.com/65534/" target="_blank" rel="noopener">http://blog.jobbole.com/65534/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;谈起客户端模板技术，要先从服务端MVC说起。&lt;/p&gt;
&lt;h2 id=&quot;服务器端MVC&quot;&gt;&lt;a href=&quot;#服务器端MVC&quot; class=&quot;headerlink&quot; title=&quot;服务器端MVC&quot;&gt;&lt;/a&gt;服务器端MVC&lt;/h2&gt;&lt;p&gt;当客户通过浏览器访问URL，服务器端会获
      
    
    </summary>
    
    
      <category term="Front-End" scheme="https://blog.afacat.com/tags/Front-End/"/>
    
      <category term="Back-End" scheme="https://blog.afacat.com/tags/Back-End/"/>
    
  </entry>
  
  <entry>
    <title>一些JavaScript常用方技巧</title>
    <link href="https://blog.afacat.com/2015/07/23/%E4%B8%80%E4%BA%9BJavaScript%E5%B8%B8%E7%94%A8%E6%96%B9%E6%8A%80%E5%B7%A7/"/>
    <id>https://blog.afacat.com/2015/07/23/一些JavaScript常用方技巧/</id>
    <published>2015-07-23T03:13:00.000Z</published>
    <updated>2019-06-29T11:46:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1、输入一个正整数n，从1累加到n，返回结果。（如果输入为非正整数，如：小数、0、负数、NaN或其它非数字则返回false）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ~~+n == n &amp;&amp; n &gt; <span class="number">0</span> ? n * ++n / <span class="number">2</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、用reduce计算数组的和</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, curr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> prev + curr;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>3、计算平均数（Calculator.average(3,4,5) 返回 4.）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Calculator = &#123;</span><br><span class="line">  average: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = [].reduce.call(<span class="built_in">arguments</span>, <span class="function"><span class="keyword">function</span>(<span class="params">t, n</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> t + n;</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> sum === <span class="number">0</span> ? <span class="number">0</span> : sum / <span class="built_in">arguments</span>.length;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>4、将数组中的非数字过滤（filter_list([1,2,’aasf’,’1’,’123’,123]) == [1,2,123]）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter_list</span>(<span class="params">l</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> l.filter(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> v == <span class="string">'number'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5、将键值对的对象转化为“=”号相连的字符串（solution({a: 1, b: ‘2’}) // 返回 “a = 1,b = 2”）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">solution</span>(<span class="params">pairs</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.keys(pairs)</span><br><span class="line">    .map(<span class="function"><span class="keyword">function</span>(<span class="params">k</span>) </span>&#123; <span class="keyword">return</span> k + <span class="string">' = '</span> + pairs[k] &#125;)</span><br><span class="line">    .join(<span class="string">','</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6、转数字转换为排名（0=&gt;0, 1=&gt;1st, 2=&gt;2nd, 3=&gt;3rd, 11=&gt;11th, 12=&gt;12th, 13=&gt;13th, 21=&gt;21st, 32=&gt;32nd, 111=&gt;111st, 132=&gt;132nd）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">numberToOrdinal</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> e = [<span class="string">'th'</span>,<span class="string">'st'</span>,<span class="string">'nd'</span>,<span class="string">'rd'</span>,<span class="string">'th'</span>];</span><br><span class="line">  <span class="keyword">return</span> n ?</span><br><span class="line">    n + e[</span><br><span class="line">        n % <span class="number">100</span> &gt; <span class="number">10</span> &amp;&amp; n % <span class="number">100</span> &lt; <span class="number">20</span></span><br><span class="line">        ? <span class="number">0</span></span><br><span class="line">        : <span class="built_in">Math</span>.min(n % <span class="number">10</span> ,<span class="number">4</span>)</span><br><span class="line">    ] : <span class="string">"0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">numberToOrdinal</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> suffix = <span class="string">"th"</span>;</span><br><span class="line">  <span class="keyword">if</span> (n == <span class="number">0</span>) suffix = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">if</span> (n % <span class="number">10</span> == <span class="number">1</span> &amp;&amp; n % <span class="number">100</span> != <span class="number">11</span>) suffix = <span class="string">"st"</span>;</span><br><span class="line">  <span class="keyword">if</span> (n % <span class="number">10</span> == <span class="number">2</span> &amp;&amp; n % <span class="number">100</span> != <span class="number">12</span>) suffix = <span class="string">"nd"</span>;</span><br><span class="line">  <span class="keyword">if</span> (n % <span class="number">10</span> == <span class="number">3</span> &amp;&amp; n % <span class="number">100</span> != <span class="number">13</span>) suffix = <span class="string">"rd"</span>;</span><br><span class="line">  <span class="keyword">return</span> n + suffix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;1、输入一个正整数n，从1累加到n，返回结果。（如果输入为非正整数，如：小数、0、负数、NaN或其它非数字则返回false）&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
    
      <category term="Front-End" scheme="https://blog.afacat.com/tags/Front-End/"/>
    
      <category term="JavaScript" scheme="https://blog.afacat.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>webkit内核下的mouseup后mousemove自动触发问题及解决方法</title>
    <link href="https://blog.afacat.com/2015/02/28/webkit%E5%86%85%E6%A0%B8%E4%B8%8B%E7%9A%84mouseup%E5%90%8Emousemove%E8%87%AA%E5%8A%A8%E8%A7%A6%E5%8F%91%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://blog.afacat.com/2015/02/28/webkit内核下的mouseup后mousemove自动触发问题及解决方法/</id>
    <published>2015-02-28T07:16:00.000Z</published>
    <updated>2019-06-29T12:14:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>如题，就以chrome为代表举例说明遇到mousemove的问题。<br>为<code>body</code>分别绑定<code>onmousedown</code>、<code>onmousemove</code>、<code>onmouseup</code>，并为触发时打印至控制台。代码如下（同学不要忘记<code>body</code>要全屏，并在<code>body</code>上执行操作）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.body;</span><br><span class="line"></span><br><span class="line">body.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'down'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'move'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'up'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先将鼠标移至body区内，刷页面，单击一次<code>body</code>，会发现依次打印了<code>down</code>、<code>up</code>、<code>move</code>，由此可断定是于<code>up</code>后执行的<code>move</code>。我们知道一般我们执行一次点击过程的顺序为：<code>onmousedown</code>、<code>onmousemove</code>、<code>onmouseup</code>、<code>click</code>，而在chrome中却在<code>onmouseup</code>后执行了一次<code>onmousemove</code>，此bug说不清是否有意而为之，但对于开发来说是没有必要的，因此我们就要避免此问题的出现，以免莫名多执行了一次<code>onmousemove</code>。</p><p>解决方法不高级，也就是判断是否真的移动了，从而判断是否执行<code>onmousemove</code>触发的函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.body,</span><br><span class="line">    obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">body.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'down'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.pageX === obj.x &amp;&amp; e.pageY === obj.y) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'move'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前面说过是在onmouseup后执行onmousemove，因此在这更改x,y更合理</span></span><br><span class="line">body.onmouseup = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    obj.x = e.pageX;</span><br><span class="line">    obj.y = e.pageY;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'up'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会发现，<code>onmousemove</code>恢复正常。单击依次打印：<code>down</code>、<code>up</code>。问题就此解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如题，就以chrome为代表举例说明遇到mousemove的问题。&lt;br&gt;为&lt;code&gt;body&lt;/code&gt;分别绑定&lt;code&gt;onmousedown&lt;/code&gt;、&lt;code&gt;onmousemove&lt;/code&gt;、&lt;code&gt;onmouseup&lt;/code&gt;，并为触发时
      
    
    </summary>
    
    
      <category term="Front-End" scheme="https://blog.afacat.com/tags/Front-End/"/>
    
      <category term="JavaScript" scheme="https://blog.afacat.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>userAgent判断浏览器内核,系统版本,移动设备等</title>
    <link href="https://blog.afacat.com/2015/01/25/userAgent%E5%88%A4%E6%96%AD%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8-%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC-%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87%E7%AD%89/"/>
    <id>https://blog.afacat.com/2015/01/25/userAgent判断浏览器内核-系统版本-移动设备等/</id>
    <published>2015-01-25T09:17:00.000Z</published>
    <updated>2019-06-29T11:00:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="识别浏览器呈现引擎"><a href="#识别浏览器呈现引擎" class="headerlink" title="识别浏览器呈现引擎"></a>识别浏览器呈现引擎</h2><p>为了不在全局作用域中添加多余变量，这里使用单例模式（什么是单例模式？）来封装检测脚本。检测脚本的基本代码如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> client = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> engine =  &#123;</span><br><span class="line">        ie: <span class="number">0</span>,</span><br><span class="line">        gecko: <span class="number">0</span>,</span><br><span class="line">        webkit: <span class="number">0</span>,</span><br><span class="line">        khtml: <span class="number">0</span>,</span><br><span class="line">        opera: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 具体的版本号</span></span><br><span class="line">        ver: <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        engine: engine</span><br><span class="line">    &#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>这里声明了一个名为client的全局变量，用于保存相关信息。匿名函数内部定义了一个局部变量engine，它是一个包含默认设置的对象字面量。在这个对象字面量中，每个呈现引擎都对应着一个属性，属性的默认值是0。如果检测到了哪个呈现引擎，那么就以浮点数值形式将该引擎的版本号写入相应属性。</p><p>要识别Opera，必须得检测window.opera对象。Opera5及更高版本中都有这个对象，用于保存与浏览器相关的标识信息以及与浏览器直接交互。在Opera7.6及更高版本中，调用version()方法可以返回一个表示浏览器版本的字符串，而这也是确定Opera版本的最佳方式。要检测更早的Opera，可以直接检测用户代理字符串，因为那些版本还不支持隐藏身份。不过2007底Opera的最高版本已经是9.5了，所以不太可能有人还使用7.6之前的版本。那么，检测呈现引擎的代码的第一步，就是编写如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.opera) &#123;</span><br><span class="line">    engine.ver = <span class="built_in">window</span>.opera.version();</span><br><span class="line">    engine.opra = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来检测的引擎是webkit，因为webkit的用户代理字符串中包含“Gecko”和“KHTML”这两个子字符串，所以如果先检测它们，都可能会得出错误的结论。<br>不过，Webkit的用户代理字符串中的“AppleWebkit”是独一无二的，因此检测这个字符串是最合适的。下面就是检测该字符串的示例代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ua = navigator.userAgent;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.opera) &#123;</span><br><span class="line">        engine.ver = <span class="built_in">window</span>.opera.version();</span><br><span class="line">        engine.opra = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/AppleWebkit\/(\S+)/i</span>.test(ua)) &#123;</span><br><span class="line">        engine.ver = <span class="built_in">RegExp</span>[<span class="string">'$1'</span>];</span><br><span class="line">        engine.webkit = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>接下来要测试的引擎是KHTML。同样，KHTML的用户代理字符串中也包含“Gecko”，因此在排除KHTML之前，我们无法准确检测基于Gecko的浏览器。KHTML的版本号与Webkit的版本号在用户代理字符串中的格式差不多，因此可以使用类似的正则表达式。此外，由于Konquerror 3.1及更早版本中不包含KHTML的版本，故而就要使用Konqueror的版本来代替。下面就是相应的检测代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ua = navigator.userAgent;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.opera) &#123;</span><br><span class="line">        <span class="comment">// 检测opera</span></span><br><span class="line">        engine.ver = <span class="built_in">window</span>.opera.version();</span><br><span class="line">        engine.opra = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/AppleWebkit\/(\S+)/i</span>.test(ua)) &#123;</span><br><span class="line">        <span class="comment">// 检测webkit</span></span><br><span class="line">        engine.ver = <span class="built_in">RegExp</span>[<span class="string">'$1'</span>];</span><br><span class="line">        engine.webkit = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/KHTML\/(\S+)/i</span>.test(ua) || <span class="regexp">/Konqueror\/([^;]+)/i</span>.test(ua)) &#123;</span><br><span class="line">        <span class="comment">// 检测khtml</span></span><br><span class="line">        engine.ver = <span class="built_in">RegExp</span>[<span class="string">'$1'</span>];</span><br><span class="line">        engine.khtml = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在排除了Webkit和KHTML之后，就可以准确地检测Gecko了。但是，在用户代理字符串中，Gecko的版本号不会出现在字符串“Gecko”的后面，而是会出现在字符串“rv:”的后面。这样，我们就必须使用一个比前面复杂一些的正则表达式，如下所示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ua = navigator.userAgent;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.opera) &#123;</span><br><span class="line">        <span class="comment">// 检测opera</span></span><br><span class="line">        engine.ver = <span class="built_in">window</span>.opera.version();</span><br><span class="line">        engine.opra = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/AppleWebkit\/(\S+)/i</span>.test(ua)) &#123;</span><br><span class="line">        <span class="comment">// 检测webkit</span></span><br><span class="line">        engine.ver = <span class="built_in">RegExp</span>[<span class="string">'$1'</span>];</span><br><span class="line">        engine.webkit = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/KHTML\/(\S+)/i</span>.test(ua) || <span class="regexp">/Konqueror\/([^;]+)/i</span>.test(ua)) &#123;</span><br><span class="line">        <span class="comment">// 检测khtml</span></span><br><span class="line">        engine.ver = <span class="built_in">RegExp</span>[<span class="string">'$1'</span>];</span><br><span class="line">        engine.khtml = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/rv:([^\)]+)\) Gecko\/\d&#123;8&#125;/i</span>.test(ua)) &#123;</span><br><span class="line">        <span class="comment">// 检测gecko</span></span><br><span class="line">        engine.ver = <span class="built_in">RegExp</span>[<span class="string">'$1'</span>];</span><br><span class="line">        engine.gecko = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最后一个要检测的就是IE了。IE的版本号们于字符串“MSIE”的后面、一个分号的前面，因此相应的正则表达式非常简单，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ua = navigator.userAgent;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.opera) &#123;</span><br><span class="line">        <span class="comment">// 检测opera</span></span><br><span class="line">        engine.ver = <span class="built_in">window</span>.opera.version();</span><br><span class="line">        engine.opra = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/AppleWebkit\/(\S+)/i</span>.test(ua)) &#123;</span><br><span class="line">        <span class="comment">// 检测webkit</span></span><br><span class="line">        engine.ver = <span class="built_in">RegExp</span>[<span class="string">'$1'</span>];</span><br><span class="line">        engine.webkit = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/KHTML\/(\S+)/i</span>.test(ua) || <span class="regexp">/Konqueror\/([^;]+)/i</span>.test(ua)) &#123;</span><br><span class="line">        <span class="comment">// 检测khtml</span></span><br><span class="line">        engine.ver = <span class="built_in">RegExp</span>[<span class="string">'$1'</span>];</span><br><span class="line">        engine.khtml = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/rv:([^\)]+)\) Gecko\/\d&#123;8&#125;/i</span>.test(ua)) &#123;</span><br><span class="line">        <span class="comment">// 检测gecko</span></span><br><span class="line">        engine.ver = <span class="built_in">RegExp</span>[<span class="string">'$1'</span>];</span><br><span class="line">        engine.gecko = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/MSIE ([^;]+/i</span>.test(ua))/) &#123;</span><br><span class="line">        <span class="comment">// 检测ie</span></span><br><span class="line">        engine.ver = <span class="built_in">RegExp</span>[<span class="string">'$1'</span>];</span><br><span class="line">        engine.ie = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="识别浏览器"><a href="#识别浏览器" class="headerlink" title="识别浏览器"></a>识别浏览器</h2><p>大多数情况下，识别了浏览器的呈现引擎就足以为我们采取正确的操作提供依据了。可是，只有呈现引擎还不能说明存在所需的JavaScript功能。苹果公司的Safari浏览器和谷歌公司的Chrome浏览器都使用Webkit引擎，但它们的JavaScript引擎却不一样。在这两款浏览器中，client.webkit都会返回非0值，但仅知道这一点恐怕还不够。对于它们，有必要像下面这样为client对象再添加一些新属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> client = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> engine =  &#123;</span><br><span class="line">        ie: <span class="number">0</span>,</span><br><span class="line">        gecko: <span class="number">0</span>,</span><br><span class="line">        webkit: <span class="number">0</span>,</span><br><span class="line">        khtml: <span class="number">0</span>,</span><br><span class="line">        opera: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 具体的版本号</span></span><br><span class="line">        ver: <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> browser = &#123;</span><br><span class="line">        <span class="comment">// 浏览器</span></span><br><span class="line">        ie: <span class="number">0</span>,</span><br><span class="line">        firefox: <span class="number">0</span>,</span><br><span class="line">        safari: <span class="number">0</span>,</span><br><span class="line">        konq: <span class="number">0</span>,</span><br><span class="line">        opera: <span class="number">0</span>,</span><br><span class="line">        chrome: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 具体的版本号</span></span><br><span class="line">        ver: <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        engine: engine,</span><br><span class="line">        browser: browser</span><br><span class="line">    &#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>代码中又添加了browser，用于保存每个主要浏览器的属性。与engine变量一样，除了当前使用的浏览器，其它属性的值将保持为0。如果是当前使用的浏览器，则这个属性中保存的是浮点数值形式的版本号。同样，ver属性中必要时将会包含字符串形式的浏览器完整版本号。由于大多数浏览器与呈现引擎密切相关，所以下面示例中检测浏览器代码与检测呈现引擎的代码是混合在一起的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> client = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> engine =  &#123;</span><br><span class="line">        ie: <span class="number">0</span>,</span><br><span class="line">        gecko: <span class="number">0</span>,</span><br><span class="line">        webkit: <span class="number">0</span>,</span><br><span class="line">        khtml: <span class="number">0</span>,</span><br><span class="line">        opera: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 具体的版本号</span></span><br><span class="line">        ver: <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> browser = &#123;</span><br><span class="line">        <span class="comment">// 浏览器</span></span><br><span class="line">        ie: <span class="number">0</span>,</span><br><span class="line">        firefox: <span class="number">0</span>,</span><br><span class="line">        safari: <span class="number">0</span>,</span><br><span class="line">        konq: <span class="number">0</span>,</span><br><span class="line">        opera: <span class="number">0</span>,</span><br><span class="line">        chrome: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 具体的版本号</span></span><br><span class="line">        ver: <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ua = navigator.userAgent;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.opera) &#123;</span><br><span class="line">        <span class="comment">// 检测opera</span></span><br><span class="line">        engine.ver = browser.ver = <span class="built_in">window</span>.opera.version();</span><br><span class="line">        engine.opra = browser.opera = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/AppleWebkit\/(\S+)/i</span>.test(ua)) &#123;</span><br><span class="line">        <span class="comment">// 检测webkit</span></span><br><span class="line">        engine.ver = <span class="built_in">RegExp</span>[<span class="string">'$1'</span>];</span><br><span class="line">        engine.webkit = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检测Chrome/safari与其对应的版本</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/Chrome\/(\S+)/i</span>.test(ua)) &#123;</span><br><span class="line">            browser.ver = <span class="built_in">RegExp</span>[<span class="string">'$1'</span>];</span><br><span class="line">            browser.chrome = <span class="built_in">parseFloat</span>(browser.ver);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/Version\/(\S+)/i</span>.test(ua)) &#123;</span><br><span class="line">            browser.ver = <span class="built_in">RegExp</span>[<span class="string">'$1'</span>];</span><br><span class="line">            browser.safari = <span class="built_in">parseFloat</span>(browser.ver);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 当检测不出Safari版本时，可大致确定safari的版本</span></span><br><span class="line">            <span class="keyword">var</span> safariVersion = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (engine.webkit &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                safariVersion = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (engine.webkit &lt; <span class="number">312</span>) &#123;</span><br><span class="line">                safariVersion = <span class="number">1.2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (engine.webkit &lt; <span class="number">412</span>) &#123;</span><br><span class="line">                safariVersion = <span class="number">1.3</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                safariVersion = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            browser.safari = browser.ver = safariVersion;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/KHTML\/(\S+)/i</span>.test(ua) || <span class="regexp">/Konqueror\/([^;]+)/i</span>.test(ua)) &#123;</span><br><span class="line">        <span class="comment">// 检测khtml</span></span><br><span class="line">        engine.ver = browser.ver = <span class="built_in">RegExp</span>[<span class="string">'$1'</span>];</span><br><span class="line">        engine.khtml = browser.konq = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/rv:([^\)]+)\) Gecko\/\d&#123;8&#125;/i</span>.test(ua)) &#123;</span><br><span class="line">        <span class="comment">// 检测gecko</span></span><br><span class="line">        engine.ver = <span class="built_in">RegExp</span>[<span class="string">'$1'</span>];</span><br><span class="line">        engine.gecko = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 确定是不是Firefox</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/Firefox\/(\S)+/i</span>.test(ua)) &#123;</span><br><span class="line">            browser.ver = <span class="built_in">RegExp</span>[<span class="string">'$1'</span>];</span><br><span class="line">            browser.firefox = <span class="built_in">parseFloat</span>(browser.ver);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/MSIE ([^;]+/i</span>.test(ua))/) &#123;</span><br><span class="line">        <span class="comment">// 检测ie</span></span><br><span class="line">        engine.ver = browser.ver = <span class="built_in">RegExp</span>[<span class="string">'$1'</span>];</span><br><span class="line">        engine.ie = browser.ie = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        engine: engine,</span><br><span class="line">        browser: browser</span><br><span class="line">    &#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><h2 id="识别浏览器平台——操作系统"><a href="#识别浏览器平台——操作系统" class="headerlink" title="识别浏览器平台——操作系统"></a>识别浏览器平台——操作系统</h2><p>很多时候，只要知道呈现引擎足以编写出适当的代码了。但在某些条件下，平台可能是必须关注的问题。那些具有各个平台的浏览器（如Safari、Firefox、Opera）在不同的平台下可能会有不同的问题。目前的三大主流平台是Windows、Mac和Unix（包括各种Linux）。为了检测这些平台，还需要像下面这样添加一个新对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> client = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> engine =  &#123;</span><br><span class="line">        ie: <span class="number">0</span>,</span><br><span class="line">        gecko: <span class="number">0</span>,</span><br><span class="line">        webkit: <span class="number">0</span>,</span><br><span class="line">        khtml: <span class="number">0</span>,</span><br><span class="line">        opera: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 具体的版本号</span></span><br><span class="line">        ver: <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> browser = &#123;</span><br><span class="line">        <span class="comment">// 浏览器</span></span><br><span class="line">        ie: <span class="number">0</span>,</span><br><span class="line">        firefox: <span class="number">0</span>,</span><br><span class="line">        safari: <span class="number">0</span>,</span><br><span class="line">        konq: <span class="number">0</span>,</span><br><span class="line">        opera: <span class="number">0</span>,</span><br><span class="line">        chrome: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 具体的版本号</span></span><br><span class="line">        ver: <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> system = &#123;</span><br><span class="line">        win: <span class="literal">false</span>,</span><br><span class="line">        mac: <span class="literal">false</span>,</span><br><span class="line">        xll: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        engine: engine,</span><br><span class="line">        browser: browser</span><br><span class="line">    &#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>在确定平台时，检测navigator.platform要比检测用户代理字符串更简单，后者在不同浏览器中会给出不同平台的信息。而navigator.platform属性可能的值包括“Win32”、“Win64”、“MacPPC”、“MacIntel”、“Xll”和“Linux i686”，这些值在不同浏览器中都是一致的。检测平台的代码非常直观，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = navigator.platform;</span><br><span class="line">system.win = p.indexOf(<span class="string">'Win'</span>) == <span class="number">0</span>;</span><br><span class="line">system.mac = p.indexOf(<span class="string">'Mac'</span>) == <span class="number">0</span>;</span><br><span class="line">system.xll = (p.indexOf(<span class="string">'Xll'</span>) == <span class="number">0</span> || p.indexOf(<span class="string">'Linux'</span>) == <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h2 id="识别Window操作系统"><a href="#识别Window操作系统" class="headerlink" title="识别Window操作系统"></a>识别Window操作系统</h2><p>在Windows下台下，还可以从用户代理字符串中进一步以得具体的操作系统信息。在WIndows XP之前，Windows有两种版本，分别针对家庭版用户和商业用户。针对家庭用户的版本分别是Windows 95、98和Windows ME。而针对商业用户的版本则一直叫做Windows NT，最后由于市场原因改名为Windows 2000。这两个产品后来又合并成一个由Windows NT发展而来的公共的代码基，代表产品就是Winodws XP。随后，微软在Windows XP基础上又构建Windows Vista。</p><p>只有了解这些信息，才能搞清楚用户代理字符串中Winodws操作系统具体版本。下表列出了不同浏览器在表示不同Windows操作系统时给出的不同字符串。</p><table><thead><tr><th align="left">windows版本</th><th align="left">IE4+</th><th align="left">Gecko</th><th align="left">Opera</th><th align="left">Webkit</th></tr></thead><tbody><tr><td align="left">95</td><td align="left">“Windows 95”</td><td align="left">“Win95”</td><td align="left">“Windows 95”</td><td align="left">n/a</td></tr><tr><td align="left">98</td><td align="left">“Winodws 98”</td><td align="left">“Win98”</td><td align="left">“Windows 98”</td><td align="left">n/a</td></tr><tr><td align="left">NT 4.0</td><td align="left">“Windows NT”</td><td align="left">“WinNT4.0”</td><td align="left">“windows NT 4.0”</td><td align="left">n/a</td></tr><tr><td align="left">2000</td><td align="left">“Windows NT 5.0”</td><td align="left">“Windows NT 5.0”</td><td align="left">“Windows NT 5.0”</td><td align="left">n/a</td></tr><tr><td align="left">ME</td><td align="left">“Win 9x 4.90”</td><td align="left">“Win 9x 4.90”</td><td align="left">“Win 9x 4.90”</td><td align="left">n/a</td></tr><tr><td align="left">XP</td><td align="left">“Windows NT 5.1”</td><td align="left">“Windows NT 5.1”</td><td align="left">“Windows NT 5.1”</td><td align="left">“Windows NT 5.1”</td></tr><tr><td align="left">Vista</td><td align="left">“Windows NT 6.0”</td><td align="left">“Windows NT 6.0”</td><td align="left">“Windows NT 6.0”</td><td align="left">“Windows NT 6.0”</td></tr><tr><td align="left">7</td><td align="left">“Windows NT 6.1”</td><td align="left">“Windows NT 6.1”</td><td align="left">“Windows NT 6.1”</td><td align="left">“Windows NT 6.1”</td></tr><tr><td align="left">8</td><td align="left">“Windows NT 6.2”</td><td align="left">“Windows NT 6.2”</td><td align="left">“Windows NT 6.2”</td><td align="left">“Windows NT 6.2”</td></tr></tbody></table><p>代理字符串中的Windows操作系统版本表示方法各异，因此检测代码并不十分直观。好在，从Windows 2000开始，表示操作系统的字符串大部分都还相同，只有版本号有变化。为了检测不同的Windows操作系统，必须使用正则表达式。</p><p>第一步就是匹配Winodws 95和Windows 98这两个字符串。对这两个字符串，只有Gecko与其它浏览器不同，即没有”dows”，而且”win”与版本号之间没有空格。要匹配这个模式，可以使用下面这个简单的正则表达式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Win(?:dows )?([^<span class="keyword">do</span>]&#123;<span class="number">2</span>&#125;)/i</span><br></pre></td></tr></table></figure><p>这个正则表达式中捕获的数组会返回操作系统的版本。由于版本可能是任何两个字符编码（例如 95、98、9x、NT、ME及XP），因此要使用两个非空空格字符。</p><p>Gecko在表示Windows NT时会在末尾添加“4.0”，与其查找实际字符串，不如像现在这样查找小数值更合适。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Win(?:dows )?([^<span class="keyword">do</span>]&#123;<span class="number">2</span>&#125;)(\d+\.\d+)?<span class="regexp">/i</span></span><br></pre></td></tr></table></figure><p>这样，正则表达式中就包含了第二个捕获组，用于取得NT的版本号。由于该版本号对于Windows 95、98而言是不存在的，所以必须设置为可选。这个模式与Opera表示Windows NT的字符串之间唯一的区别，就是“NT”与“4.0”之间的空格，这在模式中很容易添加。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Win(?:dows )?([^<span class="keyword">do</span>]&#123;<span class="number">2</span>&#125;)\s+(\d+\.\d+)?<span class="regexp">/i</span></span><br></pre></td></tr></table></figure><p>经过一番修改后，这个正则表达式也可以成功匹配Windows ME、Windows XP和Windows Vista的字符串了。具体来说，第一个捕获数组将会匹配95、98、9x、NT、ME或XP。第二个捕获数组则只针对Windows ME及所有WIndows NT的变体。这个信息作为具体的操作系统信息保存在system.win属性中，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (system.win) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/Win(?:dows )?([^do]&#123;2&#125;)\s?(\d+\.\d+)?/i</span>.test(ua)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">RegExp</span>[<span class="string">'$1'</span>] == <span class="string">'NT'</span>) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (<span class="built_in">RegExp</span>[<span class="string">'$2'</span>]) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'5.0'</span>: system.win = <span class="string">'2000'</span>; <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'5.1'</span>: system.win = <span class="string">'XP'</span>; <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'6.0'</span>: system.win = <span class="string">'Vista'</span>; <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'6.1'</span>: system.win = <span class="string">'7'</span>; <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'6.2'</span>: system.win = <span class="string">'8'</span>; <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>: system.win = <span class="string">'NT'</span>; <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">RegExp</span>[<span class="string">'$1'</span>] == <span class="string">'9x'</span>) &#123;</span><br><span class="line">                system.win = <span class="string">'ME'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                system.win = <span class="built_in">RegExp</span>[<span class="string">'$1'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="识别移动设备"><a href="#识别移动设备" class="headerlink" title="识别移动设备"></a>识别移动设备</h2><p>2006到2007年，移动设备中Web浏览器的应用呈爆炸式增长。四大主要浏览器都推出了手机版和其它设备中运行的版本。要检测相应的设备，第一步是为要检测的所有移动设备添加属性，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> client = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> engine =  &#123;</span><br><span class="line">        ie: <span class="number">0</span>,</span><br><span class="line">        gecko: <span class="number">0</span>,</span><br><span class="line">        webkit: <span class="number">0</span>,</span><br><span class="line">        khtml: <span class="number">0</span>,</span><br><span class="line">        opera: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 具体的版本号</span></span><br><span class="line">        ver: <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> browser = &#123;</span><br><span class="line">        <span class="comment">// 浏览器</span></span><br><span class="line">        ie: <span class="number">0</span>,</span><br><span class="line">        firefox: <span class="number">0</span>,</span><br><span class="line">        safari: <span class="number">0</span>,</span><br><span class="line">        konq: <span class="number">0</span>,</span><br><span class="line">        opera: <span class="number">0</span>,</span><br><span class="line">        chrome: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 具体的版本号</span></span><br><span class="line">        ver: <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> system = &#123;</span><br><span class="line">        win: <span class="literal">false</span>,</span><br><span class="line">        mac: <span class="literal">false</span>,</span><br><span class="line">        xll: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移动设备</span></span><br><span class="line">        iphone: <span class="literal">false</span>,</span><br><span class="line">        ipod: <span class="literal">false</span>,</span><br><span class="line">        ipad: <span class="literal">false</span>,</span><br><span class="line">        ios: <span class="literal">false</span>,</span><br><span class="line">        android: <span class="literal">false</span>,</span><br><span class="line">        nokiaN: <span class="literal">false</span>,</span><br><span class="line">        winMobile: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        engine: engine,</span><br><span class="line">        browser: browser,</span><br><span class="line">        system: system</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>然后，通过简单地检测字符串“iPhone”、”iPod”和”iPad”就可以分别设置相应属性的值了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">system.iphone = ua.indexOf(<span class="string">'iPhone'</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">system.ipod = ua.indexOf(<span class="string">'iPod'</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">system.ipad = ua.indexOf(<span class="string">'iPad'</span>) &gt; <span class="number">-1</span>;</span><br></pre></td></tr></table></figure><p>除了知道IOS设备，最好还知道IOS的版本号。在IOS之前，用户代理字符串中只包含“CPU like Mac OS”，后来iPhone中又改成“CPU iPhone OS 3_0 like Mac OS X”，iPad又改成“CPU OS 3_2 like Mac OS X”。也就是说，检测IOS需要正则表达式反映这些变化。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测ios版本</span></span><br><span class="line"><span class="keyword">if</span> (system.mac &amp;&amp; ua.indexOf(<span class="string">'Mobile'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/CPU (?:iPhone )?OS (\d+_\d+)/i</span>.test(ua)) &#123;</span><br><span class="line">        system.ios = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>[<span class="string">'$1'</span>].replace(<span class="string">'_'</span>, <span class="string">'.'</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        system.ios = <span class="number">2</span>;    <span class="comment">// 不能真正检测出来，所以只能猜测</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检测系统是不是Mac OS、字符串中是否存在“Mobile”，可以保证无论是什么版本，system.ios中都不会是0。然后，再使用正则表达式确定是否存在IOS的版本号。如果有，将system.ios设置为表示版本号的浮点值；否则，将版本号设置为2。（因为没有办法确定到底是什么版本，所以设置为更早的版本比较稳妥）</p><p>检测Android版本操作系统也很简单，也就是搜索字符串“Android”并取得紧随其后的版本号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测android版本</span></span><br><span class="line"><span class="keyword">if</span> (<span class="regexp">/Android (\d+\.\d+)/i</span>.test(ua)) &#123;</span><br><span class="line">    system.android = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>[<span class="string">'$1'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于所有的Android都有版本值，因此使用这个正则表达式可以精确的检测所有版本，并将system.android设置为正确的值。</p><p>诺基亚N系统手机使用的也是Webkit，其用户代理字符串与其它基于webkit的手机很相似。虽然诺基亚N系列手机在用户代理字符串中声称使用的是“safari”，但实际上并不是safari，尽管确实是基于webkit引擎。只要使用下面检测一下用户代理字符串中是否存在“NokiaN”，就足以确定是不是该系列的手机了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测nokia</span></span><br><span class="line">system.nokiaN = ua.indexOf(<span class="string">'NokiaN'</span>) &gt; <span class="number">-1</span>;</span><br></pre></td></tr></table></figure><p>最后一种主要的移动设备平台是Windows Mobile（也称Windows CE），用于Pocket PC和Smartphone中。由于从技术上说这些平台都属于Windows平台，因此Windows平台和操作系统都会返回正确的值。对于Windows Mobile 5.0及以前的版本，这两种设备的用户代理字符串非常相似，如下所示：</p><p>Mozilla/4.0 (compatible; MSIE 4.01; Windows CE; PPC; 240x320)</p><p>Mozilla/4.0 (compatible; MSIE 4.01; Windows CE; Smartphone; 176x220)</p><p>这一个来自Pocket PC中的移动Internet Explorer 4.01，第二个来自Smartphone中的同一个浏览器。当Windows操作系统检测脚本检测到这两个字符串时，system.win将被设置成”CE”，因此在检测Windows Mobile时可以使用这个值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测Windows Mobile</span></span><br><span class="line">system.winMobile = (system.win == <span class="string">'CE'</span>);</span><br></pre></td></tr></table></figure><p>不建议测试字符串中的“PPC”或“Smartphone”，因为在Windows Mobile 5.0以后版本的浏览器中，这些记号已经被移除了。不过，一般情况下，只知道这某个设备使用的是Windows Mobile也就足够了。</p><p>Windows Phone 7的用户代理字符串稍有改进，基本格式如下：</p><p>Mozilla/4.0 (compatible; MSIE 7.0; Windows Phone OS 7.0; Trident/3.1; IEMobile/7.0) Asus;Galaxy6</p><p>其中，Windows操作符的标签符与已往完全不同，因此在这个用户代理中，clinet.system.win等于”ph”。从中可以取得有关系统的更多信息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测Windows Mobile</span></span><br><span class="line"><span class="keyword">if</span> (system.win == <span class="string">'CE'</span>) &#123;</span><br><span class="line">    system.winMobile = system.win;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (system.win == <span class="string">'Ph'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/Windows Phone OS (\d+.\d+)/i</span>.test(ua)) &#123;</span><br><span class="line">        system.win = <span class="string">'Phone'</span>;</span><br><span class="line">        system.winMobile = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>[<span class="string">'$1'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果system.win的值是”CE”，就说明是老版本的Windows Mobile，因此system.winMobile会被设置为相同的值（只能知道这个信息）。如果system.win的值是“Ph”，那么这个设置就可能是Windows Phone7或更新版本。因此就用正则表达式来测试格式并提取版本号，将system.win的值重置为”Phone”，而将system.winMobile设置为版本号。</p><h2 id="识别游戏系统"><a href="#识别游戏系统" class="headerlink" title="识别游戏系统"></a>识别游戏系统</h2><p>除了移动设备之外，视频游戏系统中的Web浏览器也开始日益普及。Wii中的浏览器实际上是定制版的Opera，是专门为Wii Remote设计的。Playstation的浏览器是自己开发的，没有基于前面提到的任何呈现引擎。这两个中的用户代理字符串如下所示：</p><p>Opera/9.10 (Nintendo Wii; U; ; 1621; en)</p><p>Mozilla/5.0 (PLAYSTATION 3; 2.00)</p><p>在检测这些设置以前，我们必须先为client.system中添加适当的属性，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> client = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> engine =  &#123;</span><br><span class="line">        ie: <span class="number">0</span>,</span><br><span class="line">        gecko: <span class="number">0</span>,</span><br><span class="line">        webkit: <span class="number">0</span>,</span><br><span class="line">        khtml: <span class="number">0</span>,</span><br><span class="line">        opera: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 具体的版本号</span></span><br><span class="line">        ver: <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> browser = &#123;</span><br><span class="line">        <span class="comment">// 浏览器</span></span><br><span class="line">        ie: <span class="number">0</span>,</span><br><span class="line">        firefox: <span class="number">0</span>,</span><br><span class="line">        safari: <span class="number">0</span>,</span><br><span class="line">        konq: <span class="number">0</span>,</span><br><span class="line">        opera: <span class="number">0</span>,</span><br><span class="line">        chrome: <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 具体的版本号</span></span><br><span class="line">        ver: <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> system = &#123;</span><br><span class="line">        win: <span class="literal">false</span>,</span><br><span class="line">        mac: <span class="literal">false</span>,</span><br><span class="line">        xll: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 移动设备</span></span><br><span class="line">        iphone: <span class="literal">false</span>,</span><br><span class="line">        ipod: <span class="literal">false</span>,</span><br><span class="line">        ipad: <span class="literal">false</span>,</span><br><span class="line">        ios: <span class="literal">false</span>,</span><br><span class="line">        android: <span class="literal">false</span>,</span><br><span class="line">        nokiaN: <span class="literal">false</span>,</span><br><span class="line">        winMobile: <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 游戏系统</span></span><br><span class="line">        wii: <span class="literal">false</span>,</span><br><span class="line">        ps: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        engine: engine,</span><br><span class="line">        browser: browser,</span><br><span class="line">        system: system</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>检测前述游戏系统的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测游戏系统</span></span><br><span class="line">system.wii = ua.indexOf(<span class="string">'Wii'</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">system.ps = <span class="regexp">/playstation/i</span>.test(ua);</span><br></pre></td></tr></table></figure><p>完整的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> client = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> engine = &#123;</span><br><span class="line">        ie: <span class="number">0</span>,</span><br><span class="line">        gecko: <span class="number">0</span>,</span><br><span class="line">        webkit: <span class="number">0</span>,</span><br><span class="line">        khtml: <span class="number">0</span>,</span><br><span class="line">        opera: <span class="number">0</span>,</span><br><span class="line">        ver: <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> browser = &#123;</span><br><span class="line">        ie: <span class="number">0</span>,</span><br><span class="line">        firefox: <span class="number">0</span>,</span><br><span class="line">        safari: <span class="number">0</span>,</span><br><span class="line">        konq: <span class="number">0</span>,</span><br><span class="line">        opera: <span class="number">0</span>,</span><br><span class="line">        chrome: <span class="number">0</span>,</span><br><span class="line">        ver: <span class="literal">null</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> system = &#123;</span><br><span class="line">        win: <span class="literal">false</span>,</span><br><span class="line">        mac: <span class="literal">false</span>,</span><br><span class="line">        xll: <span class="literal">false</span>,</span><br><span class="line">        iphone: <span class="literal">false</span>,</span><br><span class="line">        ipoad: <span class="literal">false</span>,</span><br><span class="line">        ipad: <span class="literal">false</span>,</span><br><span class="line">        ios: <span class="literal">false</span>,</span><br><span class="line">        android: <span class="literal">false</span>,</span><br><span class="line">        nokiaN: <span class="literal">false</span>,</span><br><span class="line">        winMobile: <span class="literal">false</span>,</span><br><span class="line">        wii: <span class="literal">false</span>,</span><br><span class="line">        ps: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ua = navigator.userAgent;</span><br><span class="line">    <span class="comment">// 检测浏览器呈现引擎</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.opera) &#123;</span><br><span class="line">        engine.ver = browser.ver = <span class="built_in">window</span>.opera.version();</span><br><span class="line">        engine.opera =  browser.opera = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/AppleWebkit\/(\S+)/i</span>.test(ua)) &#123;</span><br><span class="line">        engine.ver = <span class="built_in">RegExp</span>[<span class="string">'$1'</span>];</span><br><span class="line">        engine.webkit = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 确定是Chrome还是Safari</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/Chrome\/(\S+)/i</span>.test(ua)) &#123;</span><br><span class="line">            browser.ver = <span class="built_in">RegExp</span>[<span class="string">'$1'</span>];</span><br><span class="line">            browser.chrome = <span class="built_in">parseFloat</span>(browser.ver);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/Version\/(\S+)/i</span>.test(ua)) &#123;</span><br><span class="line">            browser.ver = <span class="built_in">RegExp</span>[<span class="string">'$1'</span>];</span><br><span class="line">            browser.safari = <span class="built_in">parseFloat</span>(browser.ver);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 近似地确定版本号</span></span><br><span class="line">            <span class="keyword">var</span> safariVersion = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (engine.webkit &lt; <span class="number">100</span>) &#123;</span><br><span class="line">                safariVersion = <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (engine.webkit &lt; <span class="number">312</span>) &#123;</span><br><span class="line">                safariVersion = <span class="number">1.2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (engine.webkit &lt; <span class="number">412</span>) &#123;</span><br><span class="line">                safariVersion = <span class="number">1.3</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                safariVersion = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            browser.safari = browser.safari = safariVersion;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/KHTML\/(\S+)/i</span>.test(ua) || <span class="regexp">/Konqueror\/([^;]+)/i</span>.test(ua)) &#123;</span><br><span class="line">        engine.ver = browser.ver = <span class="built_in">RegExp</span>[<span class="string">'$1'</span>];</span><br><span class="line">        engine.khtml = browser.konq = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/rv:([^\)]+)\) Gecko\/\d&#123;8&#125;/i</span>.test(ua)) &#123;</span><br><span class="line">        engine.ver = <span class="built_in">RegExp</span>[<span class="string">'$1'</span>];</span><br><span class="line">        engine.gecko = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 确定是不是Firefox</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/Firefox\/(\S+)/i</span>.test(ua)) &#123;</span><br><span class="line">            engine.ver = browser.ver = <span class="built_in">RegExp</span>[<span class="string">'$1'</span>];</span><br><span class="line">            engine.firefox = <span class="built_in">parseFloat</span>(browser.ver);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/MSIE ([^;]+)/i</span>.test(ua)) &#123;</span><br><span class="line">        engine.ver = browser.ver = <span class="built_in">RegExp</span>[<span class="string">'$1'</span>];</span><br><span class="line">        engine.ie = browser.ie = <span class="built_in">parseFloat</span>(engine.ver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测平台</span></span><br><span class="line">    <span class="keyword">var</span> p = navigator.platform;</span><br><span class="line">    system.win = p.indexOf(<span class="string">'Win'</span>) == <span class="number">0</span>;</span><br><span class="line">    system.mac = p.indexOf(<span class="string">'Mac'</span>) == <span class="number">0</span>;</span><br><span class="line">    system.xll = (p.indexOf(<span class="string">'Xll'</span>) == <span class="number">0</span> || p.indexOf(<span class="string">'Linux'</span>) == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测Windows操作系统</span></span><br><span class="line">    <span class="keyword">if</span> (system.win) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/Win(?:dows )?([^do]&#123;2&#125;)\s?(\d+\.\d+)?/</span>.test(ua)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">RegExp</span>[<span class="string">'$1'</span>] == <span class="string">'NT'</span>) &#123;</span><br><span class="line">                <span class="keyword">switch</span>(<span class="built_in">RegExp</span>[<span class="string">'$2'</span>]) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'5.0'</span>: system.win = <span class="string">'2000'</span>; <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'5.1'</span>: system.win = <span class="string">'XP'</span>; <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'6.0'</span>: system.win = <span class="string">'Vista'</span>; <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'6.1'</span>: system.win = <span class="string">'7'</span>; <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">'6.2'</span>: system.win = <span class="string">'8'</span>; <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>: system.win = <span class="string">'NT'</span>; <span class="keyword">break</span>;</span><br><span class="line">                &#125; </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">RegExp</span>[<span class="string">'$1'</span>] == <span class="string">'9x'</span>) &#123;</span><br><span class="line">                system.win = <span class="string">'ME'</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                system.win = <span class="built_in">RegExp</span>[<span class="string">'$1'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 移动设备</span></span><br><span class="line">    system.iphone = ua.indexOf(<span class="string">'iPhone'</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">    system.ipod = ua.indexOf(<span class="string">'iPod'</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">    system.ipad = ua.indexOf(<span class="string">'iPad'</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">    system.nokiaN = ua.indexOf(<span class="string">'nokiaN'</span>) &gt; <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// windows mobile</span></span><br><span class="line">    <span class="keyword">if</span> (system.win == <span class="string">'CE'</span>) &#123;</span><br><span class="line">        system.winMobile = system.win;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (system.win == <span class="string">'Ph'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/Windows Phone OS (\d+.\d)/i</span>.test(ua)) &#123;</span><br><span class="line">            system.win = <span class="string">'Phone'</span>;</span><br><span class="line">            system.winMobile = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>[<span class="string">'$1'</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测IOS版本</span></span><br><span class="line">    <span class="keyword">if</span> (system.mac &amp;&amp; ua.indexOf(<span class="string">'Mobile'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="regexp">/CPU (?:iPhone )?OS (\d+_\d+)/i</span>.test(ua)) &#123;</span><br><span class="line">            system.ios = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>[<span class="string">'$1'</span>].replace(<span class="string">'_'</span>, <span class="string">'.'</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            system.ios = <span class="number">2</span>;        <span class="comment">// 不能真正检测出来，所以只能猜测</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测Android版本</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/Android (\d+\.\d+)/i</span>.test(ua)) &#123;</span><br><span class="line">        system.android = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>[<span class="string">'$1'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 游戏系统</span></span><br><span class="line">    system.wii = ua.indexOf(<span class="string">'Wii'</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">    system.ps = <span class="regexp">/PlayStation/i</span>.test(ua);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        engine: engine,</span><br><span class="line">        browser: browser,</span><br><span class="line">        system: system</span><br><span class="line">    &#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>(注：原文摘自《JavaScript高级程序设计》第3版，第9章 客户端检测，9.3用户代理检测，p221)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;识别浏览器呈现引擎&quot;&gt;&lt;a href=&quot;#识别浏览器呈现引擎&quot; class=&quot;headerlink&quot; title=&quot;识别浏览器呈现引擎&quot;&gt;&lt;/a&gt;识别浏览器呈现引擎&lt;/h2&gt;&lt;p&gt;为了不在全局作用域中添加多余变量，这里使用单例模式（什么是单例模式？）来封装检测脚本
      
    
    </summary>
    
    
      <category term="Front-End" scheme="https://blog.afacat.com/tags/Front-End/"/>
    
      <category term="JavaScript" scheme="https://blog.afacat.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>navigator，JS检测浏览器插件</title>
    <link href="https://blog.afacat.com/2015/01/24/navigator%EF%BC%8CJS%E6%A3%80%E6%B5%8B%E6%B5%8F%E8%A7%88%E5%99%A8%E6%8F%92%E4%BB%B6/"/>
    <id>https://blog.afacat.com/2015/01/24/navigator，JS检测浏览器插件/</id>
    <published>2015-01-24T03:26:00.000Z</published>
    <updated>2019-06-29T10:47:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>最早由Netscape Navigator 2.0引入的navigator对象，现在已经成为识别客户端浏览器的事实标准。虽然其它浏览器也通过其它方式提供了相同或相似的信息（例如，IE中的<code>window.clientInformation</code>和Opera中的<code>window.opera</code>），但<code>navigator</code>对象却是所有支持JavaScript的浏览器所共有的。与其它BOM对象的情况一样，每个浏览器中的<code>navigator</code>对象也都有一套自己的属性。下表列出了存在于所有浏览器中的属性和方法，以及支持它们的浏览器版本。</p><table><thead><tr><th align="left">属性或方法</th><th align="left">说明</th><th align="left">IE</th><th align="left">FireFox</th><th align="left">Safari/Chrome</th><th align="left">Opera</th></tr></thead><tbody><tr><td align="left">appCodeName</td><td align="left">返回浏览器的名称，通常是Mozilla，即使在非Mozilla浏览器中也是如此</td><td align="left">3.0+</td><td align="left">1.0+</td><td align="left">1.0+</td><td align="left">7.0+</td></tr><tr><td align="left">appMinorVersion</td><td align="left">次版本信息</td><td align="left">4.0+</td><td align="left">-</td><td align="left">-</td><td align="left">9.5+</td></tr><tr><td align="left">appName</td><td align="left">完整的浏览器名称</td><td align="left">3.0+</td><td align="left">1.0+</td><td align="left">1.0+</td><td align="left">7.0+</td></tr><tr><td align="left">appVersion</td><td align="left">浏览器的版本，一般不与实际的浏览器版本对应</td><td align="left">3.0+</td><td align="left">1.0+</td><td align="left">1.0+</td><td align="left">7.0+</td></tr><tr><td align="left">buildID</td><td align="left">浏览器的编译版本</td><td align="left">-</td><td align="left">2.0+</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">cookieEnabled</td><td align="left">表示cookie是否启用</td><td align="left">4.0+</td><td align="left">1.0+</td><td align="left">1.0+</td><td align="left">7.0+</td></tr><tr><td align="left">cpuClass</td><td align="left">客户端计算机中使用的CPU类型（x86、68K、Alpha、PPC或other）</td><td align="left">4.0+</td><td align="left">-</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">javaEnabled</td><td align="left">表示当前浏览器中是否启用了java</td><td align="left">4.0+</td><td align="left">1.0+</td><td align="left">1.0+</td><td align="left">7.0+</td></tr><tr><td align="left">language</td><td align="left">浏览器的主语言</td><td align="left">-</td><td align="left">1.0+</td><td align="left">1.0+</td><td align="left">7.0+</td></tr><tr><td align="left">mimeType</td><td align="left">在浏览器中注册的MIME类型数组</td><td align="left">4.0+</td><td align="left">1.0+</td><td align="left">1.0+</td><td align="left">7.0+</td></tr><tr><td align="left">onLine</td><td align="left">表示浏览器是否连接到因特网</td><td align="left">4.0+</td><td align="left">1.0+</td><td align="left">-</td><td align="left">9.5+</td></tr><tr><td align="left">opsProfile</td><td align="left">似乎早就不用了，查不到相关文档</td><td align="left">4.0+</td><td align="left">-</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">oscpu</td><td align="left">客户端计算机使用的操作系统或使用的CPU</td><td align="left">-</td><td align="left">1.0+</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">platform</td><td align="left">浏览器所在的系统平台</td><td align="left">4.0+</td><td align="left">1.0+</td><td align="left">1.0+</td><td align="left">7.0+</td></tr><tr><td align="left">plugins</td><td align="left">浏览器中安装的插件信息的数组</td><td align="left">4.0+</td><td align="left">1.0+</td><td align="left">1.0+</td><td align="left">7.0+</td></tr><tr><td align="left">preference()</td><td align="left">设置用户的首选项</td><td align="left">-</td><td align="left">1.5+</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">product</td><td align="left">产品名称（如Gecko）</td><td align="left">-</td><td align="left">1.0+</td><td align="left">1.0+</td><td align="left">-</td></tr><tr><td align="left">productSub</td><td align="left">关于产品的次要信息（如Gecko的版本）</td><td align="left">-</td><td align="left">1.0+</td><td align="left">1.0+</td><td align="left">-</td></tr><tr><td align="left">registerContentHandler()</td><td align="left">针对特定的MIME类型将一个站点注册为处理程序</td><td align="left">-</td><td align="left">2.0</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">registerProtocolHandler()</td><td align="left">针对特定协议将一个站点注册为处理程序</td><td align="left">-</td><td align="left">2.0</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">securityPolicy</td><td align="left">已经废弃。安全策略的名称。为了与Netscape Navigator 4向后兼容而保留下来</td><td align="left">-</td><td align="left">1.0+</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">systemLanguage</td><td align="left">操作系统的语言</td><td align="left">4.0+</td><td align="left">-</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">taintEnabled</td><td align="left">已经废弃。表示是否允许变量被修改(taint)。为了与Netscape Navigator 3向后兼容而保留下来</td><td align="left">4.0+</td><td align="left">1.0+</td><td align="left">-</td><td align="left">7.0</td></tr><tr><td align="left">userAgent</td><td align="left">浏览器的用户代理字符串</td><td align="left">3.+</td><td align="left">1.0+</td><td align="left">1.0+</td><td align="left">7.0+</td></tr><tr><td align="left">userLanguage</td><td align="left">操作系统的默认语言</td><td align="left">4.0+</td><td align="left">-</td><td align="left">-</td><td align="left">7.0+</td></tr><tr><td align="left">userProfile</td><td align="left">借以访问用户个人信息的对象</td><td align="left">4.0+</td><td align="left">-</td><td align="left">-</td><td align="left">-</td></tr><tr><td align="left">vendor</td><td align="left">浏览器的品牌</td><td align="left">-</td><td align="left">1.0+</td><td align="left">1.0+</td><td align="left">-</td></tr><tr><td align="left">vendorSub</td><td align="left">有关供应商的次要信息</td><td align="left">-</td><td align="left">1.0+</td><td align="left">1.0+</td><td align="left">-</td></tr></tbody></table><p>表中的这些navigator对象的属性通常用于检测显示网页的浏览器类型。</p><h2 id="检测插件"><a href="#检测插件" class="headerlink" title="检测插件"></a>检测插件</h2><p>检测浏览器中是否安装了特定的插件是一种最常见的检例程。对于非IE浏览器可以使用plugins数组达到这个目的。该数组中的每一项都包含下列属性。<br><code>name</code>: 插件名字<br><code>description</code>: 插件的描述<br><code>filename</code>: 插件的文件名<br><code>length</code>: 插件所处理的MIME类型数量<br>一般来说，<code>name</code>属性中会包含检测插件必需的所有信息，但有时候也不完全如此。在检测插件时，需要像下面这样循环迭代每个插件并将插件的<code>name</code>与给定的名字进行比较。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检测浏览器中是否存在此插件（在IE中无效）</span></span><br><span class="line"><span class="comment"> * @param 插件名 name</span></span><br><span class="line"><span class="comment"> * @return boolean 存在插件返回true，否则返回false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPlugin</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  name = name.toLowerCase();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; navigator.plugins.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (navigator.plugins[i].name.toLowerCase().indexOf(name) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而检测IE中的插件比较麻烦，因为IE不支持Netscape式的插件。在IE中检测插件的唯一方式就是使用专有的<code>ActiveXObject</code>类型，并尝试创建一个特定插件的实例。IE是以COM对象的方式实现插件的，而COM对象使用唯一标识符来标识。因此，要想检查特定的插件，就必须知道其COM标识符。例如，Flash的标识符是<code>ShockwaveFlash.ShockwaveFlash</code>。知道唯一标识符之后，就可以编写类似下面的函数来检测IE中是否安装相应的插件了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检测IE中的插件</span></span><br><span class="line"><span class="comment"> * @param 插件名 name</span></span><br><span class="line"><span class="comment"> * @return boolean 存在插件返回true，否则返回false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasIEPlugin</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> ActiveXObject(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>鉴于检测这两种插件的方法差别太大，因此典型的做法是针对每个插件分别创建检测函数，而不是使用前面介绍的通用检测方法。来看下面的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检测浏览器中是否存在此插件（在IE中无效）</span></span><br><span class="line"><span class="comment"> * @param 插件名 name</span></span><br><span class="line"><span class="comment"> * @return boolean 存在插件返回true，否则返回false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPlugin</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  name = name.toLowerCase();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; navigator.plugins.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (navigator.plugins[i].name.toLowerCase().indexOf(name) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检测IE中的插件</span></span><br><span class="line"><span class="comment"> * @param 插件名 name</span></span><br><span class="line"><span class="comment"> * @return boolean 存在插件返回true，否则返回false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasIEPlugin</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> ActiveXObject(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测所有浏览器中的Flash</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasFlash</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// return hasPlugin("Flash") || hasIEPlugin("ShockwaveFlash.ShockwaveFlash");</span></span><br><span class="line">  <span class="keyword">var</span> result = hasPlugin(<span class="string">"Flash"</span>);</span><br><span class="line">  <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">    result = hasIEPlugin(<span class="string">"ShockwaveFlash.ShockwaveFlash"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测所有浏览器中的QuickTime</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasQuickTime</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// return hasPlugin("QuickTime") || hasIEPlugin("QuickTime.QuickTime");</span></span><br><span class="line">  <span class="keyword">var</span> result = hasPlugin(<span class="string">"QuickTime"</span>);</span><br><span class="line">  <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">    reseult = hasIEPlugin(<span class="string">"QuickTime.QuickTime"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(hasFlash());        <span class="comment">// 检测浏览器是否有Flash插件</span></span><br><span class="line">alert(hasQuickTime())    <span class="comment">// 检测浏览器是否有QuickTime插件</span></span><br></pre></td></tr></table></figure><p>（注：本文摘自：《JavaScript高级程序设计》第3版，第8章，8.3 navigator对象  p210）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最早由Netscape Navigator 2.0引入的navigator对象，现在已经成为识别客户端浏览器的事实标准。虽然其它浏览器也通过其它方式提供了相同或相似的信息（例如，IE中的&lt;code&gt;window.clientInformation&lt;/code&gt;和Opera中
      
    
    </summary>
    
    
      <category term="Front-End" scheme="https://blog.afacat.com/tags/Front-End/"/>
    
      <category term="JavaScript" scheme="https://blog.afacat.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>location将地址栏参数拆分成键值对的对象</title>
    <link href="https://blog.afacat.com/2015/01/23/location%E5%B0%86%E5%9C%B0%E5%9D%80%E6%A0%8F%E5%8F%82%E6%95%B0%E6%8B%86%E5%88%86%E6%88%90%E9%94%AE%E5%80%BC%E5%AF%B9%E7%9A%84%E5%AF%B9%E8%B1%A1/"/>
    <id>https://blog.afacat.com/2015/01/23/location将地址栏参数拆分成键值对的对象/</id>
    <published>2015-01-23T06:02:00.000Z</published>
    <updated>2019-06-29T10:40:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>window.location</code>可获取地址栏的一系列信息，并且每个浏览器都支持该属性，非常方便。而获取到的问号后面的参数可以进行加工转变成我们所想要的键值对。</p><h2 id="location的属性："><a href="#location的属性：" class="headerlink" title="location的属性："></a>location的属性：</h2><table><thead><tr><th align="left">属性名</th><th align="left">例子</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">hash</td><td align="left">“#contents”</td><td align="left">返回URL的hash（#后跟零或多个字符），如果URL中不包含散列，则返回空字符串</td></tr><tr><td align="left">host</td><td align="left">“<a href="http://www.wrox.com:80”" target="_blank" rel="noopener">www.wrox.com:80”</a></td><td align="left">返回服务器名称和端口号（如果有）</td></tr><tr><td align="left">hostname</td><td align="left">“<a href="http://www.wrox.com”" target="_blank" rel="noopener">www.wrox.com”</a></td><td align="left">返回不带端口号的服务器名称</td></tr><tr><td align="left">href</td><td align="left">“<a href="http://www.wrox.com”" target="_blank" rel="noopener">http://www.wrox.com”</a></td><td align="left">返回当前加载页面的完整URL。而location对象的toString()方法也返回这个值</td></tr><tr><td align="left">pathname</td><td align="left">“WileyCDA”</td><td align="left">返回URL中的目录或文件名</td></tr><tr><td align="left">port</td><td align="left">“8080”</td><td align="left">返回URL中指定的端口号。如果URL中不包含端口号则返回空字符串</td></tr><tr><td align="left">protocol</td><td align="left">“http:”</td><td align="left">返回页面的使用协议。通常是http:或https:</td></tr><tr><td align="left">search</td><td align="left">“?q=javascript”</td><td align="left">返回URL的查询字符串，这个字符串以问号开头</td></tr></tbody></table><p>而修改了其中的任何属性，都会使得页面刷新，当然页面刷新还有其它方式。</p><h2 id="location刷新"><a href="#location刷新" class="headerlink" title="location刷新"></a>location刷新</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location.assign(url);            　　<span class="comment">// 跳转链接</span></span><br><span class="line">location.href = url;            　　 <span class="comment">// 跳转链接</span></span><br><span class="line"><span class="built_in">window</span>.location = url;              <span class="comment">// 跳转链接</span></span><br><span class="line">location.replace(url);              <span class="comment">// 链接链接，不保存于历史纪录</span></span><br><span class="line">location.reload();            　　  <span class="comment">// 刷新，从缓存中读取</span></span><br><span class="line">location.reload(<span class="literal">true</span>);             <span class="comment">// 刷新，重新从服务器读取</span></span><br></pre></td></tr></table></figure><h2 id="获取地址栏的参数，并以键值对展现"><a href="#获取地址栏的参数，并以键值对展现" class="headerlink" title="获取地址栏的参数，并以键值对展现"></a>获取地址栏的参数，并以键值对展现</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQueryStringArgs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> qs = (location.search.length &gt; <span class="number">0</span> ? location.search.substring(<span class="number">1</span>) : <span class="string">""</span>),</span><br><span class="line">        args = &#123;&#125;,</span><br><span class="line">        items = qs.length ? qs.split(<span class="string">"&amp;"</span>) : [],</span><br><span class="line">        item = <span class="literal">null</span>,</span><br><span class="line">        name = <span class="literal">null</span>,</span><br><span class="line">        value = <span class="literal">null</span>,</span><br><span class="line">        i = <span class="number">0</span>,</span><br><span class="line">        len = items.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        item = items[i].split(<span class="string">"="</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// decodeURIComponent解码</span></span><br><span class="line">        name = <span class="built_in">decodeURIComponent</span>(item[<span class="number">0</span>]);</span><br><span class="line">        value = <span class="built_in">decodeURIComponent</span>(item[<span class="number">1</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (name.length) &#123;</span><br><span class="line">            args[name] = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过调用<code>getQueryStringArgs()</code>方法就可以返回地址栏中的参数信息，并保存于对象中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;window.location&lt;/code&gt;可获取地址栏的一系列信息，并且每个浏览器都支持该属性，非常方便。而获取到的问号后面的参数可以进行加工转变成我们所想要的键值对。&lt;/p&gt;
&lt;h2 id=&quot;location的属性：&quot;&gt;&lt;a href=&quot;#location的
      
    
    </summary>
    
    
      <category term="Front-End" scheme="https://blog.afacat.com/tags/Front-End/"/>
    
      <category term="JavaScript" scheme="https://blog.afacat.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下搭建LAMP配置讲解</title>
    <link href="https://blog.afacat.com/2014/12/30/Ubuntu%E4%B8%8B%E6%90%AD%E5%BB%BALAMP%E9%85%8D%E7%BD%AE%E8%AE%B2%E8%A7%A3/"/>
    <id>https://blog.afacat.com/2014/12/30/Ubuntu下搭建LAMP配置讲解/</id>
    <published>2014-12-30T09:42:00.000Z</published>
    <updated>2019-06-29T10:34:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>LAMP（Linux, Apache, Mysql, PHP），顾名思义，要在Ubuntu下搭建LAMP环境时，需要先下载Apache, Mysql, PHP。</p><h2 id="安装apache2"><a href="#安装apache2" class="headerlink" title="安装apache2"></a>安装apache2</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span>sudo apt-get install apache2</span><br></pre></td></tr></table></figure><p>（然后可通过<code>sudo /etc/init.d/apache2 restart</code>重启服务器，当然可以把<code>restart</code>改为<code>start</code>/<code>stop</code>对应启动与关闭）</p><h2 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo apt-get install libapache2-mod-php5 php5</span><br></pre></td></tr></table></figure><p>装完之后写一个测试程序。<br>先执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo gedit /var/www/test.php</span><br></pre></td></tr></table></figure><p>在<code>/var/www/</code>目录下创建<code>test.php</code>的测试文件，然后<code>test.php</code>如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>hp</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"Hello, World!"</span>;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>完成之后保存，再到浏览器中输入<a href="http://localhost/test.php，若浏览器能输入&quot;Hello" target="_blank" rel="noopener">http://localhost/test.php，若浏览器能输入&quot;Hello</a>, World!”则表示php安装成功</p><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server mysql-client</span><br></pre></td></tr></table></figure><p>apt-get将会自动下载最新mysql，安装过程中，mysql会提示输入mysql的密码。<br>于是，mysql就这样安装好了，是不是比windows下安装mysql快，方便100倍？<br>附mysql启动、关闭、重启命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo /etc/init.d/mysql start</span><br></pre></td></tr></table></figure><p>其中<code>start</code>改为<code>stop</code>/<code>restart</code>代表停止/重启<br>完成之后需要设置<code>/var/www</code>的下的权限，不然会提示权限不足</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> sudo chmod -R 777 /var/www</span><br></pre></td></tr></table></figure><p>其中-R表示递归，即所有的子目录设置同样的权限。777是最高权限，所有的用户可读可写，可根据需要自行修改对应权限。</p><p>就这样LAMP轻松的在Ubuntu下搭建好了。</p><p>那如何更改apache的根目录<code>/var/www</code>呢？<br>只需要将<code>/etc/apache2/apache.conf</code>下的<code>Directory</code>中的<code>/var/www</code>更改为自己的路径（注意：此路径只能是<code>/var/www</code>下的子路径）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;Directory /var/www/html/&gt;</span> <span class="comment"># 此处进行了修改</span></span><br><span class="line">    <span class="attribute"><span class="nomarkup">Options</span></span> Indexes FollowSymLinks</span><br><span class="line">    <span class="attribute">AllowOverride</span> None</span><br><span class="line">    <span class="attribute">Require</span> <span class="literal">all</span> granted</span><br><span class="line"><span class="section">&lt;/Directory&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;LAMP（Linux, Apache, Mysql, PHP），顾名思义，要在Ubuntu下搭建LAMP环境时，需要先下载Apache, Mysql, PHP。&lt;/p&gt;
&lt;h2 id=&quot;安装apache2&quot;&gt;&lt;a href=&quot;#安装apache2&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="Back-End" scheme="https://blog.afacat.com/tags/Back-End/"/>
    
      <category term="PHP" scheme="https://blog.afacat.com/tags/PHP/"/>
    
      <category term="Linux" scheme="https://blog.afacat.com/tags/Linux/"/>
    
      <category term="Apache" scheme="https://blog.afacat.com/tags/Apache/"/>
    
  </entry>
  
  <entry>
    <title>PHP jpgraph的一点小提示（附安装方法）</title>
    <link href="https://blog.afacat.com/2014/11/10/PHP-jpgraph%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E6%8F%90%E7%A4%BA%EF%BC%88%E9%99%84%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95%EF%BC%89/"/>
    <id>https://blog.afacat.com/2014/11/10/PHP-jpgraph的一点小提示（附安装方法）/</id>
    <published>2014-11-10T07:29:00.000Z</published>
    <updated>2019-06-29T10:24:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　PHP中的GD库本身是一套很强大的绘图库了，绘制的图像基本可以满足日常要求，但强大规强大，还是不够方便哈，因为强大方便的基于PHP的GD库的jpgraph也就诞生啦！</p><p>　　PHP默认是不启用GD库的，因为需要在php.ini的配置文件中将extension=php_gd2.dll注释打开。打开后你就可以画一些你想画的各种奇葩图案了。什么？不会画？那回去学基础！</p><p>　　今天看了一下某培训机构的视频，看了jpgraph报表这块儿，按照视频方法，在<a href="http://jpgraph.net/download/上下载了Version" target="_blank" rel="noopener">http://jpgraph.net/download/上下载了Version</a>: 3.0.7版本，解压后在Examples目录下创建一个jpgraph目录，并将src目录下的除开Examples的所有文件剪切到Examples目录下刚创建的jpgraph目录内。然后把Examples拷贝到apache所配置的目录即可。</p><p>　　可是结果试了半天，老报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Warning: strftime(): It is not safe to rely on the system's timezone settings. You are *required* to use the date.timezone setting or the date_default_timezone_set() function. In case you used any of those methods and you are still getting this warning, you most likely misspelled the timezone identifier. We selected the timezone 'UTC' for now, but please set date.timezone to select your timezone. in H:\TestFile\Examples\jpgraph\jpgraph.php on line 391</span><br><span class="line"></span><br><span class="line">JpGraph Error: HTTP headers have already been sent.</span><br><span class="line">Caused by output from file jpgraph.php at line 392.Explanation:</span><br><span class="line">HTTP headers have already been sent back to the browser indicating the data as text before the library got a chance to send it's image HTTP header to this browser. This makes it impossible for the library to send back image data to the browser (since that would be interpretated as text by the browser and show up as junk text).</span><br><span class="line"></span><br><span class="line">Most likely you have some text in your script before the call to Graph::Stroke(). If this texts gets sent back to the browser the browser will assume that all data is plain text. Look for any text, even spaces and newlines, that might have been sent back to the browser.</span><br><span class="line"></span><br><span class="line">For example it is a common mistake to leave a blank line before the opening "&lt;?php".</span><br></pre></td></tr></table></figure><p>　　上面的Warning报了一堆后，出现了一个错误：JpGraph Error，于是乎，英文不好的博主索性将这堆英文拉到百度翻译去，索性还是没看懂，网上找了一堆也是无人答之，后在Google下搜一下才找到。<a href="http://bbs.php100.com/simple/?t294044.html" target="_blank" rel="noopener">http://bbs.php100.com/simple/?t294044.html</a> ，答案大概就是时区什么什么问题的，也给出了解决方案用date_default_timezone_set(‘Asia/Chongqing’);设置对应的时区即可，这里设置成了重庆。问题也就随之解决了。</p><p>　　随后又下载了Version: 3.5.0b1的jpgraph，按同样的方法试之，首页的图片还是加载不出来，原因是没有‘jpgraph/jpgraph_odo.php’这个文件，导致引入时就出了问题，而博主到网上搜了相应的文件也复制到jpgraph目录下，也还是未能解决，最后不了了之。</p><p>　　有解决方法否？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　PHP中的GD库本身是一套很强大的绘图库了，绘制的图像基本可以满足日常要求，但强大规强大，还是不够方便哈，因为强大方便的基于PHP的GD库的jpgraph也就诞生啦！&lt;/p&gt;
&lt;p&gt;　　PHP默认是不启用GD库的，因为需要在php.ini的配置文件中将extension
      
    
    </summary>
    
    
      <category term="Back-End" scheme="https://blog.afacat.com/tags/Back-End/"/>
    
      <category term="PHP" scheme="https://blog.afacat.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP文件上传后缀名与文件类型对照表</title>
    <link href="https://blog.afacat.com/2014/11/08/PHP%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%90%8E%E7%BC%80%E5%90%8D%E4%B8%8E%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E5%AF%B9%E7%85%A7%E8%A1%A8/"/>
    <id>https://blog.afacat.com/2014/11/08/PHP文件上传后缀名与文件类型对照表/</id>
    <published>2014-11-08T01:24:00.000Z</published>
    <updated>2019-06-29T09:34:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>左边为IE， 右边为Firefox</strong></p><table><thead><tr><th align="left">id</th><th align="left">后缀名</th><th align="left">php识别出的文件类型</th><th align="left">id</th><th align="left">后缀名</th><th align="left">php识别出的文件类型</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">gif</td><td align="left">image/gif</td><td align="left">0</td><td align="left">gif</td><td align="left">image/gif</td></tr><tr><td align="left">1</td><td align="left">jpg</td><td align="left">image/jpeg</td><td align="left">1</td><td align="left">jpg</td><td align="left">image/pjpeg</td></tr><tr><td align="left">2</td><td align="left">png</td><td align="left">image/png</td><td align="left">2</td><td align="left">png</td><td align="left">image/x-png</td></tr><tr><td align="left">3</td><td align="left">bmp</td><td align="left">image/bmp</td><td align="left">3</td><td align="left">bmp</td><td align="left">image/bmp</td></tr><tr><td align="left">4</td><td align="left">psd</td><td align="left">application/octet-stream</td><td align="left">4</td><td align="left">psd</td><td align="left">application/octet-stream</td></tr><tr><td align="left">5</td><td align="left">ico</td><td align="left">image/x-icon</td><td align="left">5</td><td align="left">ico</td><td align="left">image/x-icon</td></tr><tr><td align="left">6</td><td align="left">rar</td><td align="left">application/octet-stream</td><td align="left">6</td><td align="left">rar</td><td align="left">application/octet-stream</td></tr><tr><td align="left">7</td><td align="left">zip</td><td align="left">application/zip</td><td align="left">7</td><td align="left">zip</td><td align="left">application/x-zip-compressed</td></tr><tr><td align="left">8</td><td align="left">7z</td><td align="left">application/octet-stream</td><td align="left">8</td><td align="left">7z</td><td align="left">application/octet-stream</td></tr><tr><td align="left">9</td><td align="left">exe</td><td align="left">application/octet-stream</td><td align="left">9</td><td align="left">exe</td><td align="left">application/octet-stream</td></tr><tr><td align="left">10</td><td align="left">avi</td><td align="left">video/avi</td><td align="left">10</td><td align="left">avi</td><td align="left">video/avi</td></tr><tr><td align="left">11</td><td align="left">rmvb</td><td align="left">application/vnd.rn-realmedia-vbr</td><td align="left">11</td><td align="left">rmvb</td><td align="left">application/vnd.rn-realmedia-vbr</td></tr><tr><td align="left">12</td><td align="left">3gp</td><td align="left">application/octet-stream</td><td align="left">12</td><td align="left">3gp</td><td align="left">application/octet-stream</td></tr><tr><td align="left">13</td><td align="left">flv</td><td align="left">application/octet-stream</td><td align="left">13</td><td align="left">flv</td><td align="left">application/octet-stream</td></tr><tr><td align="left">14</td><td align="left">mp3</td><td align="left">audio/mpeg</td><td align="left">14</td><td align="left">mp3</td><td align="left">audio/mpeg</td></tr><tr><td align="left">15</td><td align="left">wav</td><td align="left">audio/wav</td><td align="left">15</td><td align="left">wav</td><td align="left">audio/wav</td></tr><tr><td align="left">16</td><td align="left">krc</td><td align="left">application/octet-stream</td><td align="left">16</td><td align="left">krc</td><td align="left">application/octet-stream</td></tr><tr><td align="left">17</td><td align="left">lrc</td><td align="left">application/octet-stream</td><td align="left">17</td><td align="left">lrc</td><td align="left">application/octet-stream</td></tr><tr><td align="left">18</td><td align="left">txt</td><td align="left">text/plain</td><td align="left">18</td><td align="left">txt</td><td align="left">text/plain</td></tr><tr><td align="left">19</td><td align="left">doc</td><td align="left">application/msword</td><td align="left">19</td><td align="left">doc</td><td align="left">application/msword</td></tr><tr><td align="left">20</td><td align="left">xls</td><td align="left">application/vnd.ms-excel</td><td align="left">20</td><td align="left">xls</td><td align="left">application/vnd.ms-excel</td></tr><tr><td align="left">21</td><td align="left">ppt</td><td align="left">application/vnd.ms-powerpoint</td><td align="left">21</td><td align="left">ppt</td><td align="left">application/vnd.ms-powerpoint</td></tr><tr><td align="left">22</td><td align="left">pdf</td><td align="left">application/pdf</td><td align="left">22</td><td align="left">pdf</td><td align="left">application/pdf</td></tr><tr><td align="left">23</td><td align="left">chm</td><td align="left">application/octet-stream</td><td align="left">23</td><td align="left">chm</td><td align="left">application/octet-stream</td></tr><tr><td align="left">24</td><td align="left">mdb</td><td align="left">application/msaccess</td><td align="left">24</td><td align="left">mdb</td><td align="left">application/msaccess</td></tr><tr><td align="left">25</td><td align="left">sql</td><td align="left">application/octet-stream</td><td align="left">25</td><td align="left">sql</td><td align="left">text/plain</td></tr><tr><td align="left">26</td><td align="left">con</td><td align="left">application/octet-stream</td><td align="left">26</td><td align="left">con</td><td align="left">application/octet-stream</td></tr><tr><td align="left">27</td><td align="left">log</td><td align="left">text/plain</td><td align="left">27</td><td align="left">log</td><td align="left">text/plain</td></tr><tr><td align="left">28</td><td align="left">dat</td><td align="left">application/octet-stream</td><td align="left">28</td><td align="left">dat</td><td align="left">text/plain</td></tr><tr><td align="left">29</td><td align="left">ini</td><td align="left">application/octet-stream</td><td align="left">29</td><td align="left">ini</td><td align="left">application/octet-stream</td></tr><tr><td align="left">30</td><td align="left">php</td><td align="left">application/octet-stream</td><td align="left">30</td><td align="left">php</td><td align="left">application/octet-stream</td></tr><tr><td align="left">31</td><td align="left">html</td><td align="left">text/html</td><td align="left">31</td><td align="left">html</td><td align="left">text/html</td></tr><tr><td align="left">32</td><td align="left">ttf</td><td align="left">application/octet-stream</td><td align="left">32</td><td align="left">ttf</td><td align="left">application/octet-stream</td></tr><tr><td align="left">33</td><td align="left">fon</td><td align="left">application/octet-stream</td><td align="left">33</td><td align="left">fon</td><td align="left">application/octet-stream</td></tr><tr><td align="left">34</td><td align="left">js</td><td align="left">application/x-javascript</td><td align="left">34</td><td align="left">js</td><td align="left">text/html</td></tr><tr><td align="left">35</td><td align="left">xml</td><td align="left">text/xml</td><td align="left">35</td><td align="left">xml</td><td align="left">text/xml</td></tr><tr><td align="left">36</td><td align="left">dll</td><td align="left">application/octet-stream</td><td align="left">36</td><td align="left">dll</td><td align="left">application/octet-stream</td></tr><tr><td align="left">37</td><td align="left">dll</td><td align="left">application/octet-stream</td><td align="left">37</td><td align="left">class</td><td align="left">application/java</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;左边为IE， 右边为Firefox&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;id&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;后缀名&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;php识别出的文件
      
    
    </summary>
    
    
      <category term="Back-End" scheme="https://blog.afacat.com/tags/Back-End/"/>
    
      <category term="PHP" scheme="https://blog.afacat.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP生成验证码</title>
    <link href="https://blog.afacat.com/2014/11/04/PHP%E7%94%9F%E6%88%90%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>https://blog.afacat.com/2014/11/04/PHP生成验证码/</id>
    <published>2014-11-04T10:41:00.000Z</published>
    <updated>2019-06-29T09:08:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　验证码已经是现在网站中非常基础的知识点了，验证码的存在可以防止恶意破解密码、刷票、灌水，可以有效的防止暴力破解特定用户。</p><p>　　现在就来了解了解那些年PHP中屌屌的验证码吧。</p><p>　　首先，以四位验证码为例（多位验证码一样的道理）。</p><p>　　目前网站大多仍然采用静态图片验证码，因为这样实现起来简单又方便，不需要过硬的功底，当然这也是基础。而其原理也就是通过PHP的画图功能将文字画成图片返回到页面。因此，我们解决的问题也就只有三步而已：</p><p>随机生成验证码的内容<br>将验证码转换成图片，即绘图<br>将所绘出的图返回到页面中<br>　　当然，PHP默认是没有开启绘图功能的，因此，在php.ini的配置文件中先开启绘图功能吧：搜到  ;extension=php_gd2.dll  将前面的分号去掉即可。（记得保存喔！）</p><p>　　那根据第一点，大家首先应该会想到数字的验证码，因为这容易，随机生成个几个数字，然后拼起来也就行了，像酱紫！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$validateCode = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">4</span>; $i ++) &#123;</span><br><span class="line">    $validateCode .= rand(<span class="number">0</span>, <span class="number">9</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> $validateCode;</span><br></pre></td></tr></table></figure><p>　　然后仔细想想，现在的网站验证码都有字母，可这玩意儿都没字母，怎么呢？然后又想到，直接把上面那玩意儿搞成十六进制就好了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$validateCode = <span class="string">''</span>;</span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">4</span>; $i ++) &#123;</span><br><span class="line">    $validateCode .= dechex(rand(<span class="number">0</span>, <span class="number">16</span>));</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">echo</span> $validateCode;</span><br></pre></td></tr></table></figure><p>　　好像有点自作聪明的赶脚呀，不过想想，也算是有几个字母了，可却只有a,b,c,d,e,f，那要是需要所有字母咋办呢？哈哈，在想想也就想到把所有的字母和数字等在一个字符串中列出来，然后通过随机下标的形式去<br>随机获取对应的值，也就成了这样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$validateCode = <span class="string">''</span>;</span><br><span class="line">$str = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890'</span>;</span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">4</span>; $i ++) &#123;</span><br><span class="line">    $validateCode .= $str[rand(<span class="number">0</span>, strlen($str))];</span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">echo</span> $validateCode;</span><br></pre></td></tr></table></figure><p>　　哈哈，终于像验证码里的随机数了，不过看到下面的方法，有总瞬间被秒的赶脚呀：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> substr(str_shuffle(<span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890'</span>), <span class="number">0</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>　　<code>str_shuffle</code>方法将字符串内容打乱，<code>substr($str, 0, 4)</code>取到了前四个数。这样是完全没有问题的！不过细心的看的出来，这样的验证码里的内容是不会重复的。<br>　　以上验证码也就产生了，接下来也就要将验证码用PHP画出来了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$validateCode = substr(str_shuffle(<span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890'</span>), <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一张宽为110px，高为25px的图片</span></span><br><span class="line">$img = imagecreatetruecolor(<span class="number">110</span>, <span class="number">25</span>);</span><br><span class="line"><span class="comment">// 将图片的背景颜色设置成黑色，颜色值分别对应RGB</span></span><br><span class="line">$bgcolor = imagecolorallocate($img, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建白色</span></span><br><span class="line">$white = imagecolorallocate($img, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加文字在图片中，第二个参数为文字的大小，只能在1~5，第三个参数为x坐标，第4个参数为y坐标，第5个参数为文字的内容，第6个参数为文字的颜色</span></span><br><span class="line">imagestring($img, rand(<span class="number">3</span>, <span class="number">5</span>), rand(<span class="number">0</span>, <span class="number">80</span>), rand(<span class="number">2</span>, <span class="number">10</span>), $validateCode, $white);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加文字在图片中，第二个参数为文字的大小，只能在1~5，第三个参数为x坐标，第4个参数为y坐标，第5个参数为文字的内容，第6个参数为文字的颜色</span></span><br><span class="line">imagestring($img, rand(<span class="number">3</span>, <span class="number">5</span>), rand(<span class="number">0</span>, <span class="number">80</span>), rand(<span class="number">2</span>, <span class="number">10</span>), $validateCode, $white);</span><br></pre></td></tr></table></figure><img src="/2014/11/04/PHP生成验证码/img_1.png"><p>　　当然，这样的话验证码就太好识别了，就只是单纯的黑底白字，为了增加点难度，我们就多加几条线叠加在验证码的上面。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$validateCode = substr(str_shuffle(<span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890'</span>), <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一张宽为110px，高为25px的图片</span></span><br><span class="line">$img = imagecreatetruecolor(<span class="number">110</span>, <span class="number">25</span>);</span><br><span class="line"><span class="comment">// 将图片的背景颜色设置成黑色，颜色值分别对应RGB</span></span><br><span class="line">$bgcolor = imagecolorallocate($img, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// imagefill($img, 10, 10, $bgcolor);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建白色</span></span><br><span class="line">$white = imagecolorallocate($img, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; <span class="number">30</span>; $i ++) &#123;</span><br><span class="line">    <span class="comment">// 在图片上画线，其中第2个参数表示线的x起始坐标，第3个参数表示线的y起始坐标，第4个参数表示x的终止坐标，第5个参数表示y的终止坐标，第6个参数表示颜色，此处生成一个随机颜色</span></span><br><span class="line">    imageline($img, rand(<span class="number">0</span>, <span class="number">110</span>), rand(<span class="number">0</span>, <span class="number">50</span>), rand(<span class="number">0</span>, <span class="number">110</span>), rand(<span class="number">0</span>, <span class="number">50</span>), imagecolorallocate($img, rand(<span class="number">0</span>, <span class="number">255</span>), rand(<span class="number">0</span>, <span class="number">255</span>), rand(<span class="number">0</span>, <span class="number">255</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加文字在图片中，第二个参数为文字的大小，只能在1~5，第三个参数为x坐标，第4个参数为y坐标，第5个参数为文字的内容，第6个参数为文字的颜色</span></span><br><span class="line">imagestring($img, rand(<span class="number">3</span>, <span class="number">5</span>), rand(<span class="number">0</span>, <span class="number">80</span>), rand(<span class="number">2</span>, <span class="number">10</span>), $validateCode, $white);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回成图片</span></span><br><span class="line">header(<span class="string">'Content-type: image/png'</span>);</span><br><span class="line">imagepng($img);</span><br></pre></td></tr></table></figure><img src="/2014/11/04/PHP生成验证码/img_2.png"><p>　　结果也就成了这样，当然，要想实现验证码，这样还是不够滴，需要通过将验证码生成的随机数存到服务器的session中，<code>$_SESSION[&#39;validate&#39;] = $validateCode;</code>然后在通过客户端输入的验证码与之对比即可。PHP中屌屌的验证码也就这样实现了，当然，前面也说过了，这是最基础的代码，可以通过你的想法将其改变为实现算术的验证码，中文的验证码，或其它一些有趣的验证码，以减少其枯燥性又实现安全性。<br>　　大家有没有什么其它屌屌的验证码分享与我呢？</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　验证码已经是现在网站中非常基础的知识点了，验证码的存在可以防止恶意破解密码、刷票、灌水，可以有效的防止暴力破解特定用户。&lt;/p&gt;
&lt;p&gt;　　现在就来了解了解那些年PHP中屌屌的验证码吧。&lt;/p&gt;
&lt;p&gt;　　首先，以四位验证码为例（多位验证码一样的道理）。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="Back-End" scheme="https://blog.afacat.com/tags/Back-End/"/>
    
      <category term="PHP" scheme="https://blog.afacat.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>原生JavaScript生成GUID</title>
    <link href="https://blog.afacat.com/2014/09/04/%E5%8E%9F%E7%94%9FJavaScript%E7%94%9F%E6%88%90GUID/"/>
    <id>https://blog.afacat.com/2014/09/04/原生JavaScript生成GUID/</id>
    <published>2014-09-04T09:59:00.000Z</published>
    <updated>2019-06-29T08:58:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　GUID（全局统一标识符）是指在一台机器上生成的数字，它保证对在同一时空中的所有机器都是唯一的。通常平台会提供生成GUID的API。生成算法很有意思，用到了以太网卡地址、纳秒级时间、芯片ID码和许多可能的数字。GUID的唯一缺陷在于生成的结果串会比较大。</p><p>　　GUID的格式为：xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx</p><p>　　大家都知道GUID在前端开发中用处不大，但如果需要插入某个ID，并且这个ID与后台对应等其它需要GUID的操作时，为了方便，我们还是可以生成一个GUID的。</p><p>　　一般在sql、java、C#等后台或数据库语言中生成GUID都很简单，而前端没有直接生成GUID的方法，只能自己手写一个。但由于GUID需要获取以太网卡的地址、以及纳秒级的时间等数字。而前端获取到这些信息比较困难（知道的童鞋请一定告诉我），而我们可以模拟实现生成GUID，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 功能：生成一个GUID码，其中GUID以14个以下的日期时间及18个以上的16进制随机数组成，GUID存在一定的重复概率，但重复概率极低，理论上重复概率为每10ms有1/(16^18)，即16的18次方分之1，重复概率低至可忽略不计</span></span><br><span class="line"><span class="comment"> * 免责声明：此代码为作者学习专用，如在使用者在使用过程中因代码问题造成的损失，与作者没有任何关系</span></span><br><span class="line"><span class="comment"> * 日期：2014年9月4日</span></span><br><span class="line"><span class="comment"> * 作者：wyc</span></span><br><span class="line"><span class="comment"> * http://www.cnblogs.com/wuyuchang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GUID</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 判断是否初始化过，如果初始化过以下代码，则以下代码将不再执行，实际中只执行一次 */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.newGUID != <span class="string">'function'</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* 生成GUID码 */</span></span><br><span class="line">        GUID.prototype.newGUID = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">            <span class="keyword">var</span> guidStr = <span class="string">''</span>;</span><br><span class="line">                sexadecimalDate = <span class="keyword">this</span>.hexadecimal(<span class="keyword">this</span>.getGUIDDate(), <span class="number">16</span>);</span><br><span class="line">                sexadecimalTime = <span class="keyword">this</span>.hexadecimal(<span class="keyword">this</span>.getGUIDTime(), <span class="number">16</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</span><br><span class="line">                guidStr += <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">16</span>).toString(<span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            guidStr += sexadecimalDate;</span><br><span class="line">            guidStr += sexadecimalTime;</span><br><span class="line">            <span class="keyword">while</span>(guidStr.length &lt; <span class="number">32</span>) &#123;</span><br><span class="line">                guidStr += <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">16</span>).toString(<span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.formatGUID(guidStr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 功能：获取当前日期的GUID格式，即8位数的日期：19700101</span></span><br><span class="line"><span class="comment">         * 返回值：返回GUID日期格式的字条串</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        GUID.prototype.getGUIDDate = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.date.getFullYear() + <span class="keyword">this</span>.addZero(<span class="keyword">this</span>.date.getMonth() + <span class="number">1</span>) + <span class="keyword">this</span>.addZero(<span class="keyword">this</span>.date.getDay());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 功能：获取当前时间的GUID格式，即8位数的时间，包括毫秒，毫秒为2位数：12300933</span></span><br><span class="line"><span class="comment">         * 返回值：返回GUID日期格式的字条串</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        GUID.prototype.getGUIDTime = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.addZero(<span class="keyword">this</span>.date.getHours()) + <span class="keyword">this</span>.addZero(<span class="keyword">this</span>.date.getMinutes()) + <span class="keyword">this</span>.addZero(<span class="keyword">this</span>.date.getSeconds()) + <span class="keyword">this</span>.addZero( <span class="built_in">parseInt</span>(<span class="keyword">this</span>.date.getMilliseconds() / <span class="number">10</span> ));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 功能: 为一位数的正整数前面添加0，如果是可以转成非NaN数字的字符串也可以实现</span></span><br><span class="line"><span class="comment">         * 参数: 参数表示准备再前面添加0的数字或可以转换成数字的字符串</span></span><br><span class="line"><span class="comment">         * 返回值: 如果符合条件，返回添加0后的字条串类型，否则返回自身的字符串</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        GUID.prototype.addZero = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">Number</span>(num).toString() != <span class="string">'NaN'</span> &amp;&amp; num &gt;= <span class="number">0</span> &amp;&amp; num &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">'0'</span> + <span class="built_in">Math</span>.floor(num);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> num.toString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">         * 功能：将y进制的数值，转换为x进制的数值</span></span><br><span class="line"><span class="comment">         * 参数：第1个参数表示欲转换的数值；第2个参数表示欲转换的进制；第3个参数可选，表示当前的进制数，如不写则为10</span></span><br><span class="line"><span class="comment">         * 返回值：返回转换后的字符串</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        GUID.prototype.hexadecimal = <span class="function"><span class="keyword">function</span>(<span class="params">num, x, y</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (y != <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">parseInt</span>(num.toString(), y).toString(x);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">parseInt</span>(num.toString()).toString(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 功能：格式化32位的字符串为GUID模式的字符串</span></span><br><span class="line"><span class="comment">         * 参数：第1个参数表示32位的字符串</span></span><br><span class="line"><span class="comment">         * 返回值：标准GUID格式的字符串</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        GUID.prototype.formatGUID = <span class="function"><span class="keyword">function</span>(<span class="params">guidStr</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> str1 = guidStr.slice(<span class="number">0</span>, <span class="number">8</span>) + <span class="string">'-'</span>,</span><br><span class="line">                str2 = guidStr.slice(<span class="number">8</span>, <span class="number">12</span>) + <span class="string">'-'</span>,</span><br><span class="line">                str3 =  guidStr.slice(<span class="number">12</span>, <span class="number">16</span>) + <span class="string">'-'</span>,</span><br><span class="line">                str4 = guidStr.slice(<span class="number">16</span>, <span class="number">20</span>) + <span class="string">'-'</span>,</span><br><span class="line">                str5 = guidStr.slice(<span class="number">20</span>);</span><br><span class="line">            <span class="keyword">return</span> str1 + str2 + str3 + str4 + str5;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　只需要将其保存在一个JS文件中并引用即可。<br>　　然后我们只需要如下即可获取GUID码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> guid = <span class="keyword">new</span> GUID();</span><br><span class="line">alert(guid.newGUID());</span><br></pre></td></tr></table></figure><p>　　实现原理很简单，这里只是采用了系统时间与18个以上的十六进制随机数组成，并用系统时间转换为十六进制，这样虽然还是有可能重复，但是重复的概率极低，可忽略不计。<br>　　以上为本人写的生成GUID的方法，如有更好的方法可以告诉我，谢谢！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　GUID（全局统一标识符）是指在一台机器上生成的数字，它保证对在同一时空中的所有机器都是唯一的。通常平台会提供生成GUID的API。生成算法很有意思，用到了以太网卡地址、纳秒级时间、芯片ID码和许多可能的数字。GUID的唯一缺陷在于生成的结果串会比较大。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="Front-End" scheme="https://blog.afacat.com/tags/Front-End/"/>
    
      <category term="JavaScript" scheme="https://blog.afacat.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>清除css、javascript及背景图在浏览器中的缓存</title>
    <link href="https://blog.afacat.com/2014/08/29/%E6%B8%85%E9%99%A4css%E3%80%81javascript%E5%8F%8A%E8%83%8C%E6%99%AF%E5%9B%BE%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E7%9A%84%E7%BC%93%E5%AD%98/"/>
    <id>https://blog.afacat.com/2014/08/29/清除css、javascript及背景图在浏览器中的缓存/</id>
    <published>2014-08-29T15:03:00.000Z</published>
    <updated>2019-06-29T08:55:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　在实际项目开发过过程中，页面是上传到服务器上的。而为了减少服务器的压力，让用户少加载，浏览器会将图片、css、js缓存到本地中，以便下次访问网站时使用。这样做不仅减少了服务器的压力，并且也减少了用户的下载次数，获得更好的用户体验。</p><p>　　然而在版本升级或做一些css、js等调整的时候，缓存导致用户无法显示更新后的样式，这是另人头头疼的问题。除非用户自行手动升级缓存，不过几乎所有用户不会为了正常访问这个网站而去手动清除缓存，因为用户根本不知道是不是缓存的问题，而归根结底，用户就是认为你的页面存在问题，不能正常访问。</p><p>　　为了可以正常使用缓存，又避免这样的问题，我们可以动脑筋想想，如果解决此问题呢？</p><p>　　如果更改了样式不能正常访问，那么更改样式的文件名呢？答案是可以的，这里将不再验证。然而每次都手动的去更改文件名显然过于麻烦，能不能不更改文件名呢？答案是肯定的。我们可能通在引入的文件名后面加入版本号，与之前的版本都不同的版本号（一般为更新日期）。代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"reset.css?v=20140829"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"core.js?v=20140829"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>　　可以看到我的CSS文件名及JS文件名后面都跟了”<strong>v=20140829</strong>“，这样做可以不去改变文件名又做到缓存的同时，可以实时更新。而”<strong>v=20140829</strong>“只是普遍习惯书写，可更改为其它的。</p><p>　　最后是图片，一般img标签的图片都不会重名，因为都是在后台生成的文件名。而如果是固定的文件名图片，方法同上。而对于背景图，由于更改了样式名，图片的解析路径自然是更新同步，因此背景图也更新了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　在实际项目开发过过程中，页面是上传到服务器上的。而为了减少服务器的压力，让用户少加载，浏览器会将图片、css、js缓存到本地中，以便下次访问网站时使用。这样做不仅减少了服务器的压力，并且也减少了用户的下载次数，获得更好的用户体验。&lt;/p&gt;
&lt;p&gt;　　然而在版本升级或做一
      
    
    </summary>
    
    
      <category term="Front-End" scheme="https://blog.afacat.com/tags/Front-End/"/>
    
      <category term="JavaScript" scheme="https://blog.afacat.com/tags/JavaScript/"/>
    
      <category term="CSS" scheme="https://blog.afacat.com/tags/CSS/"/>
    
      <category term="HTML" scheme="https://blog.afacat.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript获取浏览器内核</title>
    <link href="https://blog.afacat.com/2014/08/17/JavaScript%E8%8E%B7%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8/"/>
    <id>https://blog.afacat.com/2014/08/17/JavaScript获取浏览器内核/</id>
    <published>2014-08-17T06:34:00.000Z</published>
    <updated>2019-06-29T08:51:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>　　大家应该还记得JavaScript行内样式怎么写吧？（看来我是废话了！）</p><p>　　在前端开发过程中，有时我们需要判断浏览器的内核前缀，对不同的浏览器做出不同的处理，因此我们可以这么做。</p><p>　　<code>alert(element.style.webkitTransition);</code> 这个是获取以webkit为前缀的<code>transition</code>值。但如果不是webkit为前缀的浏览器，则会返回<code>undefined</code>。而我们可以将所有的内核前缀给枚举出来，然后获取其某个CSS的值，即可做出判断。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getVendorPrefix</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 使用body是为了避免在还需要传入元素</span></span><br><span class="line">    <span class="keyword">var</span> body = <span class="built_in">document</span>.body || <span class="built_in">document</span>.documentElement,</span><br><span class="line">        style = body.style,</span><br><span class="line">        vendor = [<span class="string">'webkit'</span>, <span class="string">'khtml'</span>, <span class="string">'moz'</span>, <span class="string">'ms'</span>, <span class="string">'o'</span>],</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; vendor.length) &#123;</span><br><span class="line">        <span class="comment">// 此处进行判断是否有对应的内核前缀</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> style[vendor[i] + <span class="string">'Transition'</span>] === <span class="string">'string'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> vendor[i];</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　然后只需要调用<code>getVendorPrefix()</code>即可知道浏览器的内核前缀，如果返回<code>undefined</code>则证明浏览器不支持CSS3属性，即没有内核前缀。</p><p>　　大家应该知道，我们在写代码的过程中，能写CSS就不写JavaScritp，毕竟CSS的性能会比自己写JS的高一些，因此，我们在开发一些实际应该中，会用到<code>transition</code>，比如一个简单的图片轮播，我们可以使用CSS3的<code>transition</code>，也可以使用jQuery的<code>animate</code>或自己写原生，但CSS3的性能肯定会高一些，因此我们可以写两套代码，对于支持CSS3的浏览器则使用<code>animation</code>，而不支持的则使用计时器或<code>animate</code>。这样的话能够获取更好的用户体验。</p><p>　　以上是看<code>jquery.slides.js</code>的插件心得，如有更好的方法，请一定告知笔者。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;　　大家应该还记得JavaScript行内样式怎么写吧？（看来我是废话了！）&lt;/p&gt;
&lt;p&gt;　　在前端开发过程中，有时我们需要判断浏览器的内核前缀，对不同的浏览器做出不同的处理，因此我们可以这么做。&lt;/p&gt;
&lt;p&gt;　　&lt;code&gt;alert(element.style.we
      
    
    </summary>
    
    
      <category term="Front-End" scheme="https://blog.afacat.com/tags/Front-End/"/>
    
      <category term="JavaScript" scheme="https://blog.afacat.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>
